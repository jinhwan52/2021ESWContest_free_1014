// nios2_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module nios2_mm_interconnect_2 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clocks_sys_clk_clk,                                                  //                                                clocks_sys_clk.clk
		input  wire        fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset,               //               fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        VGA_subsystem_sys_reset_reset_bridge_in_reset_reset,                 //                 VGA_subsystem_sys_reset_reset_bridge_in_reset.reset
		output wire [1:0]  command_from_hps_s1_address,                                         //                                           command_from_hps_s1.address
		output wire        command_from_hps_s1_write,                                           //                                                              .write
		input  wire [31:0] command_from_hps_s1_readdata,                                        //                                                              .readdata
		output wire [31:0] command_from_hps_s1_writedata,                                       //                                                              .writedata
		output wire        command_from_hps_s1_chipselect,                                      //                                                              .chipselect
		output wire [1:0]  electrode_voltage_s1_address,                                        //                                          electrode_voltage_s1.address
		output wire        electrode_voltage_s1_write,                                          //                                                              .write
		input  wire [31:0] electrode_voltage_s1_readdata,                                       //                                                              .readdata
		output wire [31:0] electrode_voltage_s1_writedata,                                      //                                                              .writedata
		output wire        electrode_voltage_s1_chipselect,                                     //                                                              .chipselect
		output wire [2:0]  fifo_FPGA_to_HPS_out_csr_address,                                    //                                      fifo_FPGA_to_HPS_out_csr.address
		output wire        fifo_FPGA_to_HPS_out_csr_write,                                      //                                                              .write
		output wire        fifo_FPGA_to_HPS_out_csr_read,                                       //                                                              .read
		input  wire [31:0] fifo_FPGA_to_HPS_out_csr_readdata,                                   //                                                              .readdata
		output wire [31:0] fifo_FPGA_to_HPS_out_csr_writedata,                                  //                                                              .writedata
		output wire [2:0]  fifo_HPS_to_FPGA_in_csr_address,                                     //                                       fifo_HPS_to_FPGA_in_csr.address
		output wire        fifo_HPS_to_FPGA_in_csr_write,                                       //                                                              .write
		output wire        fifo_HPS_to_FPGA_in_csr_read,                                        //                                                              .read
		input  wire [31:0] fifo_HPS_to_FPGA_in_csr_readdata,                                    //                                                              .readdata
		output wire [31:0] fifo_HPS_to_FPGA_in_csr_writedata,                                   //                                                              .writedata
		output wire [1:0]  finish_fdtd_s1_address,                                              //                                                finish_fdtd_s1.address
		input  wire [31:0] finish_fdtd_s1_readdata,                                             //                                                              .readdata
		output wire [1:0]  HW_reset_s1_address,                                                 //                                                   HW_reset_s1.address
		output wire        HW_reset_s1_write,                                                   //                                                              .write
		input  wire [31:0] HW_reset_s1_readdata,                                                //                                                              .readdata
		output wire [31:0] HW_reset_s1_writedata,                                               //                                                              .writedata
		output wire        HW_reset_s1_chipselect,                                              //                                                              .chipselect
		output wire [1:0]  iteration_number_s1_address,                                         //                                           iteration_number_s1.address
		output wire        iteration_number_s1_write,                                           //                                                              .write
		input  wire [31:0] iteration_number_s1_readdata,                                        //                                                              .readdata
		output wire [31:0] iteration_number_s1_writedata,                                       //                                                              .writedata
		output wire        iteration_number_s1_chipselect,                                      //                                                              .chipselect
		output wire [1:0]  module_csr_s1_address,                                               //                                                 module_csr_s1.address
		input  wire [31:0] module_csr_s1_readdata,                                              //                                                              .readdata
		output wire [1:0]  Number32_s1_address,                                                 //                                                   Number32_s1.address
		input  wire [31:0] Number32_s1_readdata,                                                //                                                              .readdata
		output wire [1:0]  O_pw_forward_s1_address,                                             //                                               O_pw_forward_s1.address
		input  wire [31:0] O_pw_forward_s1_readdata,                                            //                                                              .readdata
		output wire [1:0]  O_pw_reversed_s1_address,                                            //                                              O_pw_reversed_s1.address
		input  wire [31:0] O_pw_reversed_s1_readdata,                                           //                                                              .readdata
		output wire [1:0]  O_temperature_s1_address,                                            //                                              O_temperature_s1.address
		input  wire [31:0] O_temperature_s1_readdata,                                           //                                                              .readdata
		output wire [1:0]  O_temperature2_s1_address,                                           //                                             O_temperature2_s1.address
		input  wire [31:0] O_temperature2_s1_readdata,                                          //                                                              .readdata
		output wire [1:0]  Pixel_DMA_Addr_Translation_slave_address,                            //                              Pixel_DMA_Addr_Translation_slave.address
		output wire        Pixel_DMA_Addr_Translation_slave_write,                              //                                                              .write
		output wire        Pixel_DMA_Addr_Translation_slave_read,                               //                                                              .read
		input  wire [31:0] Pixel_DMA_Addr_Translation_slave_readdata,                           //                                                              .readdata
		output wire [31:0] Pixel_DMA_Addr_Translation_slave_writedata,                          //                                                              .writedata
		output wire [3:0]  Pixel_DMA_Addr_Translation_slave_byteenable,                         //                                                              .byteenable
		input  wire        Pixel_DMA_Addr_Translation_slave_waitrequest,                        //                                                              .waitrequest
		output wire [1:0]  power_unlock_s1_address,                                             //                                               power_unlock_s1.address
		output wire        power_unlock_s1_write,                                               //                                                              .write
		input  wire [31:0] power_unlock_s1_readdata,                                            //                                                              .readdata
		output wire [31:0] power_unlock_s1_writedata,                                           //                                                              .writedata
		output wire        power_unlock_s1_chipselect,                                          //                                                              .chipselect
		output wire [1:0]  rf_on_off_s1_address,                                                //                                                  rf_on_off_s1.address
		output wire        rf_on_off_s1_write,                                                  //                                                              .write
		input  wire [31:0] rf_on_off_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] rf_on_off_s1_writedata,                                              //                                                              .writedata
		output wire        rf_on_off_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]  SP_s1_address,                                                       //                                                         SP_s1.address
		output wire        SP_s1_write,                                                         //                                                              .write
		input  wire [31:0] SP_s1_readdata,                                                      //                                                              .readdata
		output wire [31:0] SP_s1_writedata,                                                     //                                                              .writedata
		output wire        SP_s1_chipselect,                                                    //                                                              .chipselect
		output wire [1:0]  SW_s1_address,                                                       //                                                         SW_s1.address
		input  wire [31:0] SW_s1_readdata,                                                      //                                                              .readdata
		output wire [1:0]  thermocouples_sel_s1_address,                                        //                                          thermocouples_sel_s1.address
		output wire        thermocouples_sel_s1_write,                                          //                                                              .write
		input  wire [31:0] thermocouples_sel_s1_readdata,                                       //                                                              .readdata
		output wire [31:0] thermocouples_sel_s1_writedata,                                      //                                                              .writedata
		output wire        thermocouples_sel_s1_chipselect,                                     //                                                              .chipselect
		output wire [0:0]  VGA_subsystem_char_control_slave_address,                            //                              VGA_subsystem_char_control_slave.address
		output wire        VGA_subsystem_char_control_slave_write,                              //                                                              .write
		output wire        VGA_subsystem_char_control_slave_read,                               //                                                              .read
		input  wire [31:0] VGA_subsystem_char_control_slave_readdata,                           //                                                              .readdata
		output wire [31:0] VGA_subsystem_char_control_slave_writedata,                          //                                                              .writedata
		output wire [3:0]  VGA_subsystem_char_control_slave_byteenable,                         //                                                              .byteenable
		output wire        VGA_subsystem_char_control_slave_chipselect                          //                                                              .chipselect
	);

	wire   [31:0] vga_subsystem_char_control_slave_agent_m0_readdata;                   // VGA_subsystem_char_control_slave_translator:uav_readdata -> VGA_subsystem_char_control_slave_agent:m0_readdata
	wire          vga_subsystem_char_control_slave_agent_m0_waitrequest;                // VGA_subsystem_char_control_slave_translator:uav_waitrequest -> VGA_subsystem_char_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_control_slave_agent_m0_debugaccess;                // VGA_subsystem_char_control_slave_agent:m0_debugaccess -> VGA_subsystem_char_control_slave_translator:uav_debugaccess
	wire   [20:0] vga_subsystem_char_control_slave_agent_m0_address;                    // VGA_subsystem_char_control_slave_agent:m0_address -> VGA_subsystem_char_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_char_control_slave_agent_m0_byteenable;                 // VGA_subsystem_char_control_slave_agent:m0_byteenable -> VGA_subsystem_char_control_slave_translator:uav_byteenable
	wire          vga_subsystem_char_control_slave_agent_m0_read;                       // VGA_subsystem_char_control_slave_agent:m0_read -> VGA_subsystem_char_control_slave_translator:uav_read
	wire          vga_subsystem_char_control_slave_agent_m0_readdatavalid;              // VGA_subsystem_char_control_slave_translator:uav_readdatavalid -> VGA_subsystem_char_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_control_slave_agent_m0_lock;                       // VGA_subsystem_char_control_slave_agent:m0_lock -> VGA_subsystem_char_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_char_control_slave_agent_m0_writedata;                  // VGA_subsystem_char_control_slave_agent:m0_writedata -> VGA_subsystem_char_control_slave_translator:uav_writedata
	wire          vga_subsystem_char_control_slave_agent_m0_write;                      // VGA_subsystem_char_control_slave_agent:m0_write -> VGA_subsystem_char_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_char_control_slave_agent_m0_burstcount;                 // VGA_subsystem_char_control_slave_agent:m0_burstcount -> VGA_subsystem_char_control_slave_translator:uav_burstcount
	wire          vga_subsystem_char_control_slave_agent_rf_source_valid;               // VGA_subsystem_char_control_slave_agent:rf_source_valid -> VGA_subsystem_char_control_slave_agent_rsp_fifo:in_valid
	wire  [120:0] vga_subsystem_char_control_slave_agent_rf_source_data;                // VGA_subsystem_char_control_slave_agent:rf_source_data -> VGA_subsystem_char_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_control_slave_agent_rf_source_ready;               // VGA_subsystem_char_control_slave_agent_rsp_fifo:in_ready -> VGA_subsystem_char_control_slave_agent:rf_source_ready
	wire          vga_subsystem_char_control_slave_agent_rf_source_startofpacket;       // VGA_subsystem_char_control_slave_agent:rf_source_startofpacket -> VGA_subsystem_char_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_control_slave_agent_rf_source_endofpacket;         // VGA_subsystem_char_control_slave_agent:rf_source_endofpacket -> VGA_subsystem_char_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_control_slave_agent_rsp_fifo_out_valid;            // VGA_subsystem_char_control_slave_agent_rsp_fifo:out_valid -> VGA_subsystem_char_control_slave_agent:rf_sink_valid
	wire  [120:0] vga_subsystem_char_control_slave_agent_rsp_fifo_out_data;             // VGA_subsystem_char_control_slave_agent_rsp_fifo:out_data -> VGA_subsystem_char_control_slave_agent:rf_sink_data
	wire          vga_subsystem_char_control_slave_agent_rsp_fifo_out_ready;            // VGA_subsystem_char_control_slave_agent:rf_sink_ready -> VGA_subsystem_char_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_control_slave_agent_rsp_fifo_out_startofpacket;    // VGA_subsystem_char_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_subsystem_char_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_control_slave_agent_rsp_fifo_out_endofpacket;      // VGA_subsystem_char_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_subsystem_char_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_control_slave_agent_rdata_fifo_src_valid;          // VGA_subsystem_char_control_slave_agent:rdata_fifo_src_valid -> VGA_subsystem_char_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_control_slave_agent_rdata_fifo_src_data;           // VGA_subsystem_char_control_slave_agent:rdata_fifo_src_data -> VGA_subsystem_char_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_control_slave_agent_rdata_fifo_src_ready;          // VGA_subsystem_char_control_slave_agent_rdata_fifo:in_ready -> VGA_subsystem_char_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_hps_to_fpga_in_csr_agent_m0_readdata;                            // fifo_HPS_to_FPGA_in_csr_translator:uav_readdata -> fifo_HPS_to_FPGA_in_csr_agent:m0_readdata
	wire          fifo_hps_to_fpga_in_csr_agent_m0_waitrequest;                         // fifo_HPS_to_FPGA_in_csr_translator:uav_waitrequest -> fifo_HPS_to_FPGA_in_csr_agent:m0_waitrequest
	wire          fifo_hps_to_fpga_in_csr_agent_m0_debugaccess;                         // fifo_HPS_to_FPGA_in_csr_agent:m0_debugaccess -> fifo_HPS_to_FPGA_in_csr_translator:uav_debugaccess
	wire   [20:0] fifo_hps_to_fpga_in_csr_agent_m0_address;                             // fifo_HPS_to_FPGA_in_csr_agent:m0_address -> fifo_HPS_to_FPGA_in_csr_translator:uav_address
	wire    [3:0] fifo_hps_to_fpga_in_csr_agent_m0_byteenable;                          // fifo_HPS_to_FPGA_in_csr_agent:m0_byteenable -> fifo_HPS_to_FPGA_in_csr_translator:uav_byteenable
	wire          fifo_hps_to_fpga_in_csr_agent_m0_read;                                // fifo_HPS_to_FPGA_in_csr_agent:m0_read -> fifo_HPS_to_FPGA_in_csr_translator:uav_read
	wire          fifo_hps_to_fpga_in_csr_agent_m0_readdatavalid;                       // fifo_HPS_to_FPGA_in_csr_translator:uav_readdatavalid -> fifo_HPS_to_FPGA_in_csr_agent:m0_readdatavalid
	wire          fifo_hps_to_fpga_in_csr_agent_m0_lock;                                // fifo_HPS_to_FPGA_in_csr_agent:m0_lock -> fifo_HPS_to_FPGA_in_csr_translator:uav_lock
	wire   [31:0] fifo_hps_to_fpga_in_csr_agent_m0_writedata;                           // fifo_HPS_to_FPGA_in_csr_agent:m0_writedata -> fifo_HPS_to_FPGA_in_csr_translator:uav_writedata
	wire          fifo_hps_to_fpga_in_csr_agent_m0_write;                               // fifo_HPS_to_FPGA_in_csr_agent:m0_write -> fifo_HPS_to_FPGA_in_csr_translator:uav_write
	wire    [2:0] fifo_hps_to_fpga_in_csr_agent_m0_burstcount;                          // fifo_HPS_to_FPGA_in_csr_agent:m0_burstcount -> fifo_HPS_to_FPGA_in_csr_translator:uav_burstcount
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_valid;                        // fifo_HPS_to_FPGA_in_csr_agent:rf_source_valid -> fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:in_valid
	wire  [120:0] fifo_hps_to_fpga_in_csr_agent_rf_source_data;                         // fifo_HPS_to_FPGA_in_csr_agent:rf_source_data -> fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:in_data
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_ready;                        // fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:in_ready -> fifo_HPS_to_FPGA_in_csr_agent:rf_source_ready
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_startofpacket;                // fifo_HPS_to_FPGA_in_csr_agent:rf_source_startofpacket -> fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rf_source_endofpacket;                  // fifo_HPS_to_FPGA_in_csr_agent:rf_source_endofpacket -> fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_valid;                     // fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:out_valid -> fifo_HPS_to_FPGA_in_csr_agent:rf_sink_valid
	wire  [120:0] fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_data;                      // fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:out_data -> fifo_HPS_to_FPGA_in_csr_agent:rf_sink_data
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_ready;                     // fifo_HPS_to_FPGA_in_csr_agent:rf_sink_ready -> fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_startofpacket;             // fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_HPS_to_FPGA_in_csr_agent:rf_sink_startofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_endofpacket;               // fifo_HPS_to_FPGA_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_HPS_to_FPGA_in_csr_agent:rf_sink_endofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_valid;                   // fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_src_valid -> fifo_HPS_to_FPGA_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_data;                    // fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_src_data -> fifo_HPS_to_FPGA_in_csr_agent_rdata_fifo:in_data
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_ready;                   // fifo_HPS_to_FPGA_in_csr_agent_rdata_fifo:in_ready -> fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_fpga_to_hps_out_csr_agent_m0_readdata;                           // fifo_FPGA_to_HPS_out_csr_translator:uav_readdata -> fifo_FPGA_to_HPS_out_csr_agent:m0_readdata
	wire          fifo_fpga_to_hps_out_csr_agent_m0_waitrequest;                        // fifo_FPGA_to_HPS_out_csr_translator:uav_waitrequest -> fifo_FPGA_to_HPS_out_csr_agent:m0_waitrequest
	wire          fifo_fpga_to_hps_out_csr_agent_m0_debugaccess;                        // fifo_FPGA_to_HPS_out_csr_agent:m0_debugaccess -> fifo_FPGA_to_HPS_out_csr_translator:uav_debugaccess
	wire   [20:0] fifo_fpga_to_hps_out_csr_agent_m0_address;                            // fifo_FPGA_to_HPS_out_csr_agent:m0_address -> fifo_FPGA_to_HPS_out_csr_translator:uav_address
	wire    [3:0] fifo_fpga_to_hps_out_csr_agent_m0_byteenable;                         // fifo_FPGA_to_HPS_out_csr_agent:m0_byteenable -> fifo_FPGA_to_HPS_out_csr_translator:uav_byteenable
	wire          fifo_fpga_to_hps_out_csr_agent_m0_read;                               // fifo_FPGA_to_HPS_out_csr_agent:m0_read -> fifo_FPGA_to_HPS_out_csr_translator:uav_read
	wire          fifo_fpga_to_hps_out_csr_agent_m0_readdatavalid;                      // fifo_FPGA_to_HPS_out_csr_translator:uav_readdatavalid -> fifo_FPGA_to_HPS_out_csr_agent:m0_readdatavalid
	wire          fifo_fpga_to_hps_out_csr_agent_m0_lock;                               // fifo_FPGA_to_HPS_out_csr_agent:m0_lock -> fifo_FPGA_to_HPS_out_csr_translator:uav_lock
	wire   [31:0] fifo_fpga_to_hps_out_csr_agent_m0_writedata;                          // fifo_FPGA_to_HPS_out_csr_agent:m0_writedata -> fifo_FPGA_to_HPS_out_csr_translator:uav_writedata
	wire          fifo_fpga_to_hps_out_csr_agent_m0_write;                              // fifo_FPGA_to_HPS_out_csr_agent:m0_write -> fifo_FPGA_to_HPS_out_csr_translator:uav_write
	wire    [2:0] fifo_fpga_to_hps_out_csr_agent_m0_burstcount;                         // fifo_FPGA_to_HPS_out_csr_agent:m0_burstcount -> fifo_FPGA_to_HPS_out_csr_translator:uav_burstcount
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_valid;                       // fifo_FPGA_to_HPS_out_csr_agent:rf_source_valid -> fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:in_valid
	wire  [120:0] fifo_fpga_to_hps_out_csr_agent_rf_source_data;                        // fifo_FPGA_to_HPS_out_csr_agent:rf_source_data -> fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:in_data
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_ready;                       // fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:in_ready -> fifo_FPGA_to_HPS_out_csr_agent:rf_source_ready
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_startofpacket;               // fifo_FPGA_to_HPS_out_csr_agent:rf_source_startofpacket -> fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rf_source_endofpacket;                 // fifo_FPGA_to_HPS_out_csr_agent:rf_source_endofpacket -> fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_valid;                    // fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:out_valid -> fifo_FPGA_to_HPS_out_csr_agent:rf_sink_valid
	wire  [120:0] fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_data;                     // fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:out_data -> fifo_FPGA_to_HPS_out_csr_agent:rf_sink_data
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_ready;                    // fifo_FPGA_to_HPS_out_csr_agent:rf_sink_ready -> fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:out_ready
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_startofpacket;            // fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:out_startofpacket -> fifo_FPGA_to_HPS_out_csr_agent:rf_sink_startofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_endofpacket;              // fifo_FPGA_to_HPS_out_csr_agent_rsp_fifo:out_endofpacket -> fifo_FPGA_to_HPS_out_csr_agent:rf_sink_endofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_valid;                  // fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_src_valid -> fifo_FPGA_to_HPS_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_data;                   // fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_src_data -> fifo_FPGA_to_HPS_out_csr_agent_rdata_fifo:in_data
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_ready;                  // fifo_FPGA_to_HPS_out_csr_agent_rdata_fifo:in_ready -> fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] sw_s1_agent_m0_readdata;                                              // SW_s1_translator:uav_readdata -> SW_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                           // SW_s1_translator:uav_waitrequest -> SW_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                           // SW_s1_agent:m0_debugaccess -> SW_s1_translator:uav_debugaccess
	wire   [20:0] sw_s1_agent_m0_address;                                               // SW_s1_agent:m0_address -> SW_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                            // SW_s1_agent:m0_byteenable -> SW_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                                  // SW_s1_agent:m0_read -> SW_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                         // SW_s1_translator:uav_readdatavalid -> SW_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                                  // SW_s1_agent:m0_lock -> SW_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                             // SW_s1_agent:m0_writedata -> SW_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                                 // SW_s1_agent:m0_write -> SW_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                            // SW_s1_agent:m0_burstcount -> SW_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                          // SW_s1_agent:rf_source_valid -> SW_s1_agent_rsp_fifo:in_valid
	wire  [120:0] sw_s1_agent_rf_source_data;                                           // SW_s1_agent:rf_source_data -> SW_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                          // SW_s1_agent_rsp_fifo:in_ready -> SW_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                                  // SW_s1_agent:rf_source_startofpacket -> SW_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                    // SW_s1_agent:rf_source_endofpacket -> SW_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                       // SW_s1_agent_rsp_fifo:out_valid -> SW_s1_agent:rf_sink_valid
	wire  [120:0] sw_s1_agent_rsp_fifo_out_data;                                        // SW_s1_agent_rsp_fifo:out_data -> SW_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                       // SW_s1_agent:rf_sink_ready -> SW_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                               // SW_s1_agent_rsp_fifo:out_startofpacket -> SW_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                                 // SW_s1_agent_rsp_fifo:out_endofpacket -> SW_s1_agent:rf_sink_endofpacket
	wire          sw_s1_agent_rdata_fifo_src_valid;                                     // SW_s1_agent:rdata_fifo_src_valid -> SW_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                      // SW_s1_agent:rdata_fifo_src_data -> SW_s1_agent_rdata_fifo:in_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                     // SW_s1_agent_rdata_fifo:in_ready -> SW_s1_agent:rdata_fifo_src_ready
	wire   [31:0] number32_s1_agent_m0_readdata;                                        // Number32_s1_translator:uav_readdata -> Number32_s1_agent:m0_readdata
	wire          number32_s1_agent_m0_waitrequest;                                     // Number32_s1_translator:uav_waitrequest -> Number32_s1_agent:m0_waitrequest
	wire          number32_s1_agent_m0_debugaccess;                                     // Number32_s1_agent:m0_debugaccess -> Number32_s1_translator:uav_debugaccess
	wire   [20:0] number32_s1_agent_m0_address;                                         // Number32_s1_agent:m0_address -> Number32_s1_translator:uav_address
	wire    [3:0] number32_s1_agent_m0_byteenable;                                      // Number32_s1_agent:m0_byteenable -> Number32_s1_translator:uav_byteenable
	wire          number32_s1_agent_m0_read;                                            // Number32_s1_agent:m0_read -> Number32_s1_translator:uav_read
	wire          number32_s1_agent_m0_readdatavalid;                                   // Number32_s1_translator:uav_readdatavalid -> Number32_s1_agent:m0_readdatavalid
	wire          number32_s1_agent_m0_lock;                                            // Number32_s1_agent:m0_lock -> Number32_s1_translator:uav_lock
	wire   [31:0] number32_s1_agent_m0_writedata;                                       // Number32_s1_agent:m0_writedata -> Number32_s1_translator:uav_writedata
	wire          number32_s1_agent_m0_write;                                           // Number32_s1_agent:m0_write -> Number32_s1_translator:uav_write
	wire    [2:0] number32_s1_agent_m0_burstcount;                                      // Number32_s1_agent:m0_burstcount -> Number32_s1_translator:uav_burstcount
	wire          number32_s1_agent_rf_source_valid;                                    // Number32_s1_agent:rf_source_valid -> Number32_s1_agent_rsp_fifo:in_valid
	wire  [120:0] number32_s1_agent_rf_source_data;                                     // Number32_s1_agent:rf_source_data -> Number32_s1_agent_rsp_fifo:in_data
	wire          number32_s1_agent_rf_source_ready;                                    // Number32_s1_agent_rsp_fifo:in_ready -> Number32_s1_agent:rf_source_ready
	wire          number32_s1_agent_rf_source_startofpacket;                            // Number32_s1_agent:rf_source_startofpacket -> Number32_s1_agent_rsp_fifo:in_startofpacket
	wire          number32_s1_agent_rf_source_endofpacket;                              // Number32_s1_agent:rf_source_endofpacket -> Number32_s1_agent_rsp_fifo:in_endofpacket
	wire          number32_s1_agent_rsp_fifo_out_valid;                                 // Number32_s1_agent_rsp_fifo:out_valid -> Number32_s1_agent:rf_sink_valid
	wire  [120:0] number32_s1_agent_rsp_fifo_out_data;                                  // Number32_s1_agent_rsp_fifo:out_data -> Number32_s1_agent:rf_sink_data
	wire          number32_s1_agent_rsp_fifo_out_ready;                                 // Number32_s1_agent:rf_sink_ready -> Number32_s1_agent_rsp_fifo:out_ready
	wire          number32_s1_agent_rsp_fifo_out_startofpacket;                         // Number32_s1_agent_rsp_fifo:out_startofpacket -> Number32_s1_agent:rf_sink_startofpacket
	wire          number32_s1_agent_rsp_fifo_out_endofpacket;                           // Number32_s1_agent_rsp_fifo:out_endofpacket -> Number32_s1_agent:rf_sink_endofpacket
	wire          number32_s1_agent_rdata_fifo_src_valid;                               // Number32_s1_agent:rdata_fifo_src_valid -> Number32_s1_agent_rdata_fifo:in_valid
	wire   [33:0] number32_s1_agent_rdata_fifo_src_data;                                // Number32_s1_agent:rdata_fifo_src_data -> Number32_s1_agent_rdata_fifo:in_data
	wire          number32_s1_agent_rdata_fifo_src_ready;                               // Number32_s1_agent_rdata_fifo:in_ready -> Number32_s1_agent:rdata_fifo_src_ready
	wire   [31:0] o_temperature_s1_agent_m0_readdata;                                   // O_temperature_s1_translator:uav_readdata -> O_temperature_s1_agent:m0_readdata
	wire          o_temperature_s1_agent_m0_waitrequest;                                // O_temperature_s1_translator:uav_waitrequest -> O_temperature_s1_agent:m0_waitrequest
	wire          o_temperature_s1_agent_m0_debugaccess;                                // O_temperature_s1_agent:m0_debugaccess -> O_temperature_s1_translator:uav_debugaccess
	wire   [20:0] o_temperature_s1_agent_m0_address;                                    // O_temperature_s1_agent:m0_address -> O_temperature_s1_translator:uav_address
	wire    [3:0] o_temperature_s1_agent_m0_byteenable;                                 // O_temperature_s1_agent:m0_byteenable -> O_temperature_s1_translator:uav_byteenable
	wire          o_temperature_s1_agent_m0_read;                                       // O_temperature_s1_agent:m0_read -> O_temperature_s1_translator:uav_read
	wire          o_temperature_s1_agent_m0_readdatavalid;                              // O_temperature_s1_translator:uav_readdatavalid -> O_temperature_s1_agent:m0_readdatavalid
	wire          o_temperature_s1_agent_m0_lock;                                       // O_temperature_s1_agent:m0_lock -> O_temperature_s1_translator:uav_lock
	wire   [31:0] o_temperature_s1_agent_m0_writedata;                                  // O_temperature_s1_agent:m0_writedata -> O_temperature_s1_translator:uav_writedata
	wire          o_temperature_s1_agent_m0_write;                                      // O_temperature_s1_agent:m0_write -> O_temperature_s1_translator:uav_write
	wire    [2:0] o_temperature_s1_agent_m0_burstcount;                                 // O_temperature_s1_agent:m0_burstcount -> O_temperature_s1_translator:uav_burstcount
	wire          o_temperature_s1_agent_rf_source_valid;                               // O_temperature_s1_agent:rf_source_valid -> O_temperature_s1_agent_rsp_fifo:in_valid
	wire  [120:0] o_temperature_s1_agent_rf_source_data;                                // O_temperature_s1_agent:rf_source_data -> O_temperature_s1_agent_rsp_fifo:in_data
	wire          o_temperature_s1_agent_rf_source_ready;                               // O_temperature_s1_agent_rsp_fifo:in_ready -> O_temperature_s1_agent:rf_source_ready
	wire          o_temperature_s1_agent_rf_source_startofpacket;                       // O_temperature_s1_agent:rf_source_startofpacket -> O_temperature_s1_agent_rsp_fifo:in_startofpacket
	wire          o_temperature_s1_agent_rf_source_endofpacket;                         // O_temperature_s1_agent:rf_source_endofpacket -> O_temperature_s1_agent_rsp_fifo:in_endofpacket
	wire          o_temperature_s1_agent_rsp_fifo_out_valid;                            // O_temperature_s1_agent_rsp_fifo:out_valid -> O_temperature_s1_agent:rf_sink_valid
	wire  [120:0] o_temperature_s1_agent_rsp_fifo_out_data;                             // O_temperature_s1_agent_rsp_fifo:out_data -> O_temperature_s1_agent:rf_sink_data
	wire          o_temperature_s1_agent_rsp_fifo_out_ready;                            // O_temperature_s1_agent:rf_sink_ready -> O_temperature_s1_agent_rsp_fifo:out_ready
	wire          o_temperature_s1_agent_rsp_fifo_out_startofpacket;                    // O_temperature_s1_agent_rsp_fifo:out_startofpacket -> O_temperature_s1_agent:rf_sink_startofpacket
	wire          o_temperature_s1_agent_rsp_fifo_out_endofpacket;                      // O_temperature_s1_agent_rsp_fifo:out_endofpacket -> O_temperature_s1_agent:rf_sink_endofpacket
	wire          o_temperature_s1_agent_rdata_fifo_src_valid;                          // O_temperature_s1_agent:rdata_fifo_src_valid -> O_temperature_s1_agent_rdata_fifo:in_valid
	wire   [33:0] o_temperature_s1_agent_rdata_fifo_src_data;                           // O_temperature_s1_agent:rdata_fifo_src_data -> O_temperature_s1_agent_rdata_fifo:in_data
	wire          o_temperature_s1_agent_rdata_fifo_src_ready;                          // O_temperature_s1_agent_rdata_fifo:in_ready -> O_temperature_s1_agent:rdata_fifo_src_ready
	wire   [31:0] o_pw_forward_s1_agent_m0_readdata;                                    // O_pw_forward_s1_translator:uav_readdata -> O_pw_forward_s1_agent:m0_readdata
	wire          o_pw_forward_s1_agent_m0_waitrequest;                                 // O_pw_forward_s1_translator:uav_waitrequest -> O_pw_forward_s1_agent:m0_waitrequest
	wire          o_pw_forward_s1_agent_m0_debugaccess;                                 // O_pw_forward_s1_agent:m0_debugaccess -> O_pw_forward_s1_translator:uav_debugaccess
	wire   [20:0] o_pw_forward_s1_agent_m0_address;                                     // O_pw_forward_s1_agent:m0_address -> O_pw_forward_s1_translator:uav_address
	wire    [3:0] o_pw_forward_s1_agent_m0_byteenable;                                  // O_pw_forward_s1_agent:m0_byteenable -> O_pw_forward_s1_translator:uav_byteenable
	wire          o_pw_forward_s1_agent_m0_read;                                        // O_pw_forward_s1_agent:m0_read -> O_pw_forward_s1_translator:uav_read
	wire          o_pw_forward_s1_agent_m0_readdatavalid;                               // O_pw_forward_s1_translator:uav_readdatavalid -> O_pw_forward_s1_agent:m0_readdatavalid
	wire          o_pw_forward_s1_agent_m0_lock;                                        // O_pw_forward_s1_agent:m0_lock -> O_pw_forward_s1_translator:uav_lock
	wire   [31:0] o_pw_forward_s1_agent_m0_writedata;                                   // O_pw_forward_s1_agent:m0_writedata -> O_pw_forward_s1_translator:uav_writedata
	wire          o_pw_forward_s1_agent_m0_write;                                       // O_pw_forward_s1_agent:m0_write -> O_pw_forward_s1_translator:uav_write
	wire    [2:0] o_pw_forward_s1_agent_m0_burstcount;                                  // O_pw_forward_s1_agent:m0_burstcount -> O_pw_forward_s1_translator:uav_burstcount
	wire          o_pw_forward_s1_agent_rf_source_valid;                                // O_pw_forward_s1_agent:rf_source_valid -> O_pw_forward_s1_agent_rsp_fifo:in_valid
	wire  [120:0] o_pw_forward_s1_agent_rf_source_data;                                 // O_pw_forward_s1_agent:rf_source_data -> O_pw_forward_s1_agent_rsp_fifo:in_data
	wire          o_pw_forward_s1_agent_rf_source_ready;                                // O_pw_forward_s1_agent_rsp_fifo:in_ready -> O_pw_forward_s1_agent:rf_source_ready
	wire          o_pw_forward_s1_agent_rf_source_startofpacket;                        // O_pw_forward_s1_agent:rf_source_startofpacket -> O_pw_forward_s1_agent_rsp_fifo:in_startofpacket
	wire          o_pw_forward_s1_agent_rf_source_endofpacket;                          // O_pw_forward_s1_agent:rf_source_endofpacket -> O_pw_forward_s1_agent_rsp_fifo:in_endofpacket
	wire          o_pw_forward_s1_agent_rsp_fifo_out_valid;                             // O_pw_forward_s1_agent_rsp_fifo:out_valid -> O_pw_forward_s1_agent:rf_sink_valid
	wire  [120:0] o_pw_forward_s1_agent_rsp_fifo_out_data;                              // O_pw_forward_s1_agent_rsp_fifo:out_data -> O_pw_forward_s1_agent:rf_sink_data
	wire          o_pw_forward_s1_agent_rsp_fifo_out_ready;                             // O_pw_forward_s1_agent:rf_sink_ready -> O_pw_forward_s1_agent_rsp_fifo:out_ready
	wire          o_pw_forward_s1_agent_rsp_fifo_out_startofpacket;                     // O_pw_forward_s1_agent_rsp_fifo:out_startofpacket -> O_pw_forward_s1_agent:rf_sink_startofpacket
	wire          o_pw_forward_s1_agent_rsp_fifo_out_endofpacket;                       // O_pw_forward_s1_agent_rsp_fifo:out_endofpacket -> O_pw_forward_s1_agent:rf_sink_endofpacket
	wire          o_pw_forward_s1_agent_rdata_fifo_src_valid;                           // O_pw_forward_s1_agent:rdata_fifo_src_valid -> O_pw_forward_s1_agent_rdata_fifo:in_valid
	wire   [33:0] o_pw_forward_s1_agent_rdata_fifo_src_data;                            // O_pw_forward_s1_agent:rdata_fifo_src_data -> O_pw_forward_s1_agent_rdata_fifo:in_data
	wire          o_pw_forward_s1_agent_rdata_fifo_src_ready;                           // O_pw_forward_s1_agent_rdata_fifo:in_ready -> O_pw_forward_s1_agent:rdata_fifo_src_ready
	wire   [31:0] o_pw_reversed_s1_agent_m0_readdata;                                   // O_pw_reversed_s1_translator:uav_readdata -> O_pw_reversed_s1_agent:m0_readdata
	wire          o_pw_reversed_s1_agent_m0_waitrequest;                                // O_pw_reversed_s1_translator:uav_waitrequest -> O_pw_reversed_s1_agent:m0_waitrequest
	wire          o_pw_reversed_s1_agent_m0_debugaccess;                                // O_pw_reversed_s1_agent:m0_debugaccess -> O_pw_reversed_s1_translator:uav_debugaccess
	wire   [20:0] o_pw_reversed_s1_agent_m0_address;                                    // O_pw_reversed_s1_agent:m0_address -> O_pw_reversed_s1_translator:uav_address
	wire    [3:0] o_pw_reversed_s1_agent_m0_byteenable;                                 // O_pw_reversed_s1_agent:m0_byteenable -> O_pw_reversed_s1_translator:uav_byteenable
	wire          o_pw_reversed_s1_agent_m0_read;                                       // O_pw_reversed_s1_agent:m0_read -> O_pw_reversed_s1_translator:uav_read
	wire          o_pw_reversed_s1_agent_m0_readdatavalid;                              // O_pw_reversed_s1_translator:uav_readdatavalid -> O_pw_reversed_s1_agent:m0_readdatavalid
	wire          o_pw_reversed_s1_agent_m0_lock;                                       // O_pw_reversed_s1_agent:m0_lock -> O_pw_reversed_s1_translator:uav_lock
	wire   [31:0] o_pw_reversed_s1_agent_m0_writedata;                                  // O_pw_reversed_s1_agent:m0_writedata -> O_pw_reversed_s1_translator:uav_writedata
	wire          o_pw_reversed_s1_agent_m0_write;                                      // O_pw_reversed_s1_agent:m0_write -> O_pw_reversed_s1_translator:uav_write
	wire    [2:0] o_pw_reversed_s1_agent_m0_burstcount;                                 // O_pw_reversed_s1_agent:m0_burstcount -> O_pw_reversed_s1_translator:uav_burstcount
	wire          o_pw_reversed_s1_agent_rf_source_valid;                               // O_pw_reversed_s1_agent:rf_source_valid -> O_pw_reversed_s1_agent_rsp_fifo:in_valid
	wire  [120:0] o_pw_reversed_s1_agent_rf_source_data;                                // O_pw_reversed_s1_agent:rf_source_data -> O_pw_reversed_s1_agent_rsp_fifo:in_data
	wire          o_pw_reversed_s1_agent_rf_source_ready;                               // O_pw_reversed_s1_agent_rsp_fifo:in_ready -> O_pw_reversed_s1_agent:rf_source_ready
	wire          o_pw_reversed_s1_agent_rf_source_startofpacket;                       // O_pw_reversed_s1_agent:rf_source_startofpacket -> O_pw_reversed_s1_agent_rsp_fifo:in_startofpacket
	wire          o_pw_reversed_s1_agent_rf_source_endofpacket;                         // O_pw_reversed_s1_agent:rf_source_endofpacket -> O_pw_reversed_s1_agent_rsp_fifo:in_endofpacket
	wire          o_pw_reversed_s1_agent_rsp_fifo_out_valid;                            // O_pw_reversed_s1_agent_rsp_fifo:out_valid -> O_pw_reversed_s1_agent:rf_sink_valid
	wire  [120:0] o_pw_reversed_s1_agent_rsp_fifo_out_data;                             // O_pw_reversed_s1_agent_rsp_fifo:out_data -> O_pw_reversed_s1_agent:rf_sink_data
	wire          o_pw_reversed_s1_agent_rsp_fifo_out_ready;                            // O_pw_reversed_s1_agent:rf_sink_ready -> O_pw_reversed_s1_agent_rsp_fifo:out_ready
	wire          o_pw_reversed_s1_agent_rsp_fifo_out_startofpacket;                    // O_pw_reversed_s1_agent_rsp_fifo:out_startofpacket -> O_pw_reversed_s1_agent:rf_sink_startofpacket
	wire          o_pw_reversed_s1_agent_rsp_fifo_out_endofpacket;                      // O_pw_reversed_s1_agent_rsp_fifo:out_endofpacket -> O_pw_reversed_s1_agent:rf_sink_endofpacket
	wire          o_pw_reversed_s1_agent_rdata_fifo_src_valid;                          // O_pw_reversed_s1_agent:rdata_fifo_src_valid -> O_pw_reversed_s1_agent_rdata_fifo:in_valid
	wire   [33:0] o_pw_reversed_s1_agent_rdata_fifo_src_data;                           // O_pw_reversed_s1_agent:rdata_fifo_src_data -> O_pw_reversed_s1_agent_rdata_fifo:in_data
	wire          o_pw_reversed_s1_agent_rdata_fifo_src_ready;                          // O_pw_reversed_s1_agent_rdata_fifo:in_ready -> O_pw_reversed_s1_agent:rdata_fifo_src_ready
	wire   [31:0] o_temperature2_s1_agent_m0_readdata;                                  // O_temperature2_s1_translator:uav_readdata -> O_temperature2_s1_agent:m0_readdata
	wire          o_temperature2_s1_agent_m0_waitrequest;                               // O_temperature2_s1_translator:uav_waitrequest -> O_temperature2_s1_agent:m0_waitrequest
	wire          o_temperature2_s1_agent_m0_debugaccess;                               // O_temperature2_s1_agent:m0_debugaccess -> O_temperature2_s1_translator:uav_debugaccess
	wire   [20:0] o_temperature2_s1_agent_m0_address;                                   // O_temperature2_s1_agent:m0_address -> O_temperature2_s1_translator:uav_address
	wire    [3:0] o_temperature2_s1_agent_m0_byteenable;                                // O_temperature2_s1_agent:m0_byteenable -> O_temperature2_s1_translator:uav_byteenable
	wire          o_temperature2_s1_agent_m0_read;                                      // O_temperature2_s1_agent:m0_read -> O_temperature2_s1_translator:uav_read
	wire          o_temperature2_s1_agent_m0_readdatavalid;                             // O_temperature2_s1_translator:uav_readdatavalid -> O_temperature2_s1_agent:m0_readdatavalid
	wire          o_temperature2_s1_agent_m0_lock;                                      // O_temperature2_s1_agent:m0_lock -> O_temperature2_s1_translator:uav_lock
	wire   [31:0] o_temperature2_s1_agent_m0_writedata;                                 // O_temperature2_s1_agent:m0_writedata -> O_temperature2_s1_translator:uav_writedata
	wire          o_temperature2_s1_agent_m0_write;                                     // O_temperature2_s1_agent:m0_write -> O_temperature2_s1_translator:uav_write
	wire    [2:0] o_temperature2_s1_agent_m0_burstcount;                                // O_temperature2_s1_agent:m0_burstcount -> O_temperature2_s1_translator:uav_burstcount
	wire          o_temperature2_s1_agent_rf_source_valid;                              // O_temperature2_s1_agent:rf_source_valid -> O_temperature2_s1_agent_rsp_fifo:in_valid
	wire  [120:0] o_temperature2_s1_agent_rf_source_data;                               // O_temperature2_s1_agent:rf_source_data -> O_temperature2_s1_agent_rsp_fifo:in_data
	wire          o_temperature2_s1_agent_rf_source_ready;                              // O_temperature2_s1_agent_rsp_fifo:in_ready -> O_temperature2_s1_agent:rf_source_ready
	wire          o_temperature2_s1_agent_rf_source_startofpacket;                      // O_temperature2_s1_agent:rf_source_startofpacket -> O_temperature2_s1_agent_rsp_fifo:in_startofpacket
	wire          o_temperature2_s1_agent_rf_source_endofpacket;                        // O_temperature2_s1_agent:rf_source_endofpacket -> O_temperature2_s1_agent_rsp_fifo:in_endofpacket
	wire          o_temperature2_s1_agent_rsp_fifo_out_valid;                           // O_temperature2_s1_agent_rsp_fifo:out_valid -> O_temperature2_s1_agent:rf_sink_valid
	wire  [120:0] o_temperature2_s1_agent_rsp_fifo_out_data;                            // O_temperature2_s1_agent_rsp_fifo:out_data -> O_temperature2_s1_agent:rf_sink_data
	wire          o_temperature2_s1_agent_rsp_fifo_out_ready;                           // O_temperature2_s1_agent:rf_sink_ready -> O_temperature2_s1_agent_rsp_fifo:out_ready
	wire          o_temperature2_s1_agent_rsp_fifo_out_startofpacket;                   // O_temperature2_s1_agent_rsp_fifo:out_startofpacket -> O_temperature2_s1_agent:rf_sink_startofpacket
	wire          o_temperature2_s1_agent_rsp_fifo_out_endofpacket;                     // O_temperature2_s1_agent_rsp_fifo:out_endofpacket -> O_temperature2_s1_agent:rf_sink_endofpacket
	wire          o_temperature2_s1_agent_rdata_fifo_src_valid;                         // O_temperature2_s1_agent:rdata_fifo_src_valid -> O_temperature2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] o_temperature2_s1_agent_rdata_fifo_src_data;                          // O_temperature2_s1_agent:rdata_fifo_src_data -> O_temperature2_s1_agent_rdata_fifo:in_data
	wire          o_temperature2_s1_agent_rdata_fifo_src_ready;                         // O_temperature2_s1_agent_rdata_fifo:in_ready -> O_temperature2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] rf_on_off_s1_agent_m0_readdata;                                       // rf_on_off_s1_translator:uav_readdata -> rf_on_off_s1_agent:m0_readdata
	wire          rf_on_off_s1_agent_m0_waitrequest;                                    // rf_on_off_s1_translator:uav_waitrequest -> rf_on_off_s1_agent:m0_waitrequest
	wire          rf_on_off_s1_agent_m0_debugaccess;                                    // rf_on_off_s1_agent:m0_debugaccess -> rf_on_off_s1_translator:uav_debugaccess
	wire   [20:0] rf_on_off_s1_agent_m0_address;                                        // rf_on_off_s1_agent:m0_address -> rf_on_off_s1_translator:uav_address
	wire    [3:0] rf_on_off_s1_agent_m0_byteenable;                                     // rf_on_off_s1_agent:m0_byteenable -> rf_on_off_s1_translator:uav_byteenable
	wire          rf_on_off_s1_agent_m0_read;                                           // rf_on_off_s1_agent:m0_read -> rf_on_off_s1_translator:uav_read
	wire          rf_on_off_s1_agent_m0_readdatavalid;                                  // rf_on_off_s1_translator:uav_readdatavalid -> rf_on_off_s1_agent:m0_readdatavalid
	wire          rf_on_off_s1_agent_m0_lock;                                           // rf_on_off_s1_agent:m0_lock -> rf_on_off_s1_translator:uav_lock
	wire   [31:0] rf_on_off_s1_agent_m0_writedata;                                      // rf_on_off_s1_agent:m0_writedata -> rf_on_off_s1_translator:uav_writedata
	wire          rf_on_off_s1_agent_m0_write;                                          // rf_on_off_s1_agent:m0_write -> rf_on_off_s1_translator:uav_write
	wire    [2:0] rf_on_off_s1_agent_m0_burstcount;                                     // rf_on_off_s1_agent:m0_burstcount -> rf_on_off_s1_translator:uav_burstcount
	wire          rf_on_off_s1_agent_rf_source_valid;                                   // rf_on_off_s1_agent:rf_source_valid -> rf_on_off_s1_agent_rsp_fifo:in_valid
	wire  [120:0] rf_on_off_s1_agent_rf_source_data;                                    // rf_on_off_s1_agent:rf_source_data -> rf_on_off_s1_agent_rsp_fifo:in_data
	wire          rf_on_off_s1_agent_rf_source_ready;                                   // rf_on_off_s1_agent_rsp_fifo:in_ready -> rf_on_off_s1_agent:rf_source_ready
	wire          rf_on_off_s1_agent_rf_source_startofpacket;                           // rf_on_off_s1_agent:rf_source_startofpacket -> rf_on_off_s1_agent_rsp_fifo:in_startofpacket
	wire          rf_on_off_s1_agent_rf_source_endofpacket;                             // rf_on_off_s1_agent:rf_source_endofpacket -> rf_on_off_s1_agent_rsp_fifo:in_endofpacket
	wire          rf_on_off_s1_agent_rsp_fifo_out_valid;                                // rf_on_off_s1_agent_rsp_fifo:out_valid -> rf_on_off_s1_agent:rf_sink_valid
	wire  [120:0] rf_on_off_s1_agent_rsp_fifo_out_data;                                 // rf_on_off_s1_agent_rsp_fifo:out_data -> rf_on_off_s1_agent:rf_sink_data
	wire          rf_on_off_s1_agent_rsp_fifo_out_ready;                                // rf_on_off_s1_agent:rf_sink_ready -> rf_on_off_s1_agent_rsp_fifo:out_ready
	wire          rf_on_off_s1_agent_rsp_fifo_out_startofpacket;                        // rf_on_off_s1_agent_rsp_fifo:out_startofpacket -> rf_on_off_s1_agent:rf_sink_startofpacket
	wire          rf_on_off_s1_agent_rsp_fifo_out_endofpacket;                          // rf_on_off_s1_agent_rsp_fifo:out_endofpacket -> rf_on_off_s1_agent:rf_sink_endofpacket
	wire          rf_on_off_s1_agent_rdata_fifo_src_valid;                              // rf_on_off_s1_agent:rdata_fifo_src_valid -> rf_on_off_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rf_on_off_s1_agent_rdata_fifo_src_data;                               // rf_on_off_s1_agent:rdata_fifo_src_data -> rf_on_off_s1_agent_rdata_fifo:in_data
	wire          rf_on_off_s1_agent_rdata_fifo_src_ready;                              // rf_on_off_s1_agent_rdata_fifo:in_ready -> rf_on_off_s1_agent:rdata_fifo_src_ready
	wire   [31:0] command_from_hps_s1_agent_m0_readdata;                                // command_from_hps_s1_translator:uav_readdata -> command_from_hps_s1_agent:m0_readdata
	wire          command_from_hps_s1_agent_m0_waitrequest;                             // command_from_hps_s1_translator:uav_waitrequest -> command_from_hps_s1_agent:m0_waitrequest
	wire          command_from_hps_s1_agent_m0_debugaccess;                             // command_from_hps_s1_agent:m0_debugaccess -> command_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] command_from_hps_s1_agent_m0_address;                                 // command_from_hps_s1_agent:m0_address -> command_from_hps_s1_translator:uav_address
	wire    [3:0] command_from_hps_s1_agent_m0_byteenable;                              // command_from_hps_s1_agent:m0_byteenable -> command_from_hps_s1_translator:uav_byteenable
	wire          command_from_hps_s1_agent_m0_read;                                    // command_from_hps_s1_agent:m0_read -> command_from_hps_s1_translator:uav_read
	wire          command_from_hps_s1_agent_m0_readdatavalid;                           // command_from_hps_s1_translator:uav_readdatavalid -> command_from_hps_s1_agent:m0_readdatavalid
	wire          command_from_hps_s1_agent_m0_lock;                                    // command_from_hps_s1_agent:m0_lock -> command_from_hps_s1_translator:uav_lock
	wire   [31:0] command_from_hps_s1_agent_m0_writedata;                               // command_from_hps_s1_agent:m0_writedata -> command_from_hps_s1_translator:uav_writedata
	wire          command_from_hps_s1_agent_m0_write;                                   // command_from_hps_s1_agent:m0_write -> command_from_hps_s1_translator:uav_write
	wire    [2:0] command_from_hps_s1_agent_m0_burstcount;                              // command_from_hps_s1_agent:m0_burstcount -> command_from_hps_s1_translator:uav_burstcount
	wire          command_from_hps_s1_agent_rf_source_valid;                            // command_from_hps_s1_agent:rf_source_valid -> command_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] command_from_hps_s1_agent_rf_source_data;                             // command_from_hps_s1_agent:rf_source_data -> command_from_hps_s1_agent_rsp_fifo:in_data
	wire          command_from_hps_s1_agent_rf_source_ready;                            // command_from_hps_s1_agent_rsp_fifo:in_ready -> command_from_hps_s1_agent:rf_source_ready
	wire          command_from_hps_s1_agent_rf_source_startofpacket;                    // command_from_hps_s1_agent:rf_source_startofpacket -> command_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          command_from_hps_s1_agent_rf_source_endofpacket;                      // command_from_hps_s1_agent:rf_source_endofpacket -> command_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          command_from_hps_s1_agent_rsp_fifo_out_valid;                         // command_from_hps_s1_agent_rsp_fifo:out_valid -> command_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] command_from_hps_s1_agent_rsp_fifo_out_data;                          // command_from_hps_s1_agent_rsp_fifo:out_data -> command_from_hps_s1_agent:rf_sink_data
	wire          command_from_hps_s1_agent_rsp_fifo_out_ready;                         // command_from_hps_s1_agent:rf_sink_ready -> command_from_hps_s1_agent_rsp_fifo:out_ready
	wire          command_from_hps_s1_agent_rsp_fifo_out_startofpacket;                 // command_from_hps_s1_agent_rsp_fifo:out_startofpacket -> command_from_hps_s1_agent:rf_sink_startofpacket
	wire          command_from_hps_s1_agent_rsp_fifo_out_endofpacket;                   // command_from_hps_s1_agent_rsp_fifo:out_endofpacket -> command_from_hps_s1_agent:rf_sink_endofpacket
	wire          command_from_hps_s1_agent_rdata_fifo_src_valid;                       // command_from_hps_s1_agent:rdata_fifo_src_valid -> command_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] command_from_hps_s1_agent_rdata_fifo_src_data;                        // command_from_hps_s1_agent:rdata_fifo_src_data -> command_from_hps_s1_agent_rdata_fifo:in_data
	wire          command_from_hps_s1_agent_rdata_fifo_src_ready;                       // command_from_hps_s1_agent_rdata_fifo:in_ready -> command_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] sp_s1_agent_m0_readdata;                                              // SP_s1_translator:uav_readdata -> SP_s1_agent:m0_readdata
	wire          sp_s1_agent_m0_waitrequest;                                           // SP_s1_translator:uav_waitrequest -> SP_s1_agent:m0_waitrequest
	wire          sp_s1_agent_m0_debugaccess;                                           // SP_s1_agent:m0_debugaccess -> SP_s1_translator:uav_debugaccess
	wire   [20:0] sp_s1_agent_m0_address;                                               // SP_s1_agent:m0_address -> SP_s1_translator:uav_address
	wire    [3:0] sp_s1_agent_m0_byteenable;                                            // SP_s1_agent:m0_byteenable -> SP_s1_translator:uav_byteenable
	wire          sp_s1_agent_m0_read;                                                  // SP_s1_agent:m0_read -> SP_s1_translator:uav_read
	wire          sp_s1_agent_m0_readdatavalid;                                         // SP_s1_translator:uav_readdatavalid -> SP_s1_agent:m0_readdatavalid
	wire          sp_s1_agent_m0_lock;                                                  // SP_s1_agent:m0_lock -> SP_s1_translator:uav_lock
	wire   [31:0] sp_s1_agent_m0_writedata;                                             // SP_s1_agent:m0_writedata -> SP_s1_translator:uav_writedata
	wire          sp_s1_agent_m0_write;                                                 // SP_s1_agent:m0_write -> SP_s1_translator:uav_write
	wire    [2:0] sp_s1_agent_m0_burstcount;                                            // SP_s1_agent:m0_burstcount -> SP_s1_translator:uav_burstcount
	wire          sp_s1_agent_rf_source_valid;                                          // SP_s1_agent:rf_source_valid -> SP_s1_agent_rsp_fifo:in_valid
	wire  [120:0] sp_s1_agent_rf_source_data;                                           // SP_s1_agent:rf_source_data -> SP_s1_agent_rsp_fifo:in_data
	wire          sp_s1_agent_rf_source_ready;                                          // SP_s1_agent_rsp_fifo:in_ready -> SP_s1_agent:rf_source_ready
	wire          sp_s1_agent_rf_source_startofpacket;                                  // SP_s1_agent:rf_source_startofpacket -> SP_s1_agent_rsp_fifo:in_startofpacket
	wire          sp_s1_agent_rf_source_endofpacket;                                    // SP_s1_agent:rf_source_endofpacket -> SP_s1_agent_rsp_fifo:in_endofpacket
	wire          sp_s1_agent_rsp_fifo_out_valid;                                       // SP_s1_agent_rsp_fifo:out_valid -> SP_s1_agent:rf_sink_valid
	wire  [120:0] sp_s1_agent_rsp_fifo_out_data;                                        // SP_s1_agent_rsp_fifo:out_data -> SP_s1_agent:rf_sink_data
	wire          sp_s1_agent_rsp_fifo_out_ready;                                       // SP_s1_agent:rf_sink_ready -> SP_s1_agent_rsp_fifo:out_ready
	wire          sp_s1_agent_rsp_fifo_out_startofpacket;                               // SP_s1_agent_rsp_fifo:out_startofpacket -> SP_s1_agent:rf_sink_startofpacket
	wire          sp_s1_agent_rsp_fifo_out_endofpacket;                                 // SP_s1_agent_rsp_fifo:out_endofpacket -> SP_s1_agent:rf_sink_endofpacket
	wire          sp_s1_agent_rdata_fifo_src_valid;                                     // SP_s1_agent:rdata_fifo_src_valid -> SP_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sp_s1_agent_rdata_fifo_src_data;                                      // SP_s1_agent:rdata_fifo_src_data -> SP_s1_agent_rdata_fifo:in_data
	wire          sp_s1_agent_rdata_fifo_src_ready;                                     // SP_s1_agent_rdata_fifo:in_ready -> SP_s1_agent:rdata_fifo_src_ready
	wire   [31:0] thermocouples_sel_s1_agent_m0_readdata;                               // thermocouples_sel_s1_translator:uav_readdata -> thermocouples_sel_s1_agent:m0_readdata
	wire          thermocouples_sel_s1_agent_m0_waitrequest;                            // thermocouples_sel_s1_translator:uav_waitrequest -> thermocouples_sel_s1_agent:m0_waitrequest
	wire          thermocouples_sel_s1_agent_m0_debugaccess;                            // thermocouples_sel_s1_agent:m0_debugaccess -> thermocouples_sel_s1_translator:uav_debugaccess
	wire   [20:0] thermocouples_sel_s1_agent_m0_address;                                // thermocouples_sel_s1_agent:m0_address -> thermocouples_sel_s1_translator:uav_address
	wire    [3:0] thermocouples_sel_s1_agent_m0_byteenable;                             // thermocouples_sel_s1_agent:m0_byteenable -> thermocouples_sel_s1_translator:uav_byteenable
	wire          thermocouples_sel_s1_agent_m0_read;                                   // thermocouples_sel_s1_agent:m0_read -> thermocouples_sel_s1_translator:uav_read
	wire          thermocouples_sel_s1_agent_m0_readdatavalid;                          // thermocouples_sel_s1_translator:uav_readdatavalid -> thermocouples_sel_s1_agent:m0_readdatavalid
	wire          thermocouples_sel_s1_agent_m0_lock;                                   // thermocouples_sel_s1_agent:m0_lock -> thermocouples_sel_s1_translator:uav_lock
	wire   [31:0] thermocouples_sel_s1_agent_m0_writedata;                              // thermocouples_sel_s1_agent:m0_writedata -> thermocouples_sel_s1_translator:uav_writedata
	wire          thermocouples_sel_s1_agent_m0_write;                                  // thermocouples_sel_s1_agent:m0_write -> thermocouples_sel_s1_translator:uav_write
	wire    [2:0] thermocouples_sel_s1_agent_m0_burstcount;                             // thermocouples_sel_s1_agent:m0_burstcount -> thermocouples_sel_s1_translator:uav_burstcount
	wire          thermocouples_sel_s1_agent_rf_source_valid;                           // thermocouples_sel_s1_agent:rf_source_valid -> thermocouples_sel_s1_agent_rsp_fifo:in_valid
	wire  [120:0] thermocouples_sel_s1_agent_rf_source_data;                            // thermocouples_sel_s1_agent:rf_source_data -> thermocouples_sel_s1_agent_rsp_fifo:in_data
	wire          thermocouples_sel_s1_agent_rf_source_ready;                           // thermocouples_sel_s1_agent_rsp_fifo:in_ready -> thermocouples_sel_s1_agent:rf_source_ready
	wire          thermocouples_sel_s1_agent_rf_source_startofpacket;                   // thermocouples_sel_s1_agent:rf_source_startofpacket -> thermocouples_sel_s1_agent_rsp_fifo:in_startofpacket
	wire          thermocouples_sel_s1_agent_rf_source_endofpacket;                     // thermocouples_sel_s1_agent:rf_source_endofpacket -> thermocouples_sel_s1_agent_rsp_fifo:in_endofpacket
	wire          thermocouples_sel_s1_agent_rsp_fifo_out_valid;                        // thermocouples_sel_s1_agent_rsp_fifo:out_valid -> thermocouples_sel_s1_agent:rf_sink_valid
	wire  [120:0] thermocouples_sel_s1_agent_rsp_fifo_out_data;                         // thermocouples_sel_s1_agent_rsp_fifo:out_data -> thermocouples_sel_s1_agent:rf_sink_data
	wire          thermocouples_sel_s1_agent_rsp_fifo_out_ready;                        // thermocouples_sel_s1_agent:rf_sink_ready -> thermocouples_sel_s1_agent_rsp_fifo:out_ready
	wire          thermocouples_sel_s1_agent_rsp_fifo_out_startofpacket;                // thermocouples_sel_s1_agent_rsp_fifo:out_startofpacket -> thermocouples_sel_s1_agent:rf_sink_startofpacket
	wire          thermocouples_sel_s1_agent_rsp_fifo_out_endofpacket;                  // thermocouples_sel_s1_agent_rsp_fifo:out_endofpacket -> thermocouples_sel_s1_agent:rf_sink_endofpacket
	wire          thermocouples_sel_s1_agent_rdata_fifo_src_valid;                      // thermocouples_sel_s1_agent:rdata_fifo_src_valid -> thermocouples_sel_s1_agent_rdata_fifo:in_valid
	wire   [33:0] thermocouples_sel_s1_agent_rdata_fifo_src_data;                       // thermocouples_sel_s1_agent:rdata_fifo_src_data -> thermocouples_sel_s1_agent_rdata_fifo:in_data
	wire          thermocouples_sel_s1_agent_rdata_fifo_src_ready;                      // thermocouples_sel_s1_agent_rdata_fifo:in_ready -> thermocouples_sel_s1_agent:rdata_fifo_src_ready
	wire   [31:0] electrode_voltage_s1_agent_m0_readdata;                               // electrode_voltage_s1_translator:uav_readdata -> electrode_voltage_s1_agent:m0_readdata
	wire          electrode_voltage_s1_agent_m0_waitrequest;                            // electrode_voltage_s1_translator:uav_waitrequest -> electrode_voltage_s1_agent:m0_waitrequest
	wire          electrode_voltage_s1_agent_m0_debugaccess;                            // electrode_voltage_s1_agent:m0_debugaccess -> electrode_voltage_s1_translator:uav_debugaccess
	wire   [20:0] electrode_voltage_s1_agent_m0_address;                                // electrode_voltage_s1_agent:m0_address -> electrode_voltage_s1_translator:uav_address
	wire    [3:0] electrode_voltage_s1_agent_m0_byteenable;                             // electrode_voltage_s1_agent:m0_byteenable -> electrode_voltage_s1_translator:uav_byteenable
	wire          electrode_voltage_s1_agent_m0_read;                                   // electrode_voltage_s1_agent:m0_read -> electrode_voltage_s1_translator:uav_read
	wire          electrode_voltage_s1_agent_m0_readdatavalid;                          // electrode_voltage_s1_translator:uav_readdatavalid -> electrode_voltage_s1_agent:m0_readdatavalid
	wire          electrode_voltage_s1_agent_m0_lock;                                   // electrode_voltage_s1_agent:m0_lock -> electrode_voltage_s1_translator:uav_lock
	wire   [31:0] electrode_voltage_s1_agent_m0_writedata;                              // electrode_voltage_s1_agent:m0_writedata -> electrode_voltage_s1_translator:uav_writedata
	wire          electrode_voltage_s1_agent_m0_write;                                  // electrode_voltage_s1_agent:m0_write -> electrode_voltage_s1_translator:uav_write
	wire    [2:0] electrode_voltage_s1_agent_m0_burstcount;                             // electrode_voltage_s1_agent:m0_burstcount -> electrode_voltage_s1_translator:uav_burstcount
	wire          electrode_voltage_s1_agent_rf_source_valid;                           // electrode_voltage_s1_agent:rf_source_valid -> electrode_voltage_s1_agent_rsp_fifo:in_valid
	wire  [120:0] electrode_voltage_s1_agent_rf_source_data;                            // electrode_voltage_s1_agent:rf_source_data -> electrode_voltage_s1_agent_rsp_fifo:in_data
	wire          electrode_voltage_s1_agent_rf_source_ready;                           // electrode_voltage_s1_agent_rsp_fifo:in_ready -> electrode_voltage_s1_agent:rf_source_ready
	wire          electrode_voltage_s1_agent_rf_source_startofpacket;                   // electrode_voltage_s1_agent:rf_source_startofpacket -> electrode_voltage_s1_agent_rsp_fifo:in_startofpacket
	wire          electrode_voltage_s1_agent_rf_source_endofpacket;                     // electrode_voltage_s1_agent:rf_source_endofpacket -> electrode_voltage_s1_agent_rsp_fifo:in_endofpacket
	wire          electrode_voltage_s1_agent_rsp_fifo_out_valid;                        // electrode_voltage_s1_agent_rsp_fifo:out_valid -> electrode_voltage_s1_agent:rf_sink_valid
	wire  [120:0] electrode_voltage_s1_agent_rsp_fifo_out_data;                         // electrode_voltage_s1_agent_rsp_fifo:out_data -> electrode_voltage_s1_agent:rf_sink_data
	wire          electrode_voltage_s1_agent_rsp_fifo_out_ready;                        // electrode_voltage_s1_agent:rf_sink_ready -> electrode_voltage_s1_agent_rsp_fifo:out_ready
	wire          electrode_voltage_s1_agent_rsp_fifo_out_startofpacket;                // electrode_voltage_s1_agent_rsp_fifo:out_startofpacket -> electrode_voltage_s1_agent:rf_sink_startofpacket
	wire          electrode_voltage_s1_agent_rsp_fifo_out_endofpacket;                  // electrode_voltage_s1_agent_rsp_fifo:out_endofpacket -> electrode_voltage_s1_agent:rf_sink_endofpacket
	wire          electrode_voltage_s1_agent_rdata_fifo_src_valid;                      // electrode_voltage_s1_agent:rdata_fifo_src_valid -> electrode_voltage_s1_agent_rdata_fifo:in_valid
	wire   [33:0] electrode_voltage_s1_agent_rdata_fifo_src_data;                       // electrode_voltage_s1_agent:rdata_fifo_src_data -> electrode_voltage_s1_agent_rdata_fifo:in_data
	wire          electrode_voltage_s1_agent_rdata_fifo_src_ready;                      // electrode_voltage_s1_agent_rdata_fifo:in_ready -> electrode_voltage_s1_agent:rdata_fifo_src_ready
	wire   [31:0] iteration_number_s1_agent_m0_readdata;                                // iteration_number_s1_translator:uav_readdata -> iteration_number_s1_agent:m0_readdata
	wire          iteration_number_s1_agent_m0_waitrequest;                             // iteration_number_s1_translator:uav_waitrequest -> iteration_number_s1_agent:m0_waitrequest
	wire          iteration_number_s1_agent_m0_debugaccess;                             // iteration_number_s1_agent:m0_debugaccess -> iteration_number_s1_translator:uav_debugaccess
	wire   [20:0] iteration_number_s1_agent_m0_address;                                 // iteration_number_s1_agent:m0_address -> iteration_number_s1_translator:uav_address
	wire    [3:0] iteration_number_s1_agent_m0_byteenable;                              // iteration_number_s1_agent:m0_byteenable -> iteration_number_s1_translator:uav_byteenable
	wire          iteration_number_s1_agent_m0_read;                                    // iteration_number_s1_agent:m0_read -> iteration_number_s1_translator:uav_read
	wire          iteration_number_s1_agent_m0_readdatavalid;                           // iteration_number_s1_translator:uav_readdatavalid -> iteration_number_s1_agent:m0_readdatavalid
	wire          iteration_number_s1_agent_m0_lock;                                    // iteration_number_s1_agent:m0_lock -> iteration_number_s1_translator:uav_lock
	wire   [31:0] iteration_number_s1_agent_m0_writedata;                               // iteration_number_s1_agent:m0_writedata -> iteration_number_s1_translator:uav_writedata
	wire          iteration_number_s1_agent_m0_write;                                   // iteration_number_s1_agent:m0_write -> iteration_number_s1_translator:uav_write
	wire    [2:0] iteration_number_s1_agent_m0_burstcount;                              // iteration_number_s1_agent:m0_burstcount -> iteration_number_s1_translator:uav_burstcount
	wire          iteration_number_s1_agent_rf_source_valid;                            // iteration_number_s1_agent:rf_source_valid -> iteration_number_s1_agent_rsp_fifo:in_valid
	wire  [120:0] iteration_number_s1_agent_rf_source_data;                             // iteration_number_s1_agent:rf_source_data -> iteration_number_s1_agent_rsp_fifo:in_data
	wire          iteration_number_s1_agent_rf_source_ready;                            // iteration_number_s1_agent_rsp_fifo:in_ready -> iteration_number_s1_agent:rf_source_ready
	wire          iteration_number_s1_agent_rf_source_startofpacket;                    // iteration_number_s1_agent:rf_source_startofpacket -> iteration_number_s1_agent_rsp_fifo:in_startofpacket
	wire          iteration_number_s1_agent_rf_source_endofpacket;                      // iteration_number_s1_agent:rf_source_endofpacket -> iteration_number_s1_agent_rsp_fifo:in_endofpacket
	wire          iteration_number_s1_agent_rsp_fifo_out_valid;                         // iteration_number_s1_agent_rsp_fifo:out_valid -> iteration_number_s1_agent:rf_sink_valid
	wire  [120:0] iteration_number_s1_agent_rsp_fifo_out_data;                          // iteration_number_s1_agent_rsp_fifo:out_data -> iteration_number_s1_agent:rf_sink_data
	wire          iteration_number_s1_agent_rsp_fifo_out_ready;                         // iteration_number_s1_agent:rf_sink_ready -> iteration_number_s1_agent_rsp_fifo:out_ready
	wire          iteration_number_s1_agent_rsp_fifo_out_startofpacket;                 // iteration_number_s1_agent_rsp_fifo:out_startofpacket -> iteration_number_s1_agent:rf_sink_startofpacket
	wire          iteration_number_s1_agent_rsp_fifo_out_endofpacket;                   // iteration_number_s1_agent_rsp_fifo:out_endofpacket -> iteration_number_s1_agent:rf_sink_endofpacket
	wire          iteration_number_s1_agent_rdata_fifo_src_valid;                       // iteration_number_s1_agent:rdata_fifo_src_valid -> iteration_number_s1_agent_rdata_fifo:in_valid
	wire   [33:0] iteration_number_s1_agent_rdata_fifo_src_data;                        // iteration_number_s1_agent:rdata_fifo_src_data -> iteration_number_s1_agent_rdata_fifo:in_data
	wire          iteration_number_s1_agent_rdata_fifo_src_ready;                       // iteration_number_s1_agent_rdata_fifo:in_ready -> iteration_number_s1_agent:rdata_fifo_src_ready
	wire   [31:0] finish_fdtd_s1_agent_m0_readdata;                                     // finish_fdtd_s1_translator:uav_readdata -> finish_fdtd_s1_agent:m0_readdata
	wire          finish_fdtd_s1_agent_m0_waitrequest;                                  // finish_fdtd_s1_translator:uav_waitrequest -> finish_fdtd_s1_agent:m0_waitrequest
	wire          finish_fdtd_s1_agent_m0_debugaccess;                                  // finish_fdtd_s1_agent:m0_debugaccess -> finish_fdtd_s1_translator:uav_debugaccess
	wire   [20:0] finish_fdtd_s1_agent_m0_address;                                      // finish_fdtd_s1_agent:m0_address -> finish_fdtd_s1_translator:uav_address
	wire    [3:0] finish_fdtd_s1_agent_m0_byteenable;                                   // finish_fdtd_s1_agent:m0_byteenable -> finish_fdtd_s1_translator:uav_byteenable
	wire          finish_fdtd_s1_agent_m0_read;                                         // finish_fdtd_s1_agent:m0_read -> finish_fdtd_s1_translator:uav_read
	wire          finish_fdtd_s1_agent_m0_readdatavalid;                                // finish_fdtd_s1_translator:uav_readdatavalid -> finish_fdtd_s1_agent:m0_readdatavalid
	wire          finish_fdtd_s1_agent_m0_lock;                                         // finish_fdtd_s1_agent:m0_lock -> finish_fdtd_s1_translator:uav_lock
	wire   [31:0] finish_fdtd_s1_agent_m0_writedata;                                    // finish_fdtd_s1_agent:m0_writedata -> finish_fdtd_s1_translator:uav_writedata
	wire          finish_fdtd_s1_agent_m0_write;                                        // finish_fdtd_s1_agent:m0_write -> finish_fdtd_s1_translator:uav_write
	wire    [2:0] finish_fdtd_s1_agent_m0_burstcount;                                   // finish_fdtd_s1_agent:m0_burstcount -> finish_fdtd_s1_translator:uav_burstcount
	wire          finish_fdtd_s1_agent_rf_source_valid;                                 // finish_fdtd_s1_agent:rf_source_valid -> finish_fdtd_s1_agent_rsp_fifo:in_valid
	wire  [120:0] finish_fdtd_s1_agent_rf_source_data;                                  // finish_fdtd_s1_agent:rf_source_data -> finish_fdtd_s1_agent_rsp_fifo:in_data
	wire          finish_fdtd_s1_agent_rf_source_ready;                                 // finish_fdtd_s1_agent_rsp_fifo:in_ready -> finish_fdtd_s1_agent:rf_source_ready
	wire          finish_fdtd_s1_agent_rf_source_startofpacket;                         // finish_fdtd_s1_agent:rf_source_startofpacket -> finish_fdtd_s1_agent_rsp_fifo:in_startofpacket
	wire          finish_fdtd_s1_agent_rf_source_endofpacket;                           // finish_fdtd_s1_agent:rf_source_endofpacket -> finish_fdtd_s1_agent_rsp_fifo:in_endofpacket
	wire          finish_fdtd_s1_agent_rsp_fifo_out_valid;                              // finish_fdtd_s1_agent_rsp_fifo:out_valid -> finish_fdtd_s1_agent:rf_sink_valid
	wire  [120:0] finish_fdtd_s1_agent_rsp_fifo_out_data;                               // finish_fdtd_s1_agent_rsp_fifo:out_data -> finish_fdtd_s1_agent:rf_sink_data
	wire          finish_fdtd_s1_agent_rsp_fifo_out_ready;                              // finish_fdtd_s1_agent:rf_sink_ready -> finish_fdtd_s1_agent_rsp_fifo:out_ready
	wire          finish_fdtd_s1_agent_rsp_fifo_out_startofpacket;                      // finish_fdtd_s1_agent_rsp_fifo:out_startofpacket -> finish_fdtd_s1_agent:rf_sink_startofpacket
	wire          finish_fdtd_s1_agent_rsp_fifo_out_endofpacket;                        // finish_fdtd_s1_agent_rsp_fifo:out_endofpacket -> finish_fdtd_s1_agent:rf_sink_endofpacket
	wire          finish_fdtd_s1_agent_rdata_fifo_src_valid;                            // finish_fdtd_s1_agent:rdata_fifo_src_valid -> finish_fdtd_s1_agent_rdata_fifo:in_valid
	wire   [33:0] finish_fdtd_s1_agent_rdata_fifo_src_data;                             // finish_fdtd_s1_agent:rdata_fifo_src_data -> finish_fdtd_s1_agent_rdata_fifo:in_data
	wire          finish_fdtd_s1_agent_rdata_fifo_src_ready;                            // finish_fdtd_s1_agent_rdata_fifo:in_ready -> finish_fdtd_s1_agent:rdata_fifo_src_ready
	wire   [31:0] module_csr_s1_agent_m0_readdata;                                      // module_csr_s1_translator:uav_readdata -> module_csr_s1_agent:m0_readdata
	wire          module_csr_s1_agent_m0_waitrequest;                                   // module_csr_s1_translator:uav_waitrequest -> module_csr_s1_agent:m0_waitrequest
	wire          module_csr_s1_agent_m0_debugaccess;                                   // module_csr_s1_agent:m0_debugaccess -> module_csr_s1_translator:uav_debugaccess
	wire   [20:0] module_csr_s1_agent_m0_address;                                       // module_csr_s1_agent:m0_address -> module_csr_s1_translator:uav_address
	wire    [3:0] module_csr_s1_agent_m0_byteenable;                                    // module_csr_s1_agent:m0_byteenable -> module_csr_s1_translator:uav_byteenable
	wire          module_csr_s1_agent_m0_read;                                          // module_csr_s1_agent:m0_read -> module_csr_s1_translator:uav_read
	wire          module_csr_s1_agent_m0_readdatavalid;                                 // module_csr_s1_translator:uav_readdatavalid -> module_csr_s1_agent:m0_readdatavalid
	wire          module_csr_s1_agent_m0_lock;                                          // module_csr_s1_agent:m0_lock -> module_csr_s1_translator:uav_lock
	wire   [31:0] module_csr_s1_agent_m0_writedata;                                     // module_csr_s1_agent:m0_writedata -> module_csr_s1_translator:uav_writedata
	wire          module_csr_s1_agent_m0_write;                                         // module_csr_s1_agent:m0_write -> module_csr_s1_translator:uav_write
	wire    [2:0] module_csr_s1_agent_m0_burstcount;                                    // module_csr_s1_agent:m0_burstcount -> module_csr_s1_translator:uav_burstcount
	wire          module_csr_s1_agent_rf_source_valid;                                  // module_csr_s1_agent:rf_source_valid -> module_csr_s1_agent_rsp_fifo:in_valid
	wire  [120:0] module_csr_s1_agent_rf_source_data;                                   // module_csr_s1_agent:rf_source_data -> module_csr_s1_agent_rsp_fifo:in_data
	wire          module_csr_s1_agent_rf_source_ready;                                  // module_csr_s1_agent_rsp_fifo:in_ready -> module_csr_s1_agent:rf_source_ready
	wire          module_csr_s1_agent_rf_source_startofpacket;                          // module_csr_s1_agent:rf_source_startofpacket -> module_csr_s1_agent_rsp_fifo:in_startofpacket
	wire          module_csr_s1_agent_rf_source_endofpacket;                            // module_csr_s1_agent:rf_source_endofpacket -> module_csr_s1_agent_rsp_fifo:in_endofpacket
	wire          module_csr_s1_agent_rsp_fifo_out_valid;                               // module_csr_s1_agent_rsp_fifo:out_valid -> module_csr_s1_agent:rf_sink_valid
	wire  [120:0] module_csr_s1_agent_rsp_fifo_out_data;                                // module_csr_s1_agent_rsp_fifo:out_data -> module_csr_s1_agent:rf_sink_data
	wire          module_csr_s1_agent_rsp_fifo_out_ready;                               // module_csr_s1_agent:rf_sink_ready -> module_csr_s1_agent_rsp_fifo:out_ready
	wire          module_csr_s1_agent_rsp_fifo_out_startofpacket;                       // module_csr_s1_agent_rsp_fifo:out_startofpacket -> module_csr_s1_agent:rf_sink_startofpacket
	wire          module_csr_s1_agent_rsp_fifo_out_endofpacket;                         // module_csr_s1_agent_rsp_fifo:out_endofpacket -> module_csr_s1_agent:rf_sink_endofpacket
	wire          module_csr_s1_agent_rdata_fifo_src_valid;                             // module_csr_s1_agent:rdata_fifo_src_valid -> module_csr_s1_agent_rdata_fifo:in_valid
	wire   [33:0] module_csr_s1_agent_rdata_fifo_src_data;                              // module_csr_s1_agent:rdata_fifo_src_data -> module_csr_s1_agent_rdata_fifo:in_data
	wire          module_csr_s1_agent_rdata_fifo_src_ready;                             // module_csr_s1_agent_rdata_fifo:in_ready -> module_csr_s1_agent:rdata_fifo_src_ready
	wire   [31:0] power_unlock_s1_agent_m0_readdata;                                    // power_unlock_s1_translator:uav_readdata -> power_unlock_s1_agent:m0_readdata
	wire          power_unlock_s1_agent_m0_waitrequest;                                 // power_unlock_s1_translator:uav_waitrequest -> power_unlock_s1_agent:m0_waitrequest
	wire          power_unlock_s1_agent_m0_debugaccess;                                 // power_unlock_s1_agent:m0_debugaccess -> power_unlock_s1_translator:uav_debugaccess
	wire   [20:0] power_unlock_s1_agent_m0_address;                                     // power_unlock_s1_agent:m0_address -> power_unlock_s1_translator:uav_address
	wire    [3:0] power_unlock_s1_agent_m0_byteenable;                                  // power_unlock_s1_agent:m0_byteenable -> power_unlock_s1_translator:uav_byteenable
	wire          power_unlock_s1_agent_m0_read;                                        // power_unlock_s1_agent:m0_read -> power_unlock_s1_translator:uav_read
	wire          power_unlock_s1_agent_m0_readdatavalid;                               // power_unlock_s1_translator:uav_readdatavalid -> power_unlock_s1_agent:m0_readdatavalid
	wire          power_unlock_s1_agent_m0_lock;                                        // power_unlock_s1_agent:m0_lock -> power_unlock_s1_translator:uav_lock
	wire   [31:0] power_unlock_s1_agent_m0_writedata;                                   // power_unlock_s1_agent:m0_writedata -> power_unlock_s1_translator:uav_writedata
	wire          power_unlock_s1_agent_m0_write;                                       // power_unlock_s1_agent:m0_write -> power_unlock_s1_translator:uav_write
	wire    [2:0] power_unlock_s1_agent_m0_burstcount;                                  // power_unlock_s1_agent:m0_burstcount -> power_unlock_s1_translator:uav_burstcount
	wire          power_unlock_s1_agent_rf_source_valid;                                // power_unlock_s1_agent:rf_source_valid -> power_unlock_s1_agent_rsp_fifo:in_valid
	wire  [120:0] power_unlock_s1_agent_rf_source_data;                                 // power_unlock_s1_agent:rf_source_data -> power_unlock_s1_agent_rsp_fifo:in_data
	wire          power_unlock_s1_agent_rf_source_ready;                                // power_unlock_s1_agent_rsp_fifo:in_ready -> power_unlock_s1_agent:rf_source_ready
	wire          power_unlock_s1_agent_rf_source_startofpacket;                        // power_unlock_s1_agent:rf_source_startofpacket -> power_unlock_s1_agent_rsp_fifo:in_startofpacket
	wire          power_unlock_s1_agent_rf_source_endofpacket;                          // power_unlock_s1_agent:rf_source_endofpacket -> power_unlock_s1_agent_rsp_fifo:in_endofpacket
	wire          power_unlock_s1_agent_rsp_fifo_out_valid;                             // power_unlock_s1_agent_rsp_fifo:out_valid -> power_unlock_s1_agent:rf_sink_valid
	wire  [120:0] power_unlock_s1_agent_rsp_fifo_out_data;                              // power_unlock_s1_agent_rsp_fifo:out_data -> power_unlock_s1_agent:rf_sink_data
	wire          power_unlock_s1_agent_rsp_fifo_out_ready;                             // power_unlock_s1_agent:rf_sink_ready -> power_unlock_s1_agent_rsp_fifo:out_ready
	wire          power_unlock_s1_agent_rsp_fifo_out_startofpacket;                     // power_unlock_s1_agent_rsp_fifo:out_startofpacket -> power_unlock_s1_agent:rf_sink_startofpacket
	wire          power_unlock_s1_agent_rsp_fifo_out_endofpacket;                       // power_unlock_s1_agent_rsp_fifo:out_endofpacket -> power_unlock_s1_agent:rf_sink_endofpacket
	wire          power_unlock_s1_agent_rdata_fifo_src_valid;                           // power_unlock_s1_agent:rdata_fifo_src_valid -> power_unlock_s1_agent_rdata_fifo:in_valid
	wire   [33:0] power_unlock_s1_agent_rdata_fifo_src_data;                            // power_unlock_s1_agent:rdata_fifo_src_data -> power_unlock_s1_agent_rdata_fifo:in_data
	wire          power_unlock_s1_agent_rdata_fifo_src_ready;                           // power_unlock_s1_agent_rdata_fifo:in_ready -> power_unlock_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hw_reset_s1_agent_m0_readdata;                                        // HW_reset_s1_translator:uav_readdata -> HW_reset_s1_agent:m0_readdata
	wire          hw_reset_s1_agent_m0_waitrequest;                                     // HW_reset_s1_translator:uav_waitrequest -> HW_reset_s1_agent:m0_waitrequest
	wire          hw_reset_s1_agent_m0_debugaccess;                                     // HW_reset_s1_agent:m0_debugaccess -> HW_reset_s1_translator:uav_debugaccess
	wire   [20:0] hw_reset_s1_agent_m0_address;                                         // HW_reset_s1_agent:m0_address -> HW_reset_s1_translator:uav_address
	wire    [3:0] hw_reset_s1_agent_m0_byteenable;                                      // HW_reset_s1_agent:m0_byteenable -> HW_reset_s1_translator:uav_byteenable
	wire          hw_reset_s1_agent_m0_read;                                            // HW_reset_s1_agent:m0_read -> HW_reset_s1_translator:uav_read
	wire          hw_reset_s1_agent_m0_readdatavalid;                                   // HW_reset_s1_translator:uav_readdatavalid -> HW_reset_s1_agent:m0_readdatavalid
	wire          hw_reset_s1_agent_m0_lock;                                            // HW_reset_s1_agent:m0_lock -> HW_reset_s1_translator:uav_lock
	wire   [31:0] hw_reset_s1_agent_m0_writedata;                                       // HW_reset_s1_agent:m0_writedata -> HW_reset_s1_translator:uav_writedata
	wire          hw_reset_s1_agent_m0_write;                                           // HW_reset_s1_agent:m0_write -> HW_reset_s1_translator:uav_write
	wire    [2:0] hw_reset_s1_agent_m0_burstcount;                                      // HW_reset_s1_agent:m0_burstcount -> HW_reset_s1_translator:uav_burstcount
	wire          hw_reset_s1_agent_rf_source_valid;                                    // HW_reset_s1_agent:rf_source_valid -> HW_reset_s1_agent_rsp_fifo:in_valid
	wire  [120:0] hw_reset_s1_agent_rf_source_data;                                     // HW_reset_s1_agent:rf_source_data -> HW_reset_s1_agent_rsp_fifo:in_data
	wire          hw_reset_s1_agent_rf_source_ready;                                    // HW_reset_s1_agent_rsp_fifo:in_ready -> HW_reset_s1_agent:rf_source_ready
	wire          hw_reset_s1_agent_rf_source_startofpacket;                            // HW_reset_s1_agent:rf_source_startofpacket -> HW_reset_s1_agent_rsp_fifo:in_startofpacket
	wire          hw_reset_s1_agent_rf_source_endofpacket;                              // HW_reset_s1_agent:rf_source_endofpacket -> HW_reset_s1_agent_rsp_fifo:in_endofpacket
	wire          hw_reset_s1_agent_rsp_fifo_out_valid;                                 // HW_reset_s1_agent_rsp_fifo:out_valid -> HW_reset_s1_agent:rf_sink_valid
	wire  [120:0] hw_reset_s1_agent_rsp_fifo_out_data;                                  // HW_reset_s1_agent_rsp_fifo:out_data -> HW_reset_s1_agent:rf_sink_data
	wire          hw_reset_s1_agent_rsp_fifo_out_ready;                                 // HW_reset_s1_agent:rf_sink_ready -> HW_reset_s1_agent_rsp_fifo:out_ready
	wire          hw_reset_s1_agent_rsp_fifo_out_startofpacket;                         // HW_reset_s1_agent_rsp_fifo:out_startofpacket -> HW_reset_s1_agent:rf_sink_startofpacket
	wire          hw_reset_s1_agent_rsp_fifo_out_endofpacket;                           // HW_reset_s1_agent_rsp_fifo:out_endofpacket -> HW_reset_s1_agent:rf_sink_endofpacket
	wire          hw_reset_s1_agent_rdata_fifo_src_valid;                               // HW_reset_s1_agent:rdata_fifo_src_valid -> HW_reset_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hw_reset_s1_agent_rdata_fifo_src_data;                                // HW_reset_s1_agent:rdata_fifo_src_data -> HW_reset_s1_agent_rdata_fifo:in_data
	wire          hw_reset_s1_agent_rdata_fifo_src_ready;                               // HW_reset_s1_agent_rdata_fifo:in_ready -> HW_reset_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_readdata;                   // Pixel_DMA_Addr_Translation_slave_translator:uav_readdata -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdata
	wire          pixel_dma_addr_translation_slave_agent_m0_waitrequest;                // Pixel_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Pixel_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire          pixel_dma_addr_translation_slave_agent_m0_debugaccess;                // Pixel_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Pixel_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire   [20:0] pixel_dma_addr_translation_slave_agent_m0_address;                    // Pixel_DMA_Addr_Translation_slave_agent:m0_address -> Pixel_DMA_Addr_Translation_slave_translator:uav_address
	wire    [3:0] pixel_dma_addr_translation_slave_agent_m0_byteenable;                 // Pixel_DMA_Addr_Translation_slave_agent:m0_byteenable -> Pixel_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire          pixel_dma_addr_translation_slave_agent_m0_read;                       // Pixel_DMA_Addr_Translation_slave_agent:m0_read -> Pixel_DMA_Addr_Translation_slave_translator:uav_read
	wire          pixel_dma_addr_translation_slave_agent_m0_readdatavalid;              // Pixel_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire          pixel_dma_addr_translation_slave_agent_m0_lock;                       // Pixel_DMA_Addr_Translation_slave_agent:m0_lock -> Pixel_DMA_Addr_Translation_slave_translator:uav_lock
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_writedata;                  // Pixel_DMA_Addr_Translation_slave_agent:m0_writedata -> Pixel_DMA_Addr_Translation_slave_translator:uav_writedata
	wire          pixel_dma_addr_translation_slave_agent_m0_write;                      // Pixel_DMA_Addr_Translation_slave_agent:m0_write -> Pixel_DMA_Addr_Translation_slave_translator:uav_write
	wire    [2:0] pixel_dma_addr_translation_slave_agent_m0_burstcount;                 // Pixel_DMA_Addr_Translation_slave_agent:m0_burstcount -> Pixel_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire          pixel_dma_addr_translation_slave_agent_rf_source_valid;               // Pixel_DMA_Addr_Translation_slave_agent:rf_source_valid -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [120:0] pixel_dma_addr_translation_slave_agent_rf_source_data;                // Pixel_DMA_Addr_Translation_slave_agent:rf_source_data -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rf_source_ready;               // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire          pixel_dma_addr_translation_slave_agent_rf_source_startofpacket;       // Pixel_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rf_source_endofpacket;         // Pixel_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid;            // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [120:0] pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data;             // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready;            // Pixel_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;    // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;      // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid;          // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data;           // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready;          // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                         // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                          // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                         // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                 // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                   // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                          // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                           // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                          // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                  // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                    // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          vga_subsystem_char_control_slave_agent_rp_valid;                      // VGA_subsystem_char_control_slave_agent:rp_valid -> router_002:sink_valid
	wire  [119:0] vga_subsystem_char_control_slave_agent_rp_data;                       // VGA_subsystem_char_control_slave_agent:rp_data -> router_002:sink_data
	wire          vga_subsystem_char_control_slave_agent_rp_ready;                      // router_002:sink_ready -> VGA_subsystem_char_control_slave_agent:rp_ready
	wire          vga_subsystem_char_control_slave_agent_rp_startofpacket;              // VGA_subsystem_char_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          vga_subsystem_char_control_slave_agent_rp_endofpacket;                // VGA_subsystem_char_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> rsp_demux:sink_valid
	wire  [119:0] router_002_src_data;                                                  // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                 // rsp_demux:sink_ready -> router_002:src_ready
	wire   [19:0] router_002_src_channel;                                               // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rp_valid;                               // fifo_HPS_to_FPGA_in_csr_agent:rp_valid -> router_003:sink_valid
	wire  [119:0] fifo_hps_to_fpga_in_csr_agent_rp_data;                                // fifo_HPS_to_FPGA_in_csr_agent:rp_data -> router_003:sink_data
	wire          fifo_hps_to_fpga_in_csr_agent_rp_ready;                               // router_003:sink_ready -> fifo_HPS_to_FPGA_in_csr_agent:rp_ready
	wire          fifo_hps_to_fpga_in_csr_agent_rp_startofpacket;                       // fifo_HPS_to_FPGA_in_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          fifo_hps_to_fpga_in_csr_agent_rp_endofpacket;                         // fifo_HPS_to_FPGA_in_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                 // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [119:0] router_003_src_data;                                                  // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                 // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [19:0] router_003_src_channel;                                               // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                         // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                           // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rp_valid;                              // fifo_FPGA_to_HPS_out_csr_agent:rp_valid -> router_004:sink_valid
	wire  [119:0] fifo_fpga_to_hps_out_csr_agent_rp_data;                               // fifo_FPGA_to_HPS_out_csr_agent:rp_data -> router_004:sink_data
	wire          fifo_fpga_to_hps_out_csr_agent_rp_ready;                              // router_004:sink_ready -> fifo_FPGA_to_HPS_out_csr_agent:rp_ready
	wire          fifo_fpga_to_hps_out_csr_agent_rp_startofpacket;                      // fifo_FPGA_to_HPS_out_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          fifo_fpga_to_hps_out_csr_agent_rp_endofpacket;                        // fifo_FPGA_to_HPS_out_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                 // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [119:0] router_004_src_data;                                                  // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                 // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [19:0] router_004_src_channel;                                               // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                         // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                           // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                                 // SW_s1_agent:rp_valid -> router_005:sink_valid
	wire  [119:0] sw_s1_agent_rp_data;                                                  // SW_s1_agent:rp_data -> router_005:sink_data
	wire          sw_s1_agent_rp_ready;                                                 // router_005:sink_ready -> SW_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                         // SW_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                           // SW_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                 // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [119:0] router_005_src_data;                                                  // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                 // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [19:0] router_005_src_channel;                                               // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                         // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                           // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          number32_s1_agent_rp_valid;                                           // Number32_s1_agent:rp_valid -> router_006:sink_valid
	wire  [119:0] number32_s1_agent_rp_data;                                            // Number32_s1_agent:rp_data -> router_006:sink_data
	wire          number32_s1_agent_rp_ready;                                           // router_006:sink_ready -> Number32_s1_agent:rp_ready
	wire          number32_s1_agent_rp_startofpacket;                                   // Number32_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          number32_s1_agent_rp_endofpacket;                                     // Number32_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                 // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [119:0] router_006_src_data;                                                  // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                 // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [19:0] router_006_src_channel;                                               // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                         // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                           // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          o_temperature_s1_agent_rp_valid;                                      // O_temperature_s1_agent:rp_valid -> router_007:sink_valid
	wire  [119:0] o_temperature_s1_agent_rp_data;                                       // O_temperature_s1_agent:rp_data -> router_007:sink_data
	wire          o_temperature_s1_agent_rp_ready;                                      // router_007:sink_ready -> O_temperature_s1_agent:rp_ready
	wire          o_temperature_s1_agent_rp_startofpacket;                              // O_temperature_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          o_temperature_s1_agent_rp_endofpacket;                                // O_temperature_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                 // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [119:0] router_007_src_data;                                                  // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                 // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [19:0] router_007_src_channel;                                               // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                         // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                           // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          o_pw_forward_s1_agent_rp_valid;                                       // O_pw_forward_s1_agent:rp_valid -> router_008:sink_valid
	wire  [119:0] o_pw_forward_s1_agent_rp_data;                                        // O_pw_forward_s1_agent:rp_data -> router_008:sink_data
	wire          o_pw_forward_s1_agent_rp_ready;                                       // router_008:sink_ready -> O_pw_forward_s1_agent:rp_ready
	wire          o_pw_forward_s1_agent_rp_startofpacket;                               // O_pw_forward_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          o_pw_forward_s1_agent_rp_endofpacket;                                 // O_pw_forward_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                 // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [119:0] router_008_src_data;                                                  // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                 // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [19:0] router_008_src_channel;                                               // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                         // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                           // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          o_pw_reversed_s1_agent_rp_valid;                                      // O_pw_reversed_s1_agent:rp_valid -> router_009:sink_valid
	wire  [119:0] o_pw_reversed_s1_agent_rp_data;                                       // O_pw_reversed_s1_agent:rp_data -> router_009:sink_data
	wire          o_pw_reversed_s1_agent_rp_ready;                                      // router_009:sink_ready -> O_pw_reversed_s1_agent:rp_ready
	wire          o_pw_reversed_s1_agent_rp_startofpacket;                              // O_pw_reversed_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          o_pw_reversed_s1_agent_rp_endofpacket;                                // O_pw_reversed_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                 // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [119:0] router_009_src_data;                                                  // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                 // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [19:0] router_009_src_channel;                                               // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                         // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                           // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          o_temperature2_s1_agent_rp_valid;                                     // O_temperature2_s1_agent:rp_valid -> router_010:sink_valid
	wire  [119:0] o_temperature2_s1_agent_rp_data;                                      // O_temperature2_s1_agent:rp_data -> router_010:sink_data
	wire          o_temperature2_s1_agent_rp_ready;                                     // router_010:sink_ready -> O_temperature2_s1_agent:rp_ready
	wire          o_temperature2_s1_agent_rp_startofpacket;                             // O_temperature2_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          o_temperature2_s1_agent_rp_endofpacket;                               // O_temperature2_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                 // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [119:0] router_010_src_data;                                                  // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                 // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [19:0] router_010_src_channel;                                               // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                         // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                           // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          rf_on_off_s1_agent_rp_valid;                                          // rf_on_off_s1_agent:rp_valid -> router_011:sink_valid
	wire  [119:0] rf_on_off_s1_agent_rp_data;                                           // rf_on_off_s1_agent:rp_data -> router_011:sink_data
	wire          rf_on_off_s1_agent_rp_ready;                                          // router_011:sink_ready -> rf_on_off_s1_agent:rp_ready
	wire          rf_on_off_s1_agent_rp_startofpacket;                                  // rf_on_off_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          rf_on_off_s1_agent_rp_endofpacket;                                    // rf_on_off_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                 // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [119:0] router_011_src_data;                                                  // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                 // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [19:0] router_011_src_channel;                                               // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                         // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                           // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          command_from_hps_s1_agent_rp_valid;                                   // command_from_hps_s1_agent:rp_valid -> router_012:sink_valid
	wire  [119:0] command_from_hps_s1_agent_rp_data;                                    // command_from_hps_s1_agent:rp_data -> router_012:sink_data
	wire          command_from_hps_s1_agent_rp_ready;                                   // router_012:sink_ready -> command_from_hps_s1_agent:rp_ready
	wire          command_from_hps_s1_agent_rp_startofpacket;                           // command_from_hps_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          command_from_hps_s1_agent_rp_endofpacket;                             // command_from_hps_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                 // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [119:0] router_012_src_data;                                                  // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                 // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [19:0] router_012_src_channel;                                               // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                         // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                           // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          sp_s1_agent_rp_valid;                                                 // SP_s1_agent:rp_valid -> router_013:sink_valid
	wire  [119:0] sp_s1_agent_rp_data;                                                  // SP_s1_agent:rp_data -> router_013:sink_data
	wire          sp_s1_agent_rp_ready;                                                 // router_013:sink_ready -> SP_s1_agent:rp_ready
	wire          sp_s1_agent_rp_startofpacket;                                         // SP_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sp_s1_agent_rp_endofpacket;                                           // SP_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                 // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [119:0] router_013_src_data;                                                  // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                 // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [19:0] router_013_src_channel;                                               // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                         // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                           // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          thermocouples_sel_s1_agent_rp_valid;                                  // thermocouples_sel_s1_agent:rp_valid -> router_014:sink_valid
	wire  [119:0] thermocouples_sel_s1_agent_rp_data;                                   // thermocouples_sel_s1_agent:rp_data -> router_014:sink_data
	wire          thermocouples_sel_s1_agent_rp_ready;                                  // router_014:sink_ready -> thermocouples_sel_s1_agent:rp_ready
	wire          thermocouples_sel_s1_agent_rp_startofpacket;                          // thermocouples_sel_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          thermocouples_sel_s1_agent_rp_endofpacket;                            // thermocouples_sel_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                 // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [119:0] router_014_src_data;                                                  // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                 // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [19:0] router_014_src_channel;                                               // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                         // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                           // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          electrode_voltage_s1_agent_rp_valid;                                  // electrode_voltage_s1_agent:rp_valid -> router_015:sink_valid
	wire  [119:0] electrode_voltage_s1_agent_rp_data;                                   // electrode_voltage_s1_agent:rp_data -> router_015:sink_data
	wire          electrode_voltage_s1_agent_rp_ready;                                  // router_015:sink_ready -> electrode_voltage_s1_agent:rp_ready
	wire          electrode_voltage_s1_agent_rp_startofpacket;                          // electrode_voltage_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          electrode_voltage_s1_agent_rp_endofpacket;                            // electrode_voltage_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                 // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [119:0] router_015_src_data;                                                  // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                 // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [19:0] router_015_src_channel;                                               // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                         // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                           // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          iteration_number_s1_agent_rp_valid;                                   // iteration_number_s1_agent:rp_valid -> router_016:sink_valid
	wire  [119:0] iteration_number_s1_agent_rp_data;                                    // iteration_number_s1_agent:rp_data -> router_016:sink_data
	wire          iteration_number_s1_agent_rp_ready;                                   // router_016:sink_ready -> iteration_number_s1_agent:rp_ready
	wire          iteration_number_s1_agent_rp_startofpacket;                           // iteration_number_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          iteration_number_s1_agent_rp_endofpacket;                             // iteration_number_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                 // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [119:0] router_016_src_data;                                                  // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                 // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [19:0] router_016_src_channel;                                               // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                         // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                           // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          finish_fdtd_s1_agent_rp_valid;                                        // finish_fdtd_s1_agent:rp_valid -> router_017:sink_valid
	wire  [119:0] finish_fdtd_s1_agent_rp_data;                                         // finish_fdtd_s1_agent:rp_data -> router_017:sink_data
	wire          finish_fdtd_s1_agent_rp_ready;                                        // router_017:sink_ready -> finish_fdtd_s1_agent:rp_ready
	wire          finish_fdtd_s1_agent_rp_startofpacket;                                // finish_fdtd_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          finish_fdtd_s1_agent_rp_endofpacket;                                  // finish_fdtd_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                 // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [119:0] router_017_src_data;                                                  // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                 // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [19:0] router_017_src_channel;                                               // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                         // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                           // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          module_csr_s1_agent_rp_valid;                                         // module_csr_s1_agent:rp_valid -> router_018:sink_valid
	wire  [119:0] module_csr_s1_agent_rp_data;                                          // module_csr_s1_agent:rp_data -> router_018:sink_data
	wire          module_csr_s1_agent_rp_ready;                                         // router_018:sink_ready -> module_csr_s1_agent:rp_ready
	wire          module_csr_s1_agent_rp_startofpacket;                                 // module_csr_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          module_csr_s1_agent_rp_endofpacket;                                   // module_csr_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                 // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [119:0] router_018_src_data;                                                  // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                 // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [19:0] router_018_src_channel;                                               // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                         // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                           // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          power_unlock_s1_agent_rp_valid;                                       // power_unlock_s1_agent:rp_valid -> router_019:sink_valid
	wire  [119:0] power_unlock_s1_agent_rp_data;                                        // power_unlock_s1_agent:rp_data -> router_019:sink_data
	wire          power_unlock_s1_agent_rp_ready;                                       // router_019:sink_ready -> power_unlock_s1_agent:rp_ready
	wire          power_unlock_s1_agent_rp_startofpacket;                               // power_unlock_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          power_unlock_s1_agent_rp_endofpacket;                                 // power_unlock_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                 // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [119:0] router_019_src_data;                                                  // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                 // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [19:0] router_019_src_channel;                                               // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                         // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                           // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          hw_reset_s1_agent_rp_valid;                                           // HW_reset_s1_agent:rp_valid -> router_020:sink_valid
	wire  [119:0] hw_reset_s1_agent_rp_data;                                            // HW_reset_s1_agent:rp_data -> router_020:sink_data
	wire          hw_reset_s1_agent_rp_ready;                                           // router_020:sink_ready -> HW_reset_s1_agent:rp_ready
	wire          hw_reset_s1_agent_rp_startofpacket;                                   // HW_reset_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          hw_reset_s1_agent_rp_endofpacket;                                     // HW_reset_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                 // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [119:0] router_020_src_data;                                                  // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                 // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [19:0] router_020_src_channel;                                               // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                         // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                           // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_valid;                      // Pixel_DMA_Addr_Translation_slave_agent:rp_valid -> router_021:sink_valid
	wire  [119:0] pixel_dma_addr_translation_slave_agent_rp_data;                       // Pixel_DMA_Addr_Translation_slave_agent:rp_data -> router_021:sink_data
	wire          pixel_dma_addr_translation_slave_agent_rp_ready;                      // router_021:sink_ready -> Pixel_DMA_Addr_Translation_slave_agent:rp_ready
	wire          pixel_dma_addr_translation_slave_agent_rp_startofpacket;              // Pixel_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_endofpacket;                // Pixel_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                 // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [119:0] router_021_src_data;                                                  // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                 // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [19:0] router_021_src_channel;                                               // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                         // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                           // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [119:0] router_src_data;                                                      // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                     // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [19:0] router_src_channel;                                                   // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [119:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                     // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                   // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [19:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                     // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                      // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                     // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;               // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [119:0] router_001_src_data;                                                  // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                 // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [19:0] router_001_src_channel;                                               // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [119:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                     // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                   // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_001_src_data;                                                 // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [19:0] rsp_mux_001_src_channel;                                              // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                        // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                          // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                     // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                      // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                     // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [19:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;               // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> VGA_subsystem_char_control_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> VGA_subsystem_char_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                    // VGA_subsystem_char_control_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [19:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> VGA_subsystem_char_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> VGA_subsystem_char_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> VGA_subsystem_char_control_slave_burst_adapter:sink0_endofpacket
	wire          vga_subsystem_char_control_slave_burst_adapter_source0_valid;         // VGA_subsystem_char_control_slave_burst_adapter:source0_valid -> VGA_subsystem_char_control_slave_agent:cp_valid
	wire  [119:0] vga_subsystem_char_control_slave_burst_adapter_source0_data;          // VGA_subsystem_char_control_slave_burst_adapter:source0_data -> VGA_subsystem_char_control_slave_agent:cp_data
	wire          vga_subsystem_char_control_slave_burst_adapter_source0_ready;         // VGA_subsystem_char_control_slave_agent:cp_ready -> VGA_subsystem_char_control_slave_burst_adapter:source0_ready
	wire   [19:0] vga_subsystem_char_control_slave_burst_adapter_source0_channel;       // VGA_subsystem_char_control_slave_burst_adapter:source0_channel -> VGA_subsystem_char_control_slave_agent:cp_channel
	wire          vga_subsystem_char_control_slave_burst_adapter_source0_startofpacket; // VGA_subsystem_char_control_slave_burst_adapter:source0_startofpacket -> VGA_subsystem_char_control_slave_agent:cp_startofpacket
	wire          vga_subsystem_char_control_slave_burst_adapter_source0_endofpacket;   // VGA_subsystem_char_control_slave_burst_adapter:source0_endofpacket -> VGA_subsystem_char_control_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> fifo_HPS_to_FPGA_in_csr_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> fifo_HPS_to_FPGA_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                // fifo_HPS_to_FPGA_in_csr_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [19:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> fifo_HPS_to_FPGA_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> fifo_HPS_to_FPGA_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> fifo_HPS_to_FPGA_in_csr_burst_adapter:sink0_endofpacket
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_valid;                  // fifo_HPS_to_FPGA_in_csr_burst_adapter:source0_valid -> fifo_HPS_to_FPGA_in_csr_agent:cp_valid
	wire  [119:0] fifo_hps_to_fpga_in_csr_burst_adapter_source0_data;                   // fifo_HPS_to_FPGA_in_csr_burst_adapter:source0_data -> fifo_HPS_to_FPGA_in_csr_agent:cp_data
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_ready;                  // fifo_HPS_to_FPGA_in_csr_agent:cp_ready -> fifo_HPS_to_FPGA_in_csr_burst_adapter:source0_ready
	wire   [19:0] fifo_hps_to_fpga_in_csr_burst_adapter_source0_channel;                // fifo_HPS_to_FPGA_in_csr_burst_adapter:source0_channel -> fifo_HPS_to_FPGA_in_csr_agent:cp_channel
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_startofpacket;          // fifo_HPS_to_FPGA_in_csr_burst_adapter:source0_startofpacket -> fifo_HPS_to_FPGA_in_csr_agent:cp_startofpacket
	wire          fifo_hps_to_fpga_in_csr_burst_adapter_source0_endofpacket;            // fifo_HPS_to_FPGA_in_csr_burst_adapter:source0_endofpacket -> fifo_HPS_to_FPGA_in_csr_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                // cmd_mux_002:src_valid -> fifo_FPGA_to_HPS_out_csr_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_002_src_data;                                                 // cmd_mux_002:src_data -> fifo_FPGA_to_HPS_out_csr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                // fifo_FPGA_to_HPS_out_csr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [19:0] cmd_mux_002_src_channel;                                              // cmd_mux_002:src_channel -> fifo_FPGA_to_HPS_out_csr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                        // cmd_mux_002:src_startofpacket -> fifo_FPGA_to_HPS_out_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                          // cmd_mux_002:src_endofpacket -> fifo_FPGA_to_HPS_out_csr_burst_adapter:sink0_endofpacket
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_valid;                 // fifo_FPGA_to_HPS_out_csr_burst_adapter:source0_valid -> fifo_FPGA_to_HPS_out_csr_agent:cp_valid
	wire  [119:0] fifo_fpga_to_hps_out_csr_burst_adapter_source0_data;                  // fifo_FPGA_to_HPS_out_csr_burst_adapter:source0_data -> fifo_FPGA_to_HPS_out_csr_agent:cp_data
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_ready;                 // fifo_FPGA_to_HPS_out_csr_agent:cp_ready -> fifo_FPGA_to_HPS_out_csr_burst_adapter:source0_ready
	wire   [19:0] fifo_fpga_to_hps_out_csr_burst_adapter_source0_channel;               // fifo_FPGA_to_HPS_out_csr_burst_adapter:source0_channel -> fifo_FPGA_to_HPS_out_csr_agent:cp_channel
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_startofpacket;         // fifo_FPGA_to_HPS_out_csr_burst_adapter:source0_startofpacket -> fifo_FPGA_to_HPS_out_csr_agent:cp_startofpacket
	wire          fifo_fpga_to_hps_out_csr_burst_adapter_source0_endofpacket;           // fifo_FPGA_to_HPS_out_csr_burst_adapter:source0_endofpacket -> fifo_FPGA_to_HPS_out_csr_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                // cmd_mux_003:src_valid -> SW_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_003_src_data;                                                 // cmd_mux_003:src_data -> SW_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                // SW_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [19:0] cmd_mux_003_src_channel;                                              // cmd_mux_003:src_channel -> SW_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                        // cmd_mux_003:src_startofpacket -> SW_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                          // cmd_mux_003:src_endofpacket -> SW_s1_burst_adapter:sink0_endofpacket
	wire          sw_s1_burst_adapter_source0_valid;                                    // SW_s1_burst_adapter:source0_valid -> SW_s1_agent:cp_valid
	wire  [119:0] sw_s1_burst_adapter_source0_data;                                     // SW_s1_burst_adapter:source0_data -> SW_s1_agent:cp_data
	wire          sw_s1_burst_adapter_source0_ready;                                    // SW_s1_agent:cp_ready -> SW_s1_burst_adapter:source0_ready
	wire   [19:0] sw_s1_burst_adapter_source0_channel;                                  // SW_s1_burst_adapter:source0_channel -> SW_s1_agent:cp_channel
	wire          sw_s1_burst_adapter_source0_startofpacket;                            // SW_s1_burst_adapter:source0_startofpacket -> SW_s1_agent:cp_startofpacket
	wire          sw_s1_burst_adapter_source0_endofpacket;                              // SW_s1_burst_adapter:source0_endofpacket -> SW_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                // cmd_mux_004:src_valid -> Number32_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_004_src_data;                                                 // cmd_mux_004:src_data -> Number32_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                // Number32_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [19:0] cmd_mux_004_src_channel;                                              // cmd_mux_004:src_channel -> Number32_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                        // cmd_mux_004:src_startofpacket -> Number32_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                          // cmd_mux_004:src_endofpacket -> Number32_s1_burst_adapter:sink0_endofpacket
	wire          number32_s1_burst_adapter_source0_valid;                              // Number32_s1_burst_adapter:source0_valid -> Number32_s1_agent:cp_valid
	wire  [119:0] number32_s1_burst_adapter_source0_data;                               // Number32_s1_burst_adapter:source0_data -> Number32_s1_agent:cp_data
	wire          number32_s1_burst_adapter_source0_ready;                              // Number32_s1_agent:cp_ready -> Number32_s1_burst_adapter:source0_ready
	wire   [19:0] number32_s1_burst_adapter_source0_channel;                            // Number32_s1_burst_adapter:source0_channel -> Number32_s1_agent:cp_channel
	wire          number32_s1_burst_adapter_source0_startofpacket;                      // Number32_s1_burst_adapter:source0_startofpacket -> Number32_s1_agent:cp_startofpacket
	wire          number32_s1_burst_adapter_source0_endofpacket;                        // Number32_s1_burst_adapter:source0_endofpacket -> Number32_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                // cmd_mux_005:src_valid -> O_temperature_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_005_src_data;                                                 // cmd_mux_005:src_data -> O_temperature_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                // O_temperature_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [19:0] cmd_mux_005_src_channel;                                              // cmd_mux_005:src_channel -> O_temperature_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                        // cmd_mux_005:src_startofpacket -> O_temperature_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                          // cmd_mux_005:src_endofpacket -> O_temperature_s1_burst_adapter:sink0_endofpacket
	wire          o_temperature_s1_burst_adapter_source0_valid;                         // O_temperature_s1_burst_adapter:source0_valid -> O_temperature_s1_agent:cp_valid
	wire  [119:0] o_temperature_s1_burst_adapter_source0_data;                          // O_temperature_s1_burst_adapter:source0_data -> O_temperature_s1_agent:cp_data
	wire          o_temperature_s1_burst_adapter_source0_ready;                         // O_temperature_s1_agent:cp_ready -> O_temperature_s1_burst_adapter:source0_ready
	wire   [19:0] o_temperature_s1_burst_adapter_source0_channel;                       // O_temperature_s1_burst_adapter:source0_channel -> O_temperature_s1_agent:cp_channel
	wire          o_temperature_s1_burst_adapter_source0_startofpacket;                 // O_temperature_s1_burst_adapter:source0_startofpacket -> O_temperature_s1_agent:cp_startofpacket
	wire          o_temperature_s1_burst_adapter_source0_endofpacket;                   // O_temperature_s1_burst_adapter:source0_endofpacket -> O_temperature_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                // cmd_mux_006:src_valid -> O_pw_forward_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_006_src_data;                                                 // cmd_mux_006:src_data -> O_pw_forward_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                // O_pw_forward_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [19:0] cmd_mux_006_src_channel;                                              // cmd_mux_006:src_channel -> O_pw_forward_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                        // cmd_mux_006:src_startofpacket -> O_pw_forward_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                          // cmd_mux_006:src_endofpacket -> O_pw_forward_s1_burst_adapter:sink0_endofpacket
	wire          o_pw_forward_s1_burst_adapter_source0_valid;                          // O_pw_forward_s1_burst_adapter:source0_valid -> O_pw_forward_s1_agent:cp_valid
	wire  [119:0] o_pw_forward_s1_burst_adapter_source0_data;                           // O_pw_forward_s1_burst_adapter:source0_data -> O_pw_forward_s1_agent:cp_data
	wire          o_pw_forward_s1_burst_adapter_source0_ready;                          // O_pw_forward_s1_agent:cp_ready -> O_pw_forward_s1_burst_adapter:source0_ready
	wire   [19:0] o_pw_forward_s1_burst_adapter_source0_channel;                        // O_pw_forward_s1_burst_adapter:source0_channel -> O_pw_forward_s1_agent:cp_channel
	wire          o_pw_forward_s1_burst_adapter_source0_startofpacket;                  // O_pw_forward_s1_burst_adapter:source0_startofpacket -> O_pw_forward_s1_agent:cp_startofpacket
	wire          o_pw_forward_s1_burst_adapter_source0_endofpacket;                    // O_pw_forward_s1_burst_adapter:source0_endofpacket -> O_pw_forward_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                // cmd_mux_007:src_valid -> O_pw_reversed_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_007_src_data;                                                 // cmd_mux_007:src_data -> O_pw_reversed_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                // O_pw_reversed_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [19:0] cmd_mux_007_src_channel;                                              // cmd_mux_007:src_channel -> O_pw_reversed_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                        // cmd_mux_007:src_startofpacket -> O_pw_reversed_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                          // cmd_mux_007:src_endofpacket -> O_pw_reversed_s1_burst_adapter:sink0_endofpacket
	wire          o_pw_reversed_s1_burst_adapter_source0_valid;                         // O_pw_reversed_s1_burst_adapter:source0_valid -> O_pw_reversed_s1_agent:cp_valid
	wire  [119:0] o_pw_reversed_s1_burst_adapter_source0_data;                          // O_pw_reversed_s1_burst_adapter:source0_data -> O_pw_reversed_s1_agent:cp_data
	wire          o_pw_reversed_s1_burst_adapter_source0_ready;                         // O_pw_reversed_s1_agent:cp_ready -> O_pw_reversed_s1_burst_adapter:source0_ready
	wire   [19:0] o_pw_reversed_s1_burst_adapter_source0_channel;                       // O_pw_reversed_s1_burst_adapter:source0_channel -> O_pw_reversed_s1_agent:cp_channel
	wire          o_pw_reversed_s1_burst_adapter_source0_startofpacket;                 // O_pw_reversed_s1_burst_adapter:source0_startofpacket -> O_pw_reversed_s1_agent:cp_startofpacket
	wire          o_pw_reversed_s1_burst_adapter_source0_endofpacket;                   // O_pw_reversed_s1_burst_adapter:source0_endofpacket -> O_pw_reversed_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                // cmd_mux_008:src_valid -> O_temperature2_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_008_src_data;                                                 // cmd_mux_008:src_data -> O_temperature2_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                // O_temperature2_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [19:0] cmd_mux_008_src_channel;                                              // cmd_mux_008:src_channel -> O_temperature2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                        // cmd_mux_008:src_startofpacket -> O_temperature2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                          // cmd_mux_008:src_endofpacket -> O_temperature2_s1_burst_adapter:sink0_endofpacket
	wire          o_temperature2_s1_burst_adapter_source0_valid;                        // O_temperature2_s1_burst_adapter:source0_valid -> O_temperature2_s1_agent:cp_valid
	wire  [119:0] o_temperature2_s1_burst_adapter_source0_data;                         // O_temperature2_s1_burst_adapter:source0_data -> O_temperature2_s1_agent:cp_data
	wire          o_temperature2_s1_burst_adapter_source0_ready;                        // O_temperature2_s1_agent:cp_ready -> O_temperature2_s1_burst_adapter:source0_ready
	wire   [19:0] o_temperature2_s1_burst_adapter_source0_channel;                      // O_temperature2_s1_burst_adapter:source0_channel -> O_temperature2_s1_agent:cp_channel
	wire          o_temperature2_s1_burst_adapter_source0_startofpacket;                // O_temperature2_s1_burst_adapter:source0_startofpacket -> O_temperature2_s1_agent:cp_startofpacket
	wire          o_temperature2_s1_burst_adapter_source0_endofpacket;                  // O_temperature2_s1_burst_adapter:source0_endofpacket -> O_temperature2_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                // cmd_mux_009:src_valid -> rf_on_off_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_009_src_data;                                                 // cmd_mux_009:src_data -> rf_on_off_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                // rf_on_off_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [19:0] cmd_mux_009_src_channel;                                              // cmd_mux_009:src_channel -> rf_on_off_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                        // cmd_mux_009:src_startofpacket -> rf_on_off_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                          // cmd_mux_009:src_endofpacket -> rf_on_off_s1_burst_adapter:sink0_endofpacket
	wire          rf_on_off_s1_burst_adapter_source0_valid;                             // rf_on_off_s1_burst_adapter:source0_valid -> rf_on_off_s1_agent:cp_valid
	wire  [119:0] rf_on_off_s1_burst_adapter_source0_data;                              // rf_on_off_s1_burst_adapter:source0_data -> rf_on_off_s1_agent:cp_data
	wire          rf_on_off_s1_burst_adapter_source0_ready;                             // rf_on_off_s1_agent:cp_ready -> rf_on_off_s1_burst_adapter:source0_ready
	wire   [19:0] rf_on_off_s1_burst_adapter_source0_channel;                           // rf_on_off_s1_burst_adapter:source0_channel -> rf_on_off_s1_agent:cp_channel
	wire          rf_on_off_s1_burst_adapter_source0_startofpacket;                     // rf_on_off_s1_burst_adapter:source0_startofpacket -> rf_on_off_s1_agent:cp_startofpacket
	wire          rf_on_off_s1_burst_adapter_source0_endofpacket;                       // rf_on_off_s1_burst_adapter:source0_endofpacket -> rf_on_off_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                // cmd_mux_010:src_valid -> command_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_010_src_data;                                                 // cmd_mux_010:src_data -> command_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                // command_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [19:0] cmd_mux_010_src_channel;                                              // cmd_mux_010:src_channel -> command_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                        // cmd_mux_010:src_startofpacket -> command_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                          // cmd_mux_010:src_endofpacket -> command_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          command_from_hps_s1_burst_adapter_source0_valid;                      // command_from_hps_s1_burst_adapter:source0_valid -> command_from_hps_s1_agent:cp_valid
	wire  [119:0] command_from_hps_s1_burst_adapter_source0_data;                       // command_from_hps_s1_burst_adapter:source0_data -> command_from_hps_s1_agent:cp_data
	wire          command_from_hps_s1_burst_adapter_source0_ready;                      // command_from_hps_s1_agent:cp_ready -> command_from_hps_s1_burst_adapter:source0_ready
	wire   [19:0] command_from_hps_s1_burst_adapter_source0_channel;                    // command_from_hps_s1_burst_adapter:source0_channel -> command_from_hps_s1_agent:cp_channel
	wire          command_from_hps_s1_burst_adapter_source0_startofpacket;              // command_from_hps_s1_burst_adapter:source0_startofpacket -> command_from_hps_s1_agent:cp_startofpacket
	wire          command_from_hps_s1_burst_adapter_source0_endofpacket;                // command_from_hps_s1_burst_adapter:source0_endofpacket -> command_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                // cmd_mux_011:src_valid -> SP_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_011_src_data;                                                 // cmd_mux_011:src_data -> SP_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                // SP_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [19:0] cmd_mux_011_src_channel;                                              // cmd_mux_011:src_channel -> SP_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                        // cmd_mux_011:src_startofpacket -> SP_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                          // cmd_mux_011:src_endofpacket -> SP_s1_burst_adapter:sink0_endofpacket
	wire          sp_s1_burst_adapter_source0_valid;                                    // SP_s1_burst_adapter:source0_valid -> SP_s1_agent:cp_valid
	wire  [119:0] sp_s1_burst_adapter_source0_data;                                     // SP_s1_burst_adapter:source0_data -> SP_s1_agent:cp_data
	wire          sp_s1_burst_adapter_source0_ready;                                    // SP_s1_agent:cp_ready -> SP_s1_burst_adapter:source0_ready
	wire   [19:0] sp_s1_burst_adapter_source0_channel;                                  // SP_s1_burst_adapter:source0_channel -> SP_s1_agent:cp_channel
	wire          sp_s1_burst_adapter_source0_startofpacket;                            // SP_s1_burst_adapter:source0_startofpacket -> SP_s1_agent:cp_startofpacket
	wire          sp_s1_burst_adapter_source0_endofpacket;                              // SP_s1_burst_adapter:source0_endofpacket -> SP_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                // cmd_mux_012:src_valid -> thermocouples_sel_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_012_src_data;                                                 // cmd_mux_012:src_data -> thermocouples_sel_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                // thermocouples_sel_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [19:0] cmd_mux_012_src_channel;                                              // cmd_mux_012:src_channel -> thermocouples_sel_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                        // cmd_mux_012:src_startofpacket -> thermocouples_sel_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                          // cmd_mux_012:src_endofpacket -> thermocouples_sel_s1_burst_adapter:sink0_endofpacket
	wire          thermocouples_sel_s1_burst_adapter_source0_valid;                     // thermocouples_sel_s1_burst_adapter:source0_valid -> thermocouples_sel_s1_agent:cp_valid
	wire  [119:0] thermocouples_sel_s1_burst_adapter_source0_data;                      // thermocouples_sel_s1_burst_adapter:source0_data -> thermocouples_sel_s1_agent:cp_data
	wire          thermocouples_sel_s1_burst_adapter_source0_ready;                     // thermocouples_sel_s1_agent:cp_ready -> thermocouples_sel_s1_burst_adapter:source0_ready
	wire   [19:0] thermocouples_sel_s1_burst_adapter_source0_channel;                   // thermocouples_sel_s1_burst_adapter:source0_channel -> thermocouples_sel_s1_agent:cp_channel
	wire          thermocouples_sel_s1_burst_adapter_source0_startofpacket;             // thermocouples_sel_s1_burst_adapter:source0_startofpacket -> thermocouples_sel_s1_agent:cp_startofpacket
	wire          thermocouples_sel_s1_burst_adapter_source0_endofpacket;               // thermocouples_sel_s1_burst_adapter:source0_endofpacket -> thermocouples_sel_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                // cmd_mux_013:src_valid -> electrode_voltage_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_013_src_data;                                                 // cmd_mux_013:src_data -> electrode_voltage_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                // electrode_voltage_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [19:0] cmd_mux_013_src_channel;                                              // cmd_mux_013:src_channel -> electrode_voltage_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                        // cmd_mux_013:src_startofpacket -> electrode_voltage_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                          // cmd_mux_013:src_endofpacket -> electrode_voltage_s1_burst_adapter:sink0_endofpacket
	wire          electrode_voltage_s1_burst_adapter_source0_valid;                     // electrode_voltage_s1_burst_adapter:source0_valid -> electrode_voltage_s1_agent:cp_valid
	wire  [119:0] electrode_voltage_s1_burst_adapter_source0_data;                      // electrode_voltage_s1_burst_adapter:source0_data -> electrode_voltage_s1_agent:cp_data
	wire          electrode_voltage_s1_burst_adapter_source0_ready;                     // electrode_voltage_s1_agent:cp_ready -> electrode_voltage_s1_burst_adapter:source0_ready
	wire   [19:0] electrode_voltage_s1_burst_adapter_source0_channel;                   // electrode_voltage_s1_burst_adapter:source0_channel -> electrode_voltage_s1_agent:cp_channel
	wire          electrode_voltage_s1_burst_adapter_source0_startofpacket;             // electrode_voltage_s1_burst_adapter:source0_startofpacket -> electrode_voltage_s1_agent:cp_startofpacket
	wire          electrode_voltage_s1_burst_adapter_source0_endofpacket;               // electrode_voltage_s1_burst_adapter:source0_endofpacket -> electrode_voltage_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                // cmd_mux_014:src_valid -> iteration_number_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_014_src_data;                                                 // cmd_mux_014:src_data -> iteration_number_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                // iteration_number_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [19:0] cmd_mux_014_src_channel;                                              // cmd_mux_014:src_channel -> iteration_number_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                        // cmd_mux_014:src_startofpacket -> iteration_number_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                          // cmd_mux_014:src_endofpacket -> iteration_number_s1_burst_adapter:sink0_endofpacket
	wire          iteration_number_s1_burst_adapter_source0_valid;                      // iteration_number_s1_burst_adapter:source0_valid -> iteration_number_s1_agent:cp_valid
	wire  [119:0] iteration_number_s1_burst_adapter_source0_data;                       // iteration_number_s1_burst_adapter:source0_data -> iteration_number_s1_agent:cp_data
	wire          iteration_number_s1_burst_adapter_source0_ready;                      // iteration_number_s1_agent:cp_ready -> iteration_number_s1_burst_adapter:source0_ready
	wire   [19:0] iteration_number_s1_burst_adapter_source0_channel;                    // iteration_number_s1_burst_adapter:source0_channel -> iteration_number_s1_agent:cp_channel
	wire          iteration_number_s1_burst_adapter_source0_startofpacket;              // iteration_number_s1_burst_adapter:source0_startofpacket -> iteration_number_s1_agent:cp_startofpacket
	wire          iteration_number_s1_burst_adapter_source0_endofpacket;                // iteration_number_s1_burst_adapter:source0_endofpacket -> iteration_number_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                // cmd_mux_015:src_valid -> finish_fdtd_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_015_src_data;                                                 // cmd_mux_015:src_data -> finish_fdtd_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                // finish_fdtd_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [19:0] cmd_mux_015_src_channel;                                              // cmd_mux_015:src_channel -> finish_fdtd_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                        // cmd_mux_015:src_startofpacket -> finish_fdtd_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                          // cmd_mux_015:src_endofpacket -> finish_fdtd_s1_burst_adapter:sink0_endofpacket
	wire          finish_fdtd_s1_burst_adapter_source0_valid;                           // finish_fdtd_s1_burst_adapter:source0_valid -> finish_fdtd_s1_agent:cp_valid
	wire  [119:0] finish_fdtd_s1_burst_adapter_source0_data;                            // finish_fdtd_s1_burst_adapter:source0_data -> finish_fdtd_s1_agent:cp_data
	wire          finish_fdtd_s1_burst_adapter_source0_ready;                           // finish_fdtd_s1_agent:cp_ready -> finish_fdtd_s1_burst_adapter:source0_ready
	wire   [19:0] finish_fdtd_s1_burst_adapter_source0_channel;                         // finish_fdtd_s1_burst_adapter:source0_channel -> finish_fdtd_s1_agent:cp_channel
	wire          finish_fdtd_s1_burst_adapter_source0_startofpacket;                   // finish_fdtd_s1_burst_adapter:source0_startofpacket -> finish_fdtd_s1_agent:cp_startofpacket
	wire          finish_fdtd_s1_burst_adapter_source0_endofpacket;                     // finish_fdtd_s1_burst_adapter:source0_endofpacket -> finish_fdtd_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                // cmd_mux_016:src_valid -> module_csr_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_016_src_data;                                                 // cmd_mux_016:src_data -> module_csr_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                // module_csr_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [19:0] cmd_mux_016_src_channel;                                              // cmd_mux_016:src_channel -> module_csr_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                        // cmd_mux_016:src_startofpacket -> module_csr_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                          // cmd_mux_016:src_endofpacket -> module_csr_s1_burst_adapter:sink0_endofpacket
	wire          module_csr_s1_burst_adapter_source0_valid;                            // module_csr_s1_burst_adapter:source0_valid -> module_csr_s1_agent:cp_valid
	wire  [119:0] module_csr_s1_burst_adapter_source0_data;                             // module_csr_s1_burst_adapter:source0_data -> module_csr_s1_agent:cp_data
	wire          module_csr_s1_burst_adapter_source0_ready;                            // module_csr_s1_agent:cp_ready -> module_csr_s1_burst_adapter:source0_ready
	wire   [19:0] module_csr_s1_burst_adapter_source0_channel;                          // module_csr_s1_burst_adapter:source0_channel -> module_csr_s1_agent:cp_channel
	wire          module_csr_s1_burst_adapter_source0_startofpacket;                    // module_csr_s1_burst_adapter:source0_startofpacket -> module_csr_s1_agent:cp_startofpacket
	wire          module_csr_s1_burst_adapter_source0_endofpacket;                      // module_csr_s1_burst_adapter:source0_endofpacket -> module_csr_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                // cmd_mux_017:src_valid -> power_unlock_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_017_src_data;                                                 // cmd_mux_017:src_data -> power_unlock_s1_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                // power_unlock_s1_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [19:0] cmd_mux_017_src_channel;                                              // cmd_mux_017:src_channel -> power_unlock_s1_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                        // cmd_mux_017:src_startofpacket -> power_unlock_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                          // cmd_mux_017:src_endofpacket -> power_unlock_s1_burst_adapter:sink0_endofpacket
	wire          power_unlock_s1_burst_adapter_source0_valid;                          // power_unlock_s1_burst_adapter:source0_valid -> power_unlock_s1_agent:cp_valid
	wire  [119:0] power_unlock_s1_burst_adapter_source0_data;                           // power_unlock_s1_burst_adapter:source0_data -> power_unlock_s1_agent:cp_data
	wire          power_unlock_s1_burst_adapter_source0_ready;                          // power_unlock_s1_agent:cp_ready -> power_unlock_s1_burst_adapter:source0_ready
	wire   [19:0] power_unlock_s1_burst_adapter_source0_channel;                        // power_unlock_s1_burst_adapter:source0_channel -> power_unlock_s1_agent:cp_channel
	wire          power_unlock_s1_burst_adapter_source0_startofpacket;                  // power_unlock_s1_burst_adapter:source0_startofpacket -> power_unlock_s1_agent:cp_startofpacket
	wire          power_unlock_s1_burst_adapter_source0_endofpacket;                    // power_unlock_s1_burst_adapter:source0_endofpacket -> power_unlock_s1_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                // cmd_mux_018:src_valid -> HW_reset_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_018_src_data;                                                 // cmd_mux_018:src_data -> HW_reset_s1_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                // HW_reset_s1_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [19:0] cmd_mux_018_src_channel;                                              // cmd_mux_018:src_channel -> HW_reset_s1_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                        // cmd_mux_018:src_startofpacket -> HW_reset_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                          // cmd_mux_018:src_endofpacket -> HW_reset_s1_burst_adapter:sink0_endofpacket
	wire          hw_reset_s1_burst_adapter_source0_valid;                              // HW_reset_s1_burst_adapter:source0_valid -> HW_reset_s1_agent:cp_valid
	wire  [119:0] hw_reset_s1_burst_adapter_source0_data;                               // HW_reset_s1_burst_adapter:source0_data -> HW_reset_s1_agent:cp_data
	wire          hw_reset_s1_burst_adapter_source0_ready;                              // HW_reset_s1_agent:cp_ready -> HW_reset_s1_burst_adapter:source0_ready
	wire   [19:0] hw_reset_s1_burst_adapter_source0_channel;                            // HW_reset_s1_burst_adapter:source0_channel -> HW_reset_s1_agent:cp_channel
	wire          hw_reset_s1_burst_adapter_source0_startofpacket;                      // HW_reset_s1_burst_adapter:source0_startofpacket -> HW_reset_s1_agent:cp_startofpacket
	wire          hw_reset_s1_burst_adapter_source0_endofpacket;                        // HW_reset_s1_burst_adapter:source0_endofpacket -> HW_reset_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                // cmd_mux_019:src_valid -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_019_src_data;                                                 // cmd_mux_019:src_data -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                // Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [19:0] cmd_mux_019_src_channel;                                              // cmd_mux_019:src_channel -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                        // cmd_mux_019:src_startofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                          // cmd_mux_019:src_endofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_endofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_valid;         // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_valid -> Pixel_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [119:0] pixel_dma_addr_translation_slave_burst_adapter_source0_data;          // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_data -> Pixel_DMA_Addr_Translation_slave_agent:cp_data
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_ready;         // Pixel_DMA_Addr_Translation_slave_agent:cp_ready -> Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_ready
	wire   [19:0] pixel_dma_addr_translation_slave_burst_adapter_source0_channel;       // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_channel -> Pixel_DMA_Addr_Translation_slave_agent:cp_channel
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket; // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket;   // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [119:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [19:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [19:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [119:0] cmd_demux_src2_data;                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [19:0] cmd_demux_src2_channel;                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [119:0] cmd_demux_src3_data;                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [19:0] cmd_demux_src3_channel;                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                 // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [119:0] cmd_demux_src4_data;                                                  // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [19:0] cmd_demux_src4_channel;                                               // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                         // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                           // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                 // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [119:0] cmd_demux_src5_data;                                                  // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [19:0] cmd_demux_src5_channel;                                               // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                         // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                           // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                 // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [119:0] cmd_demux_src6_data;                                                  // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                 // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [19:0] cmd_demux_src6_channel;                                               // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                         // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                           // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                 // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [119:0] cmd_demux_src7_data;                                                  // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                 // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [19:0] cmd_demux_src7_channel;                                               // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                         // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                           // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                 // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [119:0] cmd_demux_src8_data;                                                  // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                 // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [19:0] cmd_demux_src8_channel;                                               // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                         // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                           // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                 // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [119:0] cmd_demux_src9_data;                                                  // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                 // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [19:0] cmd_demux_src9_channel;                                               // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                         // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                           // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [119:0] cmd_demux_src10_data;                                                 // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [19:0] cmd_demux_src10_channel;                                              // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                        // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                          // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [119:0] cmd_demux_src11_data;                                                 // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [19:0] cmd_demux_src11_channel;                                              // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                        // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                          // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [119:0] cmd_demux_src12_data;                                                 // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [19:0] cmd_demux_src12_channel;                                              // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                        // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                          // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [119:0] cmd_demux_src13_data;                                                 // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [19:0] cmd_demux_src13_channel;                                              // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                        // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                          // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [119:0] cmd_demux_src14_data;                                                 // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [19:0] cmd_demux_src14_channel;                                              // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                        // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                          // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [119:0] cmd_demux_src15_data;                                                 // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [19:0] cmd_demux_src15_channel;                                              // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                        // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                          // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [119:0] cmd_demux_src16_data;                                                 // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [19:0] cmd_demux_src16_channel;                                              // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                        // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                          // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [119:0] cmd_demux_src17_data;                                                 // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [19:0] cmd_demux_src17_channel;                                              // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                        // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                          // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [119:0] cmd_demux_src18_data;                                                 // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [19:0] cmd_demux_src18_channel;                                              // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                        // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                          // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [119:0] cmd_demux_src19_data;                                                 // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [19:0] cmd_demux_src19_channel;                                              // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                        // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                          // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                             // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [119:0] cmd_demux_001_src0_data;                                              // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                             // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [19:0] cmd_demux_001_src0_channel;                                           // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                     // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                       // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                             // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [119:0] cmd_demux_001_src1_data;                                              // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                             // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [19:0] cmd_demux_001_src1_channel;                                           // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                             // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [119:0] cmd_demux_001_src2_data;                                              // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [19:0] cmd_demux_001_src2_channel;                                           // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                     // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                       // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                             // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [119:0] cmd_demux_001_src3_data;                                              // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                             // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [19:0] cmd_demux_001_src3_channel;                                           // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                     // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                       // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                             // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [119:0] cmd_demux_001_src4_data;                                              // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                             // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [19:0] cmd_demux_001_src4_channel;                                           // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                     // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                       // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                             // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [119:0] cmd_demux_001_src5_data;                                              // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                             // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [19:0] cmd_demux_001_src5_channel;                                           // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                     // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                       // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                             // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [119:0] cmd_demux_001_src6_data;                                              // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                             // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [19:0] cmd_demux_001_src6_channel;                                           // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                     // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                       // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                             // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [119:0] cmd_demux_001_src7_data;                                              // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                             // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [19:0] cmd_demux_001_src7_channel;                                           // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                     // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                       // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                             // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [119:0] cmd_demux_001_src8_data;                                              // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                             // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [19:0] cmd_demux_001_src8_channel;                                           // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                     // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                       // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                             // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [119:0] cmd_demux_001_src9_data;                                              // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                             // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [19:0] cmd_demux_001_src9_channel;                                           // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                     // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                       // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                            // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [119:0] cmd_demux_001_src10_data;                                             // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                            // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [19:0] cmd_demux_001_src10_channel;                                          // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                    // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                      // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                            // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [119:0] cmd_demux_001_src11_data;                                             // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                            // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [19:0] cmd_demux_001_src11_channel;                                          // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                    // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                      // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                            // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [119:0] cmd_demux_001_src12_data;                                             // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                            // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [19:0] cmd_demux_001_src12_channel;                                          // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                    // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                      // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                            // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [119:0] cmd_demux_001_src13_data;                                             // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src13_ready;                                            // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire   [19:0] cmd_demux_001_src13_channel;                                          // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                                    // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                      // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                            // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire  [119:0] cmd_demux_001_src14_data;                                             // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src14_ready;                                            // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire   [19:0] cmd_demux_001_src14_channel;                                          // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src14_startofpacket;                                    // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                      // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                            // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire  [119:0] cmd_demux_001_src15_data;                                             // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src15_ready;                                            // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire   [19:0] cmd_demux_001_src15_channel;                                          // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src15_startofpacket;                                    // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                      // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                            // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire  [119:0] cmd_demux_001_src16_data;                                             // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src16_ready;                                            // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire   [19:0] cmd_demux_001_src16_channel;                                          // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src16_startofpacket;                                    // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                      // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                            // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire  [119:0] cmd_demux_001_src17_data;                                             // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src17_ready;                                            // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire   [19:0] cmd_demux_001_src17_channel;                                          // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src17_startofpacket;                                    // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                      // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                            // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire  [119:0] cmd_demux_001_src18_data;                                             // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src18_ready;                                            // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire   [19:0] cmd_demux_001_src18_channel;                                          // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src18_startofpacket;                                    // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                      // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                            // cmd_demux_001:src19_valid -> cmd_mux_019:sink1_valid
	wire  [119:0] cmd_demux_001_src19_data;                                             // cmd_demux_001:src19_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src19_ready;                                            // cmd_mux_019:sink1_ready -> cmd_demux_001:src19_ready
	wire   [19:0] cmd_demux_001_src19_channel;                                          // cmd_demux_001:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src19_startofpacket;                                    // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                      // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [119:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [19:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                 // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [119:0] rsp_demux_src1_data;                                                  // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                 // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [19:0] rsp_demux_src1_channel;                                               // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                         // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                           // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [119:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [19:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                             // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [119:0] rsp_demux_001_src1_data;                                              // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                             // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [19:0] rsp_demux_001_src1_channel;                                           // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                     // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                       // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [119:0] rsp_demux_002_src0_data;                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [19:0] rsp_demux_002_src0_channel;                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [119:0] rsp_demux_002_src1_data;                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                             // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [19:0] rsp_demux_002_src1_channel;                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [119:0] rsp_demux_003_src0_data;                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [19:0] rsp_demux_003_src0_channel;                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                             // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [119:0] rsp_demux_003_src1_data;                                              // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                             // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [19:0] rsp_demux_003_src1_channel;                                           // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                     // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                       // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                             // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [119:0] rsp_demux_004_src0_data;                                              // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                             // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [19:0] rsp_demux_004_src0_channel;                                           // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                             // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [119:0] rsp_demux_004_src1_data;                                              // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                             // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [19:0] rsp_demux_004_src1_channel;                                           // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                     // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                       // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                             // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [119:0] rsp_demux_005_src0_data;                                              // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                             // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [19:0] rsp_demux_005_src0_channel;                                           // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                             // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [119:0] rsp_demux_005_src1_data;                                              // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                             // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [19:0] rsp_demux_005_src1_channel;                                           // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                     // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                       // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                             // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [119:0] rsp_demux_006_src0_data;                                              // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                             // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [19:0] rsp_demux_006_src0_channel;                                           // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                     // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                       // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                             // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [119:0] rsp_demux_006_src1_data;                                              // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                             // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [19:0] rsp_demux_006_src1_channel;                                           // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                     // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                       // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                             // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [119:0] rsp_demux_007_src0_data;                                              // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                             // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [19:0] rsp_demux_007_src0_channel;                                           // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                     // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                       // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                             // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [119:0] rsp_demux_007_src1_data;                                              // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                             // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [19:0] rsp_demux_007_src1_channel;                                           // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                     // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                       // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                             // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [119:0] rsp_demux_008_src0_data;                                              // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                             // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [19:0] rsp_demux_008_src0_channel;                                           // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                     // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                       // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                             // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [119:0] rsp_demux_008_src1_data;                                              // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                             // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [19:0] rsp_demux_008_src1_channel;                                           // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                     // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                       // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                             // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [119:0] rsp_demux_009_src0_data;                                              // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                             // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [19:0] rsp_demux_009_src0_channel;                                           // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                     // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                       // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                             // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [119:0] rsp_demux_009_src1_data;                                              // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                             // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [19:0] rsp_demux_009_src1_channel;                                           // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                     // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                       // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                             // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [119:0] rsp_demux_010_src0_data;                                              // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                             // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [19:0] rsp_demux_010_src0_channel;                                           // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                     // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                       // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                             // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [119:0] rsp_demux_010_src1_data;                                              // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                             // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [19:0] rsp_demux_010_src1_channel;                                           // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                     // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                       // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                             // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [119:0] rsp_demux_011_src0_data;                                              // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                             // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [19:0] rsp_demux_011_src0_channel;                                           // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                     // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                       // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                             // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [119:0] rsp_demux_011_src1_data;                                              // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                             // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [19:0] rsp_demux_011_src1_channel;                                           // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                     // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                       // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                             // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [119:0] rsp_demux_012_src0_data;                                              // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                             // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [19:0] rsp_demux_012_src0_channel;                                           // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                     // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                       // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                             // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [119:0] rsp_demux_012_src1_data;                                              // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                             // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [19:0] rsp_demux_012_src1_channel;                                           // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                     // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                       // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                             // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [119:0] rsp_demux_013_src0_data;                                              // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                             // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [19:0] rsp_demux_013_src0_channel;                                           // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                     // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                       // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                             // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [119:0] rsp_demux_013_src1_data;                                              // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src1_ready;                                             // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire   [19:0] rsp_demux_013_src1_channel;                                           // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                                     // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                       // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                             // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [119:0] rsp_demux_014_src0_data;                                              // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                             // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [19:0] rsp_demux_014_src0_channel;                                           // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                     // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                       // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                             // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire  [119:0] rsp_demux_014_src1_data;                                              // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src1_ready;                                             // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire   [19:0] rsp_demux_014_src1_channel;                                           // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src1_startofpacket;                                     // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                       // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                             // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [119:0] rsp_demux_015_src0_data;                                              // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                             // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [19:0] rsp_demux_015_src0_channel;                                           // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                     // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                       // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                             // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire  [119:0] rsp_demux_015_src1_data;                                              // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src1_ready;                                             // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire   [19:0] rsp_demux_015_src1_channel;                                           // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src1_startofpacket;                                     // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                       // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                             // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [119:0] rsp_demux_016_src0_data;                                              // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                             // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [19:0] rsp_demux_016_src0_channel;                                           // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                     // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                       // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                             // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire  [119:0] rsp_demux_016_src1_data;                                              // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src1_ready;                                             // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire   [19:0] rsp_demux_016_src1_channel;                                           // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src1_startofpacket;                                     // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                       // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                             // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [119:0] rsp_demux_017_src0_data;                                              // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                             // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [19:0] rsp_demux_017_src0_channel;                                           // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                     // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                       // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                             // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire  [119:0] rsp_demux_017_src1_data;                                              // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src1_ready;                                             // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire   [19:0] rsp_demux_017_src1_channel;                                           // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src1_startofpacket;                                     // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                       // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                             // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [119:0] rsp_demux_018_src0_data;                                              // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                             // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [19:0] rsp_demux_018_src0_channel;                                           // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                     // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                       // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                             // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire  [119:0] rsp_demux_018_src1_data;                                              // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src1_ready;                                             // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire   [19:0] rsp_demux_018_src1_channel;                                           // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src1_startofpacket;                                     // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                       // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                             // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [119:0] rsp_demux_019_src0_data;                                              // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                             // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [19:0] rsp_demux_019_src0_channel;                                           // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                     // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                       // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                             // rsp_demux_019:src1_valid -> rsp_mux_001:sink19_valid
	wire  [119:0] rsp_demux_019_src1_data;                                              // rsp_demux_019:src1_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src1_ready;                                             // rsp_mux_001:sink19_ready -> rsp_demux_019:src1_ready
	wire   [19:0] rsp_demux_019_src1_channel;                                           // rsp_demux_019:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src1_startofpacket;                                     // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                       // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire   [19:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [19:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          vga_subsystem_char_control_slave_agent_rdata_fifo_out_valid;          // VGA_subsystem_char_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] vga_subsystem_char_control_slave_agent_rdata_fifo_out_data;           // VGA_subsystem_char_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          vga_subsystem_char_control_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> VGA_subsystem_char_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                        // avalon_st_adapter:out_0_valid -> VGA_subsystem_char_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                         // avalon_st_adapter:out_0_data -> VGA_subsystem_char_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                        // VGA_subsystem_char_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                        // avalon_st_adapter:out_0_error -> VGA_subsystem_char_control_slave_agent:rdata_fifo_sink_error
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_valid;                   // fifo_HPS_to_FPGA_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_data;                    // fifo_HPS_to_FPGA_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_001:in_0_ready -> fifo_HPS_to_FPGA_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                    // avalon_st_adapter_001:out_0_valid -> fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                     // avalon_st_adapter_001:out_0_data -> fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                    // fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                    // avalon_st_adapter_001:out_0_error -> fifo_HPS_to_FPGA_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_valid;                  // fifo_FPGA_to_HPS_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_data;                   // fifo_FPGA_to_HPS_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_002:in_0_ready -> fifo_FPGA_to_HPS_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                    // avalon_st_adapter_002:out_0_valid -> fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                     // avalon_st_adapter_002:out_0_data -> fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                    // fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                    // avalon_st_adapter_002:out_0_error -> fifo_FPGA_to_HPS_out_csr_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_out_valid;                                     // SW_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_out_data;                                      // SW_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sw_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_003:in_0_ready -> SW_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                    // avalon_st_adapter_003:out_0_valid -> SW_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                     // avalon_st_adapter_003:out_0_data -> SW_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                    // SW_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                    // avalon_st_adapter_003:out_0_error -> SW_s1_agent:rdata_fifo_sink_error
	wire          number32_s1_agent_rdata_fifo_out_valid;                               // Number32_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] number32_s1_agent_rdata_fifo_out_data;                                // Number32_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          number32_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_004:in_0_ready -> Number32_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                    // avalon_st_adapter_004:out_0_valid -> Number32_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                     // avalon_st_adapter_004:out_0_data -> Number32_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                    // Number32_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                    // avalon_st_adapter_004:out_0_error -> Number32_s1_agent:rdata_fifo_sink_error
	wire          o_temperature_s1_agent_rdata_fifo_out_valid;                          // O_temperature_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] o_temperature_s1_agent_rdata_fifo_out_data;                           // O_temperature_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          o_temperature_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_005:in_0_ready -> O_temperature_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                    // avalon_st_adapter_005:out_0_valid -> O_temperature_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                     // avalon_st_adapter_005:out_0_data -> O_temperature_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                    // O_temperature_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                    // avalon_st_adapter_005:out_0_error -> O_temperature_s1_agent:rdata_fifo_sink_error
	wire          o_pw_forward_s1_agent_rdata_fifo_out_valid;                           // O_pw_forward_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] o_pw_forward_s1_agent_rdata_fifo_out_data;                            // O_pw_forward_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          o_pw_forward_s1_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_006:in_0_ready -> O_pw_forward_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                    // avalon_st_adapter_006:out_0_valid -> O_pw_forward_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                     // avalon_st_adapter_006:out_0_data -> O_pw_forward_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                    // O_pw_forward_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                    // avalon_st_adapter_006:out_0_error -> O_pw_forward_s1_agent:rdata_fifo_sink_error
	wire          o_pw_reversed_s1_agent_rdata_fifo_out_valid;                          // O_pw_reversed_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] o_pw_reversed_s1_agent_rdata_fifo_out_data;                           // O_pw_reversed_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          o_pw_reversed_s1_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_007:in_0_ready -> O_pw_reversed_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                    // avalon_st_adapter_007:out_0_valid -> O_pw_reversed_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                     // avalon_st_adapter_007:out_0_data -> O_pw_reversed_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                    // O_pw_reversed_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                    // avalon_st_adapter_007:out_0_error -> O_pw_reversed_s1_agent:rdata_fifo_sink_error
	wire          o_temperature2_s1_agent_rdata_fifo_out_valid;                         // O_temperature2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] o_temperature2_s1_agent_rdata_fifo_out_data;                          // O_temperature2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          o_temperature2_s1_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_008:in_0_ready -> O_temperature2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                    // avalon_st_adapter_008:out_0_valid -> O_temperature2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                     // avalon_st_adapter_008:out_0_data -> O_temperature2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                    // O_temperature2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                    // avalon_st_adapter_008:out_0_error -> O_temperature2_s1_agent:rdata_fifo_sink_error
	wire          rf_on_off_s1_agent_rdata_fifo_out_valid;                              // rf_on_off_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] rf_on_off_s1_agent_rdata_fifo_out_data;                               // rf_on_off_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          rf_on_off_s1_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_009:in_0_ready -> rf_on_off_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                    // avalon_st_adapter_009:out_0_valid -> rf_on_off_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                     // avalon_st_adapter_009:out_0_data -> rf_on_off_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                    // rf_on_off_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                    // avalon_st_adapter_009:out_0_error -> rf_on_off_s1_agent:rdata_fifo_sink_error
	wire          command_from_hps_s1_agent_rdata_fifo_out_valid;                       // command_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] command_from_hps_s1_agent_rdata_fifo_out_data;                        // command_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          command_from_hps_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_010:in_0_ready -> command_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                    // avalon_st_adapter_010:out_0_valid -> command_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                     // avalon_st_adapter_010:out_0_data -> command_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                    // command_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                    // avalon_st_adapter_010:out_0_error -> command_from_hps_s1_agent:rdata_fifo_sink_error
	wire          sp_s1_agent_rdata_fifo_out_valid;                                     // SP_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] sp_s1_agent_rdata_fifo_out_data;                                      // SP_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          sp_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_011:in_0_ready -> SP_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                    // avalon_st_adapter_011:out_0_valid -> SP_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                     // avalon_st_adapter_011:out_0_data -> SP_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                    // SP_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                    // avalon_st_adapter_011:out_0_error -> SP_s1_agent:rdata_fifo_sink_error
	wire          thermocouples_sel_s1_agent_rdata_fifo_out_valid;                      // thermocouples_sel_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] thermocouples_sel_s1_agent_rdata_fifo_out_data;                       // thermocouples_sel_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          thermocouples_sel_s1_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_012:in_0_ready -> thermocouples_sel_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                    // avalon_st_adapter_012:out_0_valid -> thermocouples_sel_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                     // avalon_st_adapter_012:out_0_data -> thermocouples_sel_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                    // thermocouples_sel_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                    // avalon_st_adapter_012:out_0_error -> thermocouples_sel_s1_agent:rdata_fifo_sink_error
	wire          electrode_voltage_s1_agent_rdata_fifo_out_valid;                      // electrode_voltage_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] electrode_voltage_s1_agent_rdata_fifo_out_data;                       // electrode_voltage_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          electrode_voltage_s1_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_013:in_0_ready -> electrode_voltage_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                    // avalon_st_adapter_013:out_0_valid -> electrode_voltage_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                     // avalon_st_adapter_013:out_0_data -> electrode_voltage_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                    // electrode_voltage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                    // avalon_st_adapter_013:out_0_error -> electrode_voltage_s1_agent:rdata_fifo_sink_error
	wire          iteration_number_s1_agent_rdata_fifo_out_valid;                       // iteration_number_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] iteration_number_s1_agent_rdata_fifo_out_data;                        // iteration_number_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          iteration_number_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_014:in_0_ready -> iteration_number_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                    // avalon_st_adapter_014:out_0_valid -> iteration_number_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                     // avalon_st_adapter_014:out_0_data -> iteration_number_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                    // iteration_number_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                    // avalon_st_adapter_014:out_0_error -> iteration_number_s1_agent:rdata_fifo_sink_error
	wire          finish_fdtd_s1_agent_rdata_fifo_out_valid;                            // finish_fdtd_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] finish_fdtd_s1_agent_rdata_fifo_out_data;                             // finish_fdtd_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          finish_fdtd_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_015:in_0_ready -> finish_fdtd_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                    // avalon_st_adapter_015:out_0_valid -> finish_fdtd_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                     // avalon_st_adapter_015:out_0_data -> finish_fdtd_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                    // finish_fdtd_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                    // avalon_st_adapter_015:out_0_error -> finish_fdtd_s1_agent:rdata_fifo_sink_error
	wire          module_csr_s1_agent_rdata_fifo_out_valid;                             // module_csr_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] module_csr_s1_agent_rdata_fifo_out_data;                              // module_csr_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          module_csr_s1_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_016:in_0_ready -> module_csr_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                    // avalon_st_adapter_016:out_0_valid -> module_csr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                     // avalon_st_adapter_016:out_0_data -> module_csr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                    // module_csr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                    // avalon_st_adapter_016:out_0_error -> module_csr_s1_agent:rdata_fifo_sink_error
	wire          power_unlock_s1_agent_rdata_fifo_out_valid;                           // power_unlock_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] power_unlock_s1_agent_rdata_fifo_out_data;                            // power_unlock_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          power_unlock_s1_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_017:in_0_ready -> power_unlock_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                    // avalon_st_adapter_017:out_0_valid -> power_unlock_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                     // avalon_st_adapter_017:out_0_data -> power_unlock_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                    // power_unlock_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                    // avalon_st_adapter_017:out_0_error -> power_unlock_s1_agent:rdata_fifo_sink_error
	wire          hw_reset_s1_agent_rdata_fifo_out_valid;                               // HW_reset_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] hw_reset_s1_agent_rdata_fifo_out_data;                                // HW_reset_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          hw_reset_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_018:in_0_ready -> HW_reset_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                    // avalon_st_adapter_018:out_0_valid -> HW_reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                     // avalon_st_adapter_018:out_0_data -> HW_reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                    // HW_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                    // avalon_st_adapter_018:out_0_error -> HW_reset_s1_agent:rdata_fifo_sink_error
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid;          // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data;           // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_019:in_0_ready -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                    // avalon_st_adapter_019:out_0_valid -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                     // avalon_st_adapter_019:out_0_data -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                    // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                    // avalon_st_adapter_019:out_0_error -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_control_slave_translator (
		.clk                    (clocks_sys_clk_clk),                                      //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (vga_subsystem_char_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_char_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_char_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_char_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_char_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_char_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_char_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_char_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_subsystem_char_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_subsystem_char_control_slave_write),                  //                         .write
		.av_read                (VGA_subsystem_char_control_slave_read),                   //                         .read
		.av_readdata            (VGA_subsystem_char_control_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_subsystem_char_control_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_subsystem_char_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (VGA_subsystem_char_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_hps_to_fpga_in_csr_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_hps_to_fpga_in_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_hps_to_fpga_in_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (fifo_hps_to_fpga_in_csr_agent_m0_read),                 //                         .read
		.uav_write              (fifo_hps_to_fpga_in_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (fifo_hps_to_fpga_in_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (fifo_hps_to_fpga_in_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (fifo_hps_to_fpga_in_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (fifo_hps_to_fpga_in_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (fifo_hps_to_fpga_in_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (fifo_hps_to_fpga_in_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (fifo_hps_to_fpga_in_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (fifo_HPS_to_FPGA_in_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (fifo_HPS_to_FPGA_in_csr_write),                         //                         .write
		.av_read                (fifo_HPS_to_FPGA_in_csr_read),                          //                         .read
		.av_readdata            (fifo_HPS_to_FPGA_in_csr_readdata),                      //                         .readdata
		.av_writedata           (fifo_HPS_to_FPGA_in_csr_writedata),                     //                         .writedata
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_fpga_to_hps_out_csr_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_fpga_to_hps_out_csr_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_fpga_to_hps_out_csr_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (fifo_fpga_to_hps_out_csr_agent_m0_read),                //                         .read
		.uav_write              (fifo_fpga_to_hps_out_csr_agent_m0_write),               //                         .write
		.uav_waitrequest        (fifo_fpga_to_hps_out_csr_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (fifo_fpga_to_hps_out_csr_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (fifo_fpga_to_hps_out_csr_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (fifo_fpga_to_hps_out_csr_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (fifo_fpga_to_hps_out_csr_agent_m0_writedata),           //                         .writedata
		.uav_lock               (fifo_fpga_to_hps_out_csr_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (fifo_fpga_to_hps_out_csr_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (fifo_FPGA_to_HPS_out_csr_address),                      //      avalon_anti_slave_0.address
		.av_write               (fifo_FPGA_to_HPS_out_csr_write),                        //                         .write
		.av_read                (fifo_FPGA_to_HPS_out_csr_read),                         //                         .read
		.av_readdata            (fifo_FPGA_to_HPS_out_csr_readdata),                     //                         .readdata
		.av_writedata           (fifo_FPGA_to_HPS_out_csr_writedata),                    //                         .writedata
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                                   //                         .read
		.uav_write              (sw_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (SW_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (SW_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) number32_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (number32_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (number32_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (number32_s1_agent_m0_read),                             //                         .read
		.uav_write              (number32_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (number32_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (number32_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (number32_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (number32_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (number32_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (number32_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (number32_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (Number32_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata            (Number32_s1_readdata),                                  //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) o_temperature_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (o_temperature_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (o_temperature_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (o_temperature_s1_agent_m0_read),                        //                         .read
		.uav_write              (o_temperature_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (o_temperature_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (o_temperature_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (o_temperature_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (o_temperature_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (o_temperature_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (o_temperature_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (o_temperature_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (O_temperature_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (O_temperature_s1_readdata),                             //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) o_pw_forward_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (o_pw_forward_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (o_pw_forward_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (o_pw_forward_s1_agent_m0_read),                         //                         .read
		.uav_write              (o_pw_forward_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (o_pw_forward_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (o_pw_forward_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (o_pw_forward_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (o_pw_forward_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (o_pw_forward_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (o_pw_forward_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (o_pw_forward_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (O_pw_forward_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (O_pw_forward_s1_readdata),                              //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) o_pw_reversed_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (o_pw_reversed_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (o_pw_reversed_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (o_pw_reversed_s1_agent_m0_read),                        //                         .read
		.uav_write              (o_pw_reversed_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (o_pw_reversed_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (o_pw_reversed_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (o_pw_reversed_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (o_pw_reversed_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (o_pw_reversed_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (o_pw_reversed_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (o_pw_reversed_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (O_pw_reversed_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (O_pw_reversed_s1_readdata),                             //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) o_temperature2_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (o_temperature2_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (o_temperature2_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (o_temperature2_s1_agent_m0_read),                       //                         .read
		.uav_write              (o_temperature2_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (o_temperature2_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (o_temperature2_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (o_temperature2_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (o_temperature2_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (o_temperature2_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (o_temperature2_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (o_temperature2_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (O_temperature2_s1_address),                             //      avalon_anti_slave_0.address
		.av_readdata            (O_temperature2_s1_readdata),                            //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rf_on_off_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rf_on_off_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (rf_on_off_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (rf_on_off_s1_agent_m0_read),                            //                         .read
		.uav_write              (rf_on_off_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (rf_on_off_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (rf_on_off_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (rf_on_off_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (rf_on_off_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (rf_on_off_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (rf_on_off_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (rf_on_off_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (rf_on_off_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (rf_on_off_s1_write),                                    //                         .write
		.av_readdata            (rf_on_off_s1_readdata),                                 //                         .readdata
		.av_writedata           (rf_on_off_s1_writedata),                                //                         .writedata
		.av_chipselect          (rf_on_off_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) command_from_hps_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (command_from_hps_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (command_from_hps_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (command_from_hps_s1_agent_m0_read),                     //                         .read
		.uav_write              (command_from_hps_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (command_from_hps_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (command_from_hps_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (command_from_hps_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (command_from_hps_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (command_from_hps_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (command_from_hps_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (command_from_hps_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (command_from_hps_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (command_from_hps_s1_write),                             //                         .write
		.av_readdata            (command_from_hps_s1_readdata),                          //                         .readdata
		.av_writedata           (command_from_hps_s1_writedata),                         //                         .writedata
		.av_chipselect          (command_from_hps_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sp_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sp_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (sp_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (sp_s1_agent_m0_read),                                   //                         .read
		.uav_write              (sp_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (sp_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (sp_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (sp_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (sp_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (sp_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (sp_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (sp_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (SP_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (SP_s1_write),                                           //                         .write
		.av_readdata            (SP_s1_readdata),                                        //                         .readdata
		.av_writedata           (SP_s1_writedata),                                       //                         .writedata
		.av_chipselect          (SP_s1_chipselect),                                      //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) thermocouples_sel_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (thermocouples_sel_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (thermocouples_sel_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (thermocouples_sel_s1_agent_m0_read),                    //                         .read
		.uav_write              (thermocouples_sel_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (thermocouples_sel_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (thermocouples_sel_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (thermocouples_sel_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (thermocouples_sel_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (thermocouples_sel_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (thermocouples_sel_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (thermocouples_sel_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (thermocouples_sel_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (thermocouples_sel_s1_write),                            //                         .write
		.av_readdata            (thermocouples_sel_s1_readdata),                         //                         .readdata
		.av_writedata           (thermocouples_sel_s1_writedata),                        //                         .writedata
		.av_chipselect          (thermocouples_sel_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) electrode_voltage_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (electrode_voltage_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (electrode_voltage_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (electrode_voltage_s1_agent_m0_read),                    //                         .read
		.uav_write              (electrode_voltage_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (electrode_voltage_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (electrode_voltage_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (electrode_voltage_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (electrode_voltage_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (electrode_voltage_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (electrode_voltage_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (electrode_voltage_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (electrode_voltage_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (electrode_voltage_s1_write),                            //                         .write
		.av_readdata            (electrode_voltage_s1_readdata),                         //                         .readdata
		.av_writedata           (electrode_voltage_s1_writedata),                        //                         .writedata
		.av_chipselect          (electrode_voltage_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) iteration_number_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (iteration_number_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (iteration_number_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (iteration_number_s1_agent_m0_read),                     //                         .read
		.uav_write              (iteration_number_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (iteration_number_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (iteration_number_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (iteration_number_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (iteration_number_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (iteration_number_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (iteration_number_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (iteration_number_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (iteration_number_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (iteration_number_s1_write),                             //                         .write
		.av_readdata            (iteration_number_s1_readdata),                          //                         .readdata
		.av_writedata           (iteration_number_s1_writedata),                         //                         .writedata
		.av_chipselect          (iteration_number_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) finish_fdtd_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (finish_fdtd_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (finish_fdtd_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (finish_fdtd_s1_agent_m0_read),                          //                         .read
		.uav_write              (finish_fdtd_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (finish_fdtd_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (finish_fdtd_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (finish_fdtd_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (finish_fdtd_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (finish_fdtd_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (finish_fdtd_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (finish_fdtd_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (finish_fdtd_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (finish_fdtd_s1_readdata),                               //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) module_csr_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (module_csr_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (module_csr_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (module_csr_s1_agent_m0_read),                           //                         .read
		.uav_write              (module_csr_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (module_csr_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (module_csr_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (module_csr_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (module_csr_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (module_csr_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (module_csr_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (module_csr_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (module_csr_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (module_csr_s1_readdata),                                //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) power_unlock_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (power_unlock_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (power_unlock_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (power_unlock_s1_agent_m0_read),                         //                         .read
		.uav_write              (power_unlock_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (power_unlock_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (power_unlock_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (power_unlock_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (power_unlock_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (power_unlock_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (power_unlock_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (power_unlock_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (power_unlock_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (power_unlock_s1_write),                                 //                         .write
		.av_readdata            (power_unlock_s1_readdata),                              //                         .readdata
		.av_writedata           (power_unlock_s1_writedata),                             //                         .writedata
		.av_chipselect          (power_unlock_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hw_reset_s1_translator (
		.clk                    (clocks_sys_clk_clk),                                    //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hw_reset_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (hw_reset_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (hw_reset_s1_agent_m0_read),                             //                         .read
		.uav_write              (hw_reset_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (hw_reset_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (hw_reset_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (hw_reset_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (hw_reset_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (hw_reset_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (hw_reset_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (hw_reset_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (HW_reset_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (HW_reset_s1_write),                                     //                         .write
		.av_readdata            (HW_reset_s1_readdata),                                  //                         .readdata
		.av_writedata           (HW_reset_s1_writedata),                                 //                         .writedata
		.av_chipselect          (HW_reset_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_dma_addr_translation_slave_translator (
		.clk                    (clocks_sys_clk_clk),                                      //                      clk.clk
		.reset                  (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (pixel_dma_addr_translation_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_dma_addr_translation_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_dma_addr_translation_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_dma_addr_translation_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_dma_addr_translation_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_dma_addr_translation_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_dma_addr_translation_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_dma_addr_translation_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_dma_addr_translation_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_DMA_Addr_Translation_slave_write),                  //                         .write
		.av_read                (Pixel_DMA_Addr_Translation_slave_read),                   //                         .read
		.av_readdata            (Pixel_DMA_Addr_Translation_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_DMA_Addr_Translation_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_DMA_Addr_Translation_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Pixel_DMA_Addr_Translation_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clocks_sys_clk_clk),                                                   //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_control_slave_agent (
		.clk                     (clocks_sys_clk_clk),                                                   //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (vga_subsystem_char_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_subsystem_char_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_subsystem_char_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_subsystem_char_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_subsystem_char_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_subsystem_char_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_subsystem_char_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_subsystem_char_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_subsystem_char_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_subsystem_char_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_subsystem_char_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_subsystem_char_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_subsystem_char_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_subsystem_char_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_subsystem_char_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_subsystem_char_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_subsystem_char_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_subsystem_char_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_subsystem_char_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_subsystem_char_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_subsystem_char_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_subsystem_char_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_subsystem_char_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_control_slave_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                                //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (vga_subsystem_char_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_control_slave_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                          //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (vga_subsystem_char_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_hps_to_fpga_in_csr_agent (
		.clk                     (clocks_sys_clk_clk),                                          //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fifo_hps_to_fpga_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_hps_to_fpga_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_hps_to_fpga_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_hps_to_fpga_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_hps_to_fpga_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_hps_to_fpga_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_hps_to_fpga_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_hps_to_fpga_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_hps_to_fpga_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_hps_to_fpga_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_hps_to_fpga_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_hps_to_fpga_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_hps_to_fpga_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_hps_to_fpga_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_hps_to_fpga_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_hps_to_fpga_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_hps_to_fpga_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_hps_to_fpga_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_hps_to_fpga_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_hps_to_fpga_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_hps_to_fpga_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_hps_to_fpga_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_hps_to_fpga_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_hps_to_fpga_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_hps_to_fpga_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_hps_to_fpga_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_hps_to_fpga_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_hps_to_fpga_in_csr_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                       //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (fifo_hps_to_fpga_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_hps_to_fpga_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_hps_to_fpga_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_hps_to_fpga_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_hps_to_fpga_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_hps_to_fpga_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_hps_to_fpga_in_csr_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_fpga_to_hps_out_csr_agent (
		.clk                     (clocks_sys_clk_clk),                                           //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_fpga_to_hps_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_fpga_to_hps_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_fpga_to_hps_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_fpga_to_hps_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_fpga_to_hps_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_fpga_to_hps_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_fpga_to_hps_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_fpga_to_hps_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_fpga_to_hps_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_fpga_to_hps_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_fpga_to_hps_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_fpga_to_hps_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_fpga_to_hps_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_fpga_to_hps_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_fpga_to_hps_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_fpga_to_hps_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_fpga_to_hps_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_fpga_to_hps_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_fpga_to_hps_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_fpga_to_hps_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_fpga_to_hps_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_fpga_to_hps_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_fpga_to_hps_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_fpga_to_hps_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_fpga_to_hps_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_fpga_to_hps_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_fpga_to_hps_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_fpga_to_hps_out_csr_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                        //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (fifo_fpga_to_hps_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_fpga_to_hps_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_fpga_to_hps_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_fpga_to_hps_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_fpga_to_hps_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_fpga_to_hps_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_fpga_to_hps_out_csr_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (sw_s1_burst_adapter_source0_ready),                     //              cp.ready
		.cp_valid                (sw_s1_burst_adapter_source0_valid),                     //                .valid
		.cp_data                 (sw_s1_burst_adapter_source0_data),                      //                .data
		.cp_startofpacket        (sw_s1_burst_adapter_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (sw_s1_burst_adapter_source0_endofpacket),               //                .endofpacket
		.cp_channel              (sw_s1_burst_adapter_source0_channel),                   //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rdata_fifo_src_data),                       //        in.data
		.in_valid          (sw_s1_agent_rdata_fifo_src_valid),                      //          .valid
		.in_ready          (sw_s1_agent_rdata_fifo_src_ready),                      //          .ready
		.out_data          (sw_s1_agent_rdata_fifo_out_data),                       //       out.data
		.out_valid         (sw_s1_agent_rdata_fifo_out_valid),                      //          .valid
		.out_ready         (sw_s1_agent_rdata_fifo_out_ready),                      //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) number32_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (number32_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (number32_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (number32_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (number32_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (number32_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (number32_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (number32_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (number32_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (number32_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (number32_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (number32_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (number32_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (number32_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (number32_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (number32_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (number32_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (number32_s1_burst_adapter_source0_ready),               //              cp.ready
		.cp_valid                (number32_s1_burst_adapter_source0_valid),               //                .valid
		.cp_data                 (number32_s1_burst_adapter_source0_data),                //                .data
		.cp_startofpacket        (number32_s1_burst_adapter_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (number32_s1_burst_adapter_source0_endofpacket),         //                .endofpacket
		.cp_channel              (number32_s1_burst_adapter_source0_channel),             //                .channel
		.rf_sink_ready           (number32_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (number32_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (number32_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (number32_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (number32_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (number32_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (number32_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (number32_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (number32_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (number32_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (number32_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (number32_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (number32_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) number32_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (number32_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (number32_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (number32_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (number32_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (number32_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (number32_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (number32_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (number32_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (number32_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (number32_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) number32_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (number32_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (number32_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (number32_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (number32_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (number32_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (number32_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) o_temperature_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (o_temperature_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (o_temperature_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (o_temperature_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (o_temperature_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (o_temperature_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (o_temperature_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (o_temperature_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (o_temperature_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (o_temperature_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (o_temperature_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (o_temperature_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (o_temperature_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (o_temperature_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (o_temperature_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (o_temperature_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (o_temperature_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (o_temperature_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (o_temperature_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (o_temperature_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (o_temperature_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (o_temperature_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (o_temperature_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (o_temperature_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (o_temperature_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (o_temperature_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (o_temperature_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (o_temperature_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (o_temperature_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (o_temperature_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (o_temperature_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (o_temperature_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (o_temperature_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (o_temperature_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (o_temperature_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (o_temperature_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_temperature_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_temperature_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (o_temperature_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (o_temperature_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (o_temperature_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (o_temperature_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (o_temperature_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (o_temperature_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (o_temperature_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (o_temperature_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (o_temperature_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_temperature_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_temperature_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (o_temperature_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (o_temperature_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (o_temperature_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (o_temperature_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (o_temperature_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) o_pw_forward_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (o_pw_forward_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (o_pw_forward_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (o_pw_forward_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (o_pw_forward_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (o_pw_forward_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (o_pw_forward_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (o_pw_forward_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (o_pw_forward_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (o_pw_forward_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (o_pw_forward_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (o_pw_forward_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (o_pw_forward_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (o_pw_forward_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (o_pw_forward_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (o_pw_forward_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (o_pw_forward_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (o_pw_forward_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (o_pw_forward_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (o_pw_forward_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (o_pw_forward_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (o_pw_forward_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (o_pw_forward_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (o_pw_forward_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (o_pw_forward_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (o_pw_forward_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (o_pw_forward_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (o_pw_forward_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (o_pw_forward_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (o_pw_forward_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (o_pw_forward_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (o_pw_forward_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (o_pw_forward_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (o_pw_forward_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (o_pw_forward_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (o_pw_forward_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_pw_forward_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_pw_forward_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (o_pw_forward_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (o_pw_forward_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (o_pw_forward_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (o_pw_forward_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (o_pw_forward_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (o_pw_forward_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (o_pw_forward_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (o_pw_forward_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (o_pw_forward_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_pw_forward_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_pw_forward_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (o_pw_forward_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (o_pw_forward_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (o_pw_forward_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (o_pw_forward_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (o_pw_forward_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) o_pw_reversed_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (o_pw_reversed_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (o_pw_reversed_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (o_pw_reversed_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (o_pw_reversed_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (o_pw_reversed_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (o_pw_reversed_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (o_pw_reversed_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (o_pw_reversed_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (o_pw_reversed_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (o_pw_reversed_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (o_pw_reversed_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (o_pw_reversed_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (o_pw_reversed_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (o_pw_reversed_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (o_pw_reversed_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (o_pw_reversed_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (o_pw_reversed_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (o_pw_reversed_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (o_pw_reversed_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (o_pw_reversed_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (o_pw_reversed_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (o_pw_reversed_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (o_pw_reversed_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (o_pw_reversed_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (o_pw_reversed_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (o_pw_reversed_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (o_pw_reversed_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (o_pw_reversed_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (o_pw_reversed_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (o_pw_reversed_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (o_pw_reversed_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (o_pw_reversed_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (o_pw_reversed_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (o_pw_reversed_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (o_pw_reversed_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_pw_reversed_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_pw_reversed_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (o_pw_reversed_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (o_pw_reversed_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (o_pw_reversed_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (o_pw_reversed_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (o_pw_reversed_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (o_pw_reversed_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (o_pw_reversed_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (o_pw_reversed_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (o_pw_reversed_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_pw_reversed_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_pw_reversed_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (o_pw_reversed_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (o_pw_reversed_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (o_pw_reversed_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (o_pw_reversed_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (o_pw_reversed_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) o_temperature2_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (o_temperature2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (o_temperature2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (o_temperature2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (o_temperature2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (o_temperature2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (o_temperature2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (o_temperature2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (o_temperature2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (o_temperature2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (o_temperature2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (o_temperature2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (o_temperature2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (o_temperature2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (o_temperature2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (o_temperature2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (o_temperature2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (o_temperature2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (o_temperature2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (o_temperature2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (o_temperature2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (o_temperature2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (o_temperature2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (o_temperature2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (o_temperature2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (o_temperature2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (o_temperature2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (o_temperature2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (o_temperature2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (o_temperature2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (o_temperature2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (o_temperature2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (o_temperature2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (o_temperature2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (o_temperature2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (o_temperature2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_temperature2_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_temperature2_s1_agent_rf_source_data),                //        in.data
		.in_valid          (o_temperature2_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (o_temperature2_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (o_temperature2_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (o_temperature2_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (o_temperature2_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (o_temperature2_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (o_temperature2_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (o_temperature2_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (o_temperature2_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) o_temperature2_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (o_temperature2_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (o_temperature2_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (o_temperature2_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (o_temperature2_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (o_temperature2_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (o_temperature2_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rf_on_off_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rf_on_off_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (rf_on_off_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (rf_on_off_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (rf_on_off_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (rf_on_off_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (rf_on_off_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (rf_on_off_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (rf_on_off_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (rf_on_off_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (rf_on_off_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (rf_on_off_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (rf_on_off_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (rf_on_off_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (rf_on_off_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (rf_on_off_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (rf_on_off_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (rf_on_off_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (rf_on_off_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (rf_on_off_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (rf_on_off_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (rf_on_off_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (rf_on_off_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (rf_on_off_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (rf_on_off_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (rf_on_off_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (rf_on_off_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (rf_on_off_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (rf_on_off_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (rf_on_off_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (rf_on_off_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (rf_on_off_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (rf_on_off_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (rf_on_off_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rf_on_off_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (rf_on_off_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rf_on_off_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rf_on_off_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (rf_on_off_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (rf_on_off_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (rf_on_off_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (rf_on_off_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (rf_on_off_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (rf_on_off_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (rf_on_off_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (rf_on_off_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (rf_on_off_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rf_on_off_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rf_on_off_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (rf_on_off_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (rf_on_off_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (rf_on_off_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (rf_on_off_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (rf_on_off_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) command_from_hps_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                      //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (command_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (command_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (command_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (command_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (command_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (command_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (command_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (command_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (command_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (command_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (command_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (command_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (command_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (command_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (command_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (command_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (command_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (command_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (command_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (command_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (command_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (command_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (command_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (command_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (command_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (command_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (command_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (command_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (command_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (command_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (command_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (command_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (command_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (command_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (command_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) command_from_hps_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (command_from_hps_s1_agent_rf_source_data),              //        in.data
		.in_valid          (command_from_hps_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (command_from_hps_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (command_from_hps_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (command_from_hps_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (command_from_hps_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (command_from_hps_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (command_from_hps_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (command_from_hps_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (command_from_hps_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) command_from_hps_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (command_from_hps_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (command_from_hps_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (command_from_hps_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (command_from_hps_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (command_from_hps_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (command_from_hps_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sp_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sp_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (sp_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (sp_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (sp_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (sp_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (sp_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (sp_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (sp_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (sp_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (sp_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (sp_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (sp_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (sp_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (sp_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (sp_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (sp_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (sp_s1_burst_adapter_source0_ready),                     //              cp.ready
		.cp_valid                (sp_s1_burst_adapter_source0_valid),                     //                .valid
		.cp_data                 (sp_s1_burst_adapter_source0_data),                      //                .data
		.cp_startofpacket        (sp_s1_burst_adapter_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (sp_s1_burst_adapter_source0_endofpacket),               //                .endofpacket
		.cp_channel              (sp_s1_burst_adapter_source0_channel),                   //                .channel
		.rf_sink_ready           (sp_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (sp_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (sp_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (sp_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (sp_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (sp_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (sp_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (sp_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (sp_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (sp_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (sp_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sp_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (sp_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sp_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sp_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (sp_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (sp_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (sp_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (sp_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (sp_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (sp_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (sp_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (sp_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (sp_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sp_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sp_s1_agent_rdata_fifo_src_data),                       //        in.data
		.in_valid          (sp_s1_agent_rdata_fifo_src_valid),                      //          .valid
		.in_ready          (sp_s1_agent_rdata_fifo_src_ready),                      //          .ready
		.out_data          (sp_s1_agent_rdata_fifo_out_data),                       //       out.data
		.out_valid         (sp_s1_agent_rdata_fifo_out_valid),                      //          .valid
		.out_ready         (sp_s1_agent_rdata_fifo_out_ready),                      //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) thermocouples_sel_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                       //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (thermocouples_sel_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (thermocouples_sel_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (thermocouples_sel_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (thermocouples_sel_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (thermocouples_sel_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (thermocouples_sel_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (thermocouples_sel_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (thermocouples_sel_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (thermocouples_sel_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (thermocouples_sel_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (thermocouples_sel_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (thermocouples_sel_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (thermocouples_sel_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (thermocouples_sel_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (thermocouples_sel_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (thermocouples_sel_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (thermocouples_sel_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (thermocouples_sel_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (thermocouples_sel_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (thermocouples_sel_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (thermocouples_sel_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (thermocouples_sel_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (thermocouples_sel_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (thermocouples_sel_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (thermocouples_sel_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (thermocouples_sel_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (thermocouples_sel_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (thermocouples_sel_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (thermocouples_sel_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (thermocouples_sel_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (thermocouples_sel_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (thermocouples_sel_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (thermocouples_sel_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (thermocouples_sel_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (thermocouples_sel_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) thermocouples_sel_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (thermocouples_sel_s1_agent_rf_source_data),             //        in.data
		.in_valid          (thermocouples_sel_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (thermocouples_sel_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (thermocouples_sel_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (thermocouples_sel_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (thermocouples_sel_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (thermocouples_sel_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (thermocouples_sel_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (thermocouples_sel_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (thermocouples_sel_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) thermocouples_sel_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (thermocouples_sel_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (thermocouples_sel_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (thermocouples_sel_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (thermocouples_sel_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (thermocouples_sel_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (thermocouples_sel_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) electrode_voltage_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                       //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (electrode_voltage_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (electrode_voltage_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (electrode_voltage_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (electrode_voltage_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (electrode_voltage_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (electrode_voltage_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (electrode_voltage_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (electrode_voltage_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (electrode_voltage_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (electrode_voltage_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (electrode_voltage_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (electrode_voltage_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (electrode_voltage_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (electrode_voltage_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (electrode_voltage_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (electrode_voltage_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (electrode_voltage_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (electrode_voltage_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (electrode_voltage_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (electrode_voltage_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (electrode_voltage_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (electrode_voltage_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (electrode_voltage_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (electrode_voltage_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (electrode_voltage_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (electrode_voltage_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (electrode_voltage_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (electrode_voltage_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (electrode_voltage_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (electrode_voltage_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (electrode_voltage_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (electrode_voltage_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (electrode_voltage_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (electrode_voltage_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (electrode_voltage_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) electrode_voltage_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (electrode_voltage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (electrode_voltage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (electrode_voltage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (electrode_voltage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (electrode_voltage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (electrode_voltage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (electrode_voltage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (electrode_voltage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (electrode_voltage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (electrode_voltage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) electrode_voltage_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (electrode_voltage_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (electrode_voltage_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (electrode_voltage_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (electrode_voltage_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (electrode_voltage_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (electrode_voltage_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) iteration_number_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                      //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (iteration_number_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (iteration_number_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (iteration_number_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (iteration_number_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (iteration_number_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (iteration_number_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (iteration_number_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (iteration_number_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (iteration_number_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (iteration_number_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (iteration_number_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (iteration_number_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (iteration_number_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (iteration_number_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (iteration_number_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (iteration_number_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (iteration_number_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (iteration_number_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (iteration_number_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (iteration_number_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (iteration_number_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (iteration_number_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (iteration_number_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (iteration_number_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (iteration_number_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (iteration_number_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (iteration_number_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (iteration_number_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (iteration_number_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (iteration_number_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (iteration_number_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (iteration_number_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (iteration_number_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (iteration_number_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (iteration_number_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) iteration_number_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (iteration_number_s1_agent_rf_source_data),              //        in.data
		.in_valid          (iteration_number_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (iteration_number_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (iteration_number_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (iteration_number_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (iteration_number_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (iteration_number_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (iteration_number_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (iteration_number_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (iteration_number_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) iteration_number_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (iteration_number_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (iteration_number_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (iteration_number_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (iteration_number_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (iteration_number_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (iteration_number_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) finish_fdtd_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (finish_fdtd_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (finish_fdtd_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (finish_fdtd_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (finish_fdtd_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (finish_fdtd_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (finish_fdtd_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (finish_fdtd_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (finish_fdtd_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (finish_fdtd_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (finish_fdtd_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (finish_fdtd_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (finish_fdtd_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (finish_fdtd_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (finish_fdtd_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (finish_fdtd_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (finish_fdtd_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (finish_fdtd_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (finish_fdtd_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (finish_fdtd_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (finish_fdtd_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (finish_fdtd_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (finish_fdtd_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (finish_fdtd_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (finish_fdtd_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (finish_fdtd_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (finish_fdtd_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (finish_fdtd_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (finish_fdtd_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (finish_fdtd_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (finish_fdtd_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (finish_fdtd_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (finish_fdtd_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (finish_fdtd_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (finish_fdtd_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (finish_fdtd_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) finish_fdtd_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (finish_fdtd_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (finish_fdtd_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (finish_fdtd_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (finish_fdtd_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (finish_fdtd_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (finish_fdtd_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (finish_fdtd_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (finish_fdtd_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (finish_fdtd_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (finish_fdtd_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) finish_fdtd_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (finish_fdtd_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (finish_fdtd_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (finish_fdtd_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (finish_fdtd_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (finish_fdtd_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (finish_fdtd_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) module_csr_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (module_csr_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (module_csr_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (module_csr_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (module_csr_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (module_csr_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (module_csr_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (module_csr_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (module_csr_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (module_csr_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (module_csr_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (module_csr_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (module_csr_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (module_csr_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (module_csr_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (module_csr_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (module_csr_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (module_csr_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (module_csr_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (module_csr_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (module_csr_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (module_csr_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (module_csr_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (module_csr_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (module_csr_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (module_csr_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (module_csr_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (module_csr_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (module_csr_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (module_csr_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (module_csr_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (module_csr_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (module_csr_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (module_csr_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (module_csr_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (module_csr_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) module_csr_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (module_csr_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (module_csr_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (module_csr_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (module_csr_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (module_csr_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (module_csr_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (module_csr_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (module_csr_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (module_csr_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (module_csr_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) module_csr_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (module_csr_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (module_csr_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (module_csr_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (module_csr_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (module_csr_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (module_csr_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) power_unlock_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (power_unlock_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (power_unlock_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (power_unlock_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (power_unlock_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (power_unlock_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (power_unlock_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (power_unlock_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (power_unlock_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (power_unlock_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (power_unlock_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (power_unlock_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (power_unlock_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (power_unlock_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (power_unlock_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (power_unlock_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (power_unlock_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (power_unlock_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (power_unlock_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (power_unlock_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (power_unlock_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (power_unlock_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (power_unlock_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (power_unlock_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (power_unlock_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (power_unlock_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (power_unlock_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (power_unlock_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (power_unlock_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (power_unlock_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (power_unlock_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (power_unlock_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (power_unlock_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (power_unlock_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (power_unlock_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (power_unlock_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) power_unlock_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (power_unlock_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (power_unlock_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (power_unlock_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (power_unlock_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (power_unlock_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (power_unlock_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (power_unlock_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (power_unlock_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (power_unlock_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (power_unlock_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) power_unlock_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (power_unlock_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (power_unlock_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (power_unlock_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (power_unlock_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (power_unlock_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (power_unlock_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hw_reset_s1_agent (
		.clk                     (clocks_sys_clk_clk),                                    //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hw_reset_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (hw_reset_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (hw_reset_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (hw_reset_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (hw_reset_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (hw_reset_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (hw_reset_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (hw_reset_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (hw_reset_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (hw_reset_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (hw_reset_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (hw_reset_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (hw_reset_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (hw_reset_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (hw_reset_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (hw_reset_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (hw_reset_s1_burst_adapter_source0_ready),               //              cp.ready
		.cp_valid                (hw_reset_s1_burst_adapter_source0_valid),               //                .valid
		.cp_data                 (hw_reset_s1_burst_adapter_source0_data),                //                .data
		.cp_startofpacket        (hw_reset_s1_burst_adapter_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (hw_reset_s1_burst_adapter_source0_endofpacket),         //                .endofpacket
		.cp_channel              (hw_reset_s1_burst_adapter_source0_channel),             //                .channel
		.rf_sink_ready           (hw_reset_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (hw_reset_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (hw_reset_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (hw_reset_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (hw_reset_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (hw_reset_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (hw_reset_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (hw_reset_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (hw_reset_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (hw_reset_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (hw_reset_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hw_reset_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (hw_reset_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hw_reset_s1_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hw_reset_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (hw_reset_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (hw_reset_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (hw_reset_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (hw_reset_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (hw_reset_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (hw_reset_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (hw_reset_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (hw_reset_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (hw_reset_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hw_reset_s1_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                    //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hw_reset_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (hw_reset_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (hw_reset_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (hw_reset_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (hw_reset_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (hw_reset_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_dma_addr_translation_slave_agent (
		.clk                     (clocks_sys_clk_clk),                                                   //             clk.clk
		.reset                   (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (pixel_dma_addr_translation_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_dma_addr_translation_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_dma_addr_translation_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_dma_addr_translation_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_dma_addr_translation_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_dma_addr_translation_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_dma_addr_translation_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_dma_addr_translation_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_dma_addr_translation_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_dma_addr_translation_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_dma_addr_translation_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_dma_addr_translation_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_dma_addr_translation_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_dma_addr_translation_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_dma_addr_translation_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_dma_addr_translation_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_dma_addr_translation_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_dma_addr_translation_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_dma_addr_translation_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_dma_addr_translation_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (clocks_sys_clk_clk),                                                //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rdata_fifo (
		.clk               (clocks_sys_clk_clk),                                          //       clk.clk
		.reset             (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	nios2_mm_interconnect_2_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                                  //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	nios2_mm_interconnect_2_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                                  //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (vga_subsystem_char_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_char_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_char_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_char_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                      //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (fifo_hps_to_fpga_in_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (fifo_hps_to_fpga_in_csr_agent_rp_valid),                //          .valid
		.sink_data          (fifo_hps_to_fpga_in_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (fifo_hps_to_fpga_in_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (fifo_hps_to_fpga_in_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_004 (
		.sink_ready         (fifo_fpga_to_hps_out_csr_agent_rp_ready),               //      sink.ready
		.sink_valid         (fifo_fpga_to_hps_out_csr_agent_rp_valid),               //          .valid
		.sink_data          (fifo_fpga_to_hps_out_csr_agent_rp_data),                //          .data
		.sink_startofpacket (fifo_fpga_to_hps_out_csr_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (fifo_fpga_to_hps_out_csr_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_005 (
		.sink_ready         (sw_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (sw_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_006 (
		.sink_ready         (number32_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (number32_s1_agent_rp_valid),                            //          .valid
		.sink_data          (number32_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (number32_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (number32_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                  //       src.ready
		.src_valid          (router_006_src_valid),                                  //          .valid
		.src_data           (router_006_src_data),                                   //          .data
		.src_channel        (router_006_src_channel),                                //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_007 (
		.sink_ready         (o_temperature_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (o_temperature_s1_agent_rp_valid),                       //          .valid
		.sink_data          (o_temperature_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (o_temperature_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (o_temperature_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                  //       src.ready
		.src_valid          (router_007_src_valid),                                  //          .valid
		.src_data           (router_007_src_data),                                   //          .data
		.src_channel        (router_007_src_channel),                                //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_008 (
		.sink_ready         (o_pw_forward_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (o_pw_forward_s1_agent_rp_valid),                        //          .valid
		.sink_data          (o_pw_forward_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (o_pw_forward_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (o_pw_forward_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                  //       src.ready
		.src_valid          (router_008_src_valid),                                  //          .valid
		.src_data           (router_008_src_data),                                   //          .data
		.src_channel        (router_008_src_channel),                                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_009 (
		.sink_ready         (o_pw_reversed_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (o_pw_reversed_s1_agent_rp_valid),                       //          .valid
		.sink_data          (o_pw_reversed_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (o_pw_reversed_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (o_pw_reversed_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                  //       src.ready
		.src_valid          (router_009_src_valid),                                  //          .valid
		.src_data           (router_009_src_data),                                   //          .data
		.src_channel        (router_009_src_channel),                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_010 (
		.sink_ready         (o_temperature2_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (o_temperature2_s1_agent_rp_valid),                      //          .valid
		.sink_data          (o_temperature2_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (o_temperature2_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (o_temperature2_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                  //       src.ready
		.src_valid          (router_010_src_valid),                                  //          .valid
		.src_data           (router_010_src_data),                                   //          .data
		.src_channel        (router_010_src_channel),                                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_011 (
		.sink_ready         (rf_on_off_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (rf_on_off_s1_agent_rp_valid),                           //          .valid
		.sink_data          (rf_on_off_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (rf_on_off_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (rf_on_off_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                  //       src.ready
		.src_valid          (router_011_src_valid),                                  //          .valid
		.src_data           (router_011_src_data),                                   //          .data
		.src_channel        (router_011_src_channel),                                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_012 (
		.sink_ready         (command_from_hps_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (command_from_hps_s1_agent_rp_valid),                    //          .valid
		.sink_data          (command_from_hps_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (command_from_hps_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (command_from_hps_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                  //       src.ready
		.src_valid          (router_012_src_valid),                                  //          .valid
		.src_data           (router_012_src_data),                                   //          .data
		.src_channel        (router_012_src_channel),                                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_013 (
		.sink_ready         (sp_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (sp_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (sp_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (sp_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (sp_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                  //       src.ready
		.src_valid          (router_013_src_valid),                                  //          .valid
		.src_data           (router_013_src_data),                                   //          .data
		.src_channel        (router_013_src_channel),                                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_014 (
		.sink_ready         (thermocouples_sel_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (thermocouples_sel_s1_agent_rp_valid),                   //          .valid
		.sink_data          (thermocouples_sel_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (thermocouples_sel_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (thermocouples_sel_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                  //       src.ready
		.src_valid          (router_014_src_valid),                                  //          .valid
		.src_data           (router_014_src_data),                                   //          .data
		.src_channel        (router_014_src_channel),                                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_015 (
		.sink_ready         (electrode_voltage_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (electrode_voltage_s1_agent_rp_valid),                   //          .valid
		.sink_data          (electrode_voltage_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (electrode_voltage_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (electrode_voltage_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                  //       src.ready
		.src_valid          (router_015_src_valid),                                  //          .valid
		.src_data           (router_015_src_data),                                   //          .data
		.src_channel        (router_015_src_channel),                                //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_016 (
		.sink_ready         (iteration_number_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (iteration_number_s1_agent_rp_valid),                    //          .valid
		.sink_data          (iteration_number_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (iteration_number_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (iteration_number_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                  //       src.ready
		.src_valid          (router_016_src_valid),                                  //          .valid
		.src_data           (router_016_src_data),                                   //          .data
		.src_channel        (router_016_src_channel),                                //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_017 (
		.sink_ready         (finish_fdtd_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (finish_fdtd_s1_agent_rp_valid),                         //          .valid
		.sink_data          (finish_fdtd_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (finish_fdtd_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (finish_fdtd_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                  //       src.ready
		.src_valid          (router_017_src_valid),                                  //          .valid
		.src_data           (router_017_src_data),                                   //          .data
		.src_channel        (router_017_src_channel),                                //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_018 (
		.sink_ready         (module_csr_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (module_csr_s1_agent_rp_valid),                          //          .valid
		.sink_data          (module_csr_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (module_csr_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (module_csr_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                  //       src.ready
		.src_valid          (router_018_src_valid),                                  //          .valid
		.src_data           (router_018_src_data),                                   //          .data
		.src_channel        (router_018_src_channel),                                //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_019 (
		.sink_ready         (power_unlock_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (power_unlock_s1_agent_rp_valid),                        //          .valid
		.sink_data          (power_unlock_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (power_unlock_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (power_unlock_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                  //       src.ready
		.src_valid          (router_019_src_valid),                                  //          .valid
		.src_data           (router_019_src_data),                                   //          .data
		.src_channel        (router_019_src_channel),                                //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_020 (
		.sink_ready         (hw_reset_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (hw_reset_s1_agent_rp_valid),                            //          .valid
		.sink_data          (hw_reset_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (hw_reset_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (hw_reset_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                  //       src.ready
		.src_valid          (router_020_src_valid),                                  //          .valid
		.src_data           (router_020_src_data),                                   //          .data
		.src_channel        (router_020_src_channel),                                //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_router_002 router_021 (
		.sink_ready         (pixel_dma_addr_translation_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_dma_addr_translation_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_dma_addr_translation_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clocks_sys_clk_clk),                                      //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_021_src_ready),                                    //       src.ready
		.src_valid          (router_021_src_valid),                                    //          .valid
		.src_data           (router_021_src_data),                                     //          .data
		.src_channel        (router_021_src_channel),                                  //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (20),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clocks_sys_clk_clk),                                                  //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (20),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clocks_sys_clk_clk),                                                  //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vga_subsystem_char_control_slave_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                                   //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                    //          .ready
		.source0_valid         (vga_subsystem_char_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_subsystem_char_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_subsystem_char_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_subsystem_char_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_subsystem_char_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_subsystem_char_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_hps_to_fpga_in_csr_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                          //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                       //          .ready
		.source0_valid         (fifo_hps_to_fpga_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_hps_to_fpga_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_hps_to_fpga_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_hps_to_fpga_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_hps_to_fpga_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_hps_to_fpga_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_fpga_to_hps_out_csr_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                           //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                        //          .ready
		.source0_valid         (fifo_fpga_to_hps_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_fpga_to_hps_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_fpga_to_hps_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_fpga_to_hps_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_fpga_to_hps_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_fpga_to_hps_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sw_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                 //          .ready
		.source0_valid         (sw_s1_burst_adapter_source0_valid),                     //   source0.valid
		.source0_data          (sw_s1_burst_adapter_source0_data),                      //          .data
		.source0_channel       (sw_s1_burst_adapter_source0_channel),                   //          .channel
		.source0_startofpacket (sw_s1_burst_adapter_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (sw_s1_burst_adapter_source0_endofpacket),               //          .endofpacket
		.source0_ready         (sw_s1_burst_adapter_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) number32_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                 //          .ready
		.source0_valid         (number32_s1_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (number32_s1_burst_adapter_source0_data),                //          .data
		.source0_channel       (number32_s1_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (number32_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (number32_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (number32_s1_burst_adapter_source0_ready)                //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) o_temperature_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                 //          .ready
		.source0_valid         (o_temperature_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (o_temperature_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (o_temperature_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (o_temperature_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (o_temperature_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (o_temperature_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) o_pw_forward_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                 //          .ready
		.source0_valid         (o_pw_forward_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (o_pw_forward_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (o_pw_forward_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (o_pw_forward_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (o_pw_forward_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (o_pw_forward_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) o_pw_reversed_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                 //          .ready
		.source0_valid         (o_pw_reversed_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (o_pw_reversed_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (o_pw_reversed_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (o_pw_reversed_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (o_pw_reversed_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (o_pw_reversed_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) o_temperature2_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                 //          .ready
		.source0_valid         (o_temperature2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (o_temperature2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (o_temperature2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (o_temperature2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (o_temperature2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (o_temperature2_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) rf_on_off_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                 //          .ready
		.source0_valid         (rf_on_off_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (rf_on_off_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (rf_on_off_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (rf_on_off_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (rf_on_off_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (rf_on_off_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) command_from_hps_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                      //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                   //          .ready
		.source0_valid         (command_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (command_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (command_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (command_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (command_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (command_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sp_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                 //          .ready
		.source0_valid         (sp_s1_burst_adapter_source0_valid),                     //   source0.valid
		.source0_data          (sp_s1_burst_adapter_source0_data),                      //          .data
		.source0_channel       (sp_s1_burst_adapter_source0_channel),                   //          .channel
		.source0_startofpacket (sp_s1_burst_adapter_source0_startofpacket),             //          .startofpacket
		.source0_endofpacket   (sp_s1_burst_adapter_source0_endofpacket),               //          .endofpacket
		.source0_ready         (sp_s1_burst_adapter_source0_ready)                      //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) thermocouples_sel_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                       //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                    //          .ready
		.source0_valid         (thermocouples_sel_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (thermocouples_sel_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (thermocouples_sel_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (thermocouples_sel_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (thermocouples_sel_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (thermocouples_sel_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) electrode_voltage_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                       //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                    //          .ready
		.source0_valid         (electrode_voltage_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (electrode_voltage_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (electrode_voltage_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (electrode_voltage_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (electrode_voltage_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (electrode_voltage_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) iteration_number_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                      //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                   //          .ready
		.source0_valid         (iteration_number_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (iteration_number_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (iteration_number_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (iteration_number_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (iteration_number_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (iteration_number_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) finish_fdtd_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                 //          .ready
		.source0_valid         (finish_fdtd_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (finish_fdtd_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (finish_fdtd_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (finish_fdtd_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (finish_fdtd_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (finish_fdtd_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) module_csr_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                                 //          .ready
		.source0_valid         (module_csr_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (module_csr_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (module_csr_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (module_csr_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (module_csr_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (module_csr_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) power_unlock_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                                 //          .ready
		.source0_valid         (power_unlock_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (power_unlock_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (power_unlock_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (power_unlock_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (power_unlock_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (power_unlock_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hw_reset_s1_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                    //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                 //          .ready
		.source0_valid         (hw_reset_s1_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (hw_reset_s1_burst_adapter_source0_data),                //          .data
		.source0_channel       (hw_reset_s1_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (hw_reset_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (hw_reset_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (hw_reset_s1_burst_adapter_source0_ready)                //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pixel_dma_addr_translation_slave_burst_adapter (
		.clk                   (clocks_sys_clk_clk),                                                   //       cr0.clk
		.reset                 (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                                //          .ready
		.source0_valid         (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_dma_addr_translation_slave_burst_adapter_source0_ready)          //          .ready
	);

	nios2_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                 (clocks_sys_clk_clk),                                                  //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                //           .valid
		.src0_data           (cmd_demux_src0_data),                                                 //           .data
		.src0_channel        (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                //           .valid
		.src1_data           (cmd_demux_src1_data),                                                 //           .data
		.src1_channel        (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                //           .valid
		.src2_data           (cmd_demux_src2_data),                                                 //           .data
		.src2_channel        (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                //           .valid
		.src3_data           (cmd_demux_src3_data),                                                 //           .data
		.src3_channel        (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                //           .valid
		.src4_data           (cmd_demux_src4_data),                                                 //           .data
		.src4_channel        (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                //           .valid
		.src5_data           (cmd_demux_src5_data),                                                 //           .data
		.src5_channel        (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                //           .valid
		.src6_data           (cmd_demux_src6_data),                                                 //           .data
		.src6_channel        (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                          //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                //           .valid
		.src7_data           (cmd_demux_src7_data),                                                 //           .data
		.src7_channel        (cmd_demux_src7_channel),                                              //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                        //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                          //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                //           .valid
		.src8_data           (cmd_demux_src8_data),                                                 //           .data
		.src8_channel        (cmd_demux_src8_channel),                                              //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                        //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                          //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                //           .valid
		.src9_data           (cmd_demux_src9_data),                                                 //           .data
		.src9_channel        (cmd_demux_src9_channel),                                              //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                        //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                          //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                               //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                               //           .valid
		.src10_data          (cmd_demux_src10_data),                                                //           .data
		.src10_channel       (cmd_demux_src10_channel),                                             //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                       //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                         //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                               //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                               //           .valid
		.src11_data          (cmd_demux_src11_data),                                                //           .data
		.src11_channel       (cmd_demux_src11_channel),                                             //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                       //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                         //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                               //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                               //           .valid
		.src12_data          (cmd_demux_src12_data),                                                //           .data
		.src12_channel       (cmd_demux_src12_channel),                                             //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                       //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                         //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                               //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                               //           .valid
		.src13_data          (cmd_demux_src13_data),                                                //           .data
		.src13_channel       (cmd_demux_src13_channel),                                             //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                       //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                         //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                               //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                               //           .valid
		.src14_data          (cmd_demux_src14_data),                                                //           .data
		.src14_channel       (cmd_demux_src14_channel),                                             //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                       //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                         //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                               //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                               //           .valid
		.src15_data          (cmd_demux_src15_data),                                                //           .data
		.src15_channel       (cmd_demux_src15_channel),                                             //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                       //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                         //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                               //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                               //           .valid
		.src16_data          (cmd_demux_src16_data),                                                //           .data
		.src16_channel       (cmd_demux_src16_channel),                                             //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                       //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                         //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                               //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                               //           .valid
		.src17_data          (cmd_demux_src17_data),                                                //           .data
		.src17_channel       (cmd_demux_src17_channel),                                             //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                       //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                         //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                               //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                               //           .valid
		.src18_data          (cmd_demux_src18_data),                                                //           .data
		.src18_channel       (cmd_demux_src18_channel),                                             //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                       //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                         //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                               //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                               //           .valid
		.src19_data          (cmd_demux_src19_data),                                                //           .data
		.src19_channel       (cmd_demux_src19_channel),                                             //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                       //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket)                                          //           .endofpacket
	);

	nios2_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                 (clocks_sys_clk_clk),                                                  //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                            //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                             //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                           //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                            //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                           //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                            //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                     //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                           //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                           //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                            //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                         //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                     //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                           //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                           //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                            //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                         //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                     //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                           //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                           //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                            //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                         //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                   //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                     //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                           //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                           //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                            //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                         //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                   //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                     //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                           //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                           //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                            //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                         //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                   //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                     //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                           //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                           //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                            //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                         //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                   //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                     //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                           //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                           //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                            //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                         //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                   //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                     //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                           //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                           //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                            //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                         //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                   //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket)                                      //           .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                                     //          .valid
		.src_data            (cmd_mux_src_data),                                      //          .data
		.src_channel         (cmd_mux_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                //          .channel
		.sink0_data          (cmd_demux_src0_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                //          .channel
		.sink0_data          (cmd_demux_src1_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //          .valid
		.src_data            (cmd_mux_002_src_data),                                  //          .data
		.src_channel         (cmd_mux_002_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                //          .channel
		.sink0_data          (cmd_demux_src2_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                 //          .valid
		.src_data            (cmd_mux_003_src_data),                                  //          .data
		.src_channel         (cmd_mux_003_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                //          .channel
		.sink0_data          (cmd_demux_src3_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                 //          .valid
		.src_data            (cmd_mux_004_src_data),                                  //          .data
		.src_channel         (cmd_mux_004_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                //          .channel
		.sink0_data          (cmd_demux_src4_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                 //          .valid
		.src_data            (cmd_mux_005_src_data),                                  //          .data
		.src_channel         (cmd_mux_005_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                //          .channel
		.sink0_data          (cmd_demux_src5_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_006 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                 //          .valid
		.src_data            (cmd_mux_006_src_data),                                  //          .data
		.src_channel         (cmd_mux_006_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                //          .channel
		.sink0_data          (cmd_demux_src6_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_007 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                 //          .valid
		.src_data            (cmd_mux_007_src_data),                                  //          .data
		.src_channel         (cmd_mux_007_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                //          .channel
		.sink0_data          (cmd_demux_src7_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_008 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                 //          .valid
		.src_data            (cmd_mux_008_src_data),                                  //          .data
		.src_channel         (cmd_mux_008_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                //          .channel
		.sink0_data          (cmd_demux_src8_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_009 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                 //          .valid
		.src_data            (cmd_mux_009_src_data),                                  //          .data
		.src_channel         (cmd_mux_009_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                //          .channel
		.sink0_data          (cmd_demux_src9_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_010 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                 //          .valid
		.src_data            (cmd_mux_010_src_data),                                  //          .data
		.src_channel         (cmd_mux_010_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                               //          .channel
		.sink0_data          (cmd_demux_src10_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_011 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                 //          .valid
		.src_data            (cmd_mux_011_src_data),                                  //          .data
		.src_channel         (cmd_mux_011_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                               //          .channel
		.sink0_data          (cmd_demux_src11_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_012 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                 //          .valid
		.src_data            (cmd_mux_012_src_data),                                  //          .data
		.src_channel         (cmd_mux_012_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                               //          .channel
		.sink0_data          (cmd_demux_src12_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_013 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                 //          .valid
		.src_data            (cmd_mux_013_src_data),                                  //          .data
		.src_channel         (cmd_mux_013_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                               //          .channel
		.sink0_data          (cmd_demux_src13_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_014 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                 //          .valid
		.src_data            (cmd_mux_014_src_data),                                  //          .data
		.src_channel         (cmd_mux_014_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                               //          .channel
		.sink0_data          (cmd_demux_src14_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_015 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                 //          .valid
		.src_data            (cmd_mux_015_src_data),                                  //          .data
		.src_channel         (cmd_mux_015_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                               //          .channel
		.sink0_data          (cmd_demux_src15_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_016 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                 //          .valid
		.src_data            (cmd_mux_016_src_data),                                  //          .data
		.src_channel         (cmd_mux_016_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                               //          .channel
		.sink0_data          (cmd_demux_src16_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_017 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                 //          .valid
		.src_data            (cmd_mux_017_src_data),                                  //          .data
		.src_channel         (cmd_mux_017_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                               //          .channel
		.sink0_data          (cmd_demux_src17_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_018 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                 //          .valid
		.src_data            (cmd_mux_018_src_data),                                  //          .data
		.src_channel         (cmd_mux_018_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                               //          .channel
		.sink0_data          (cmd_demux_src18_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_cmd_mux cmd_mux_019 (
		.clk                 (clocks_sys_clk_clk),                                    //       clk.clk
		.reset               (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                 //          .valid
		.src_data            (cmd_mux_019_src_data),                                  //          .data
		.src_channel         (cmd_mux_019_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                               //          .channel
		.sink0_data          (cmd_demux_src19_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket)                        //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                  //      sink.ready
		.sink_channel       (router_002_src_channel),                                //          .channel
		.sink_data          (router_002_src_data),                                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_002_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                             //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                  //      sink.ready
		.sink_channel       (router_003_src_channel),                                //          .channel
		.sink_data          (router_003_src_data),                                   //          .data
		.sink_startofpacket (router_003_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_003_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_001_src1_data),                               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                  //      sink.ready
		.sink_channel       (router_004_src_channel),                                //          .channel
		.sink_data          (router_004_src_data),                                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_004_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_002_src1_data),                               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_003 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                  //      sink.ready
		.sink_channel       (router_005_src_channel),                                //          .channel
		.sink_data          (router_005_src_data),                                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_005_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_003_src0_data),                               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_003_src1_data),                               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_004 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                  //      sink.ready
		.sink_channel       (router_006_src_channel),                                //          .channel
		.sink_data          (router_006_src_data),                                   //          .data
		.sink_startofpacket (router_006_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_006_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_004_src1_data),                               //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_005 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                  //      sink.ready
		.sink_channel       (router_007_src_channel),                                //          .channel
		.sink_data          (router_007_src_data),                                   //          .data
		.sink_startofpacket (router_007_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_007_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_005_src0_data),                               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_005_src1_data),                               //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_006 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                  //      sink.ready
		.sink_channel       (router_008_src_channel),                                //          .channel
		.sink_data          (router_008_src_data),                                   //          .data
		.sink_startofpacket (router_008_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_008_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_006_src0_data),                               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_006_src1_data),                               //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_007 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                  //      sink.ready
		.sink_channel       (router_009_src_channel),                                //          .channel
		.sink_data          (router_009_src_data),                                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_009_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_007_src0_data),                               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_007_src1_data),                               //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_008 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                  //      sink.ready
		.sink_channel       (router_010_src_channel),                                //          .channel
		.sink_data          (router_010_src_data),                                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_010_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_008_src0_data),                               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_008_src1_data),                               //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_009 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                  //      sink.ready
		.sink_channel       (router_011_src_channel),                                //          .channel
		.sink_data          (router_011_src_data),                                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_011_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_009_src1_data),                               //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_010 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                  //      sink.ready
		.sink_channel       (router_012_src_channel),                                //          .channel
		.sink_data          (router_012_src_data),                                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_012_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_010_src0_data),                               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_010_src1_data),                               //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_011 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                  //      sink.ready
		.sink_channel       (router_013_src_channel),                                //          .channel
		.sink_data          (router_013_src_data),                                   //          .data
		.sink_startofpacket (router_013_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_013_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_011_src0_data),                               //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_011_src1_data),                               //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_012 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                  //      sink.ready
		.sink_channel       (router_014_src_channel),                                //          .channel
		.sink_data          (router_014_src_data),                                   //          .data
		.sink_startofpacket (router_014_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_014_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_012_src0_data),                               //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_012_src1_data),                               //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_013 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                  //      sink.ready
		.sink_channel       (router_015_src_channel),                                //          .channel
		.sink_data          (router_015_src_data),                                   //          .data
		.sink_startofpacket (router_015_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_015_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_013_src0_data),                               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_013_src1_data),                               //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_014 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                  //      sink.ready
		.sink_channel       (router_016_src_channel),                                //          .channel
		.sink_data          (router_016_src_data),                                   //          .data
		.sink_startofpacket (router_016_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_016_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_014_src0_data),                               //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_014_src1_data),                               //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_015 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                  //      sink.ready
		.sink_channel       (router_017_src_channel),                                //          .channel
		.sink_data          (router_017_src_data),                                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_017_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_015_src0_data),                               //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_015_src1_data),                               //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_016 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                  //      sink.ready
		.sink_channel       (router_018_src_channel),                                //          .channel
		.sink_data          (router_018_src_data),                                   //          .data
		.sink_startofpacket (router_018_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_018_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_016_src0_data),                               //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_016_src1_data),                               //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_017 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                  //      sink.ready
		.sink_channel       (router_019_src_channel),                                //          .channel
		.sink_data          (router_019_src_data),                                   //          .data
		.sink_startofpacket (router_019_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_019_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_017_src0_data),                               //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_017_src1_data),                               //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_018 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                  //      sink.ready
		.sink_channel       (router_020_src_channel),                                //          .channel
		.sink_data          (router_020_src_data),                                   //          .data
		.sink_startofpacket (router_020_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_020_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_018_src0_data),                               //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_018_src1_data),                               //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_demux rsp_demux_019 (
		.clk                (clocks_sys_clk_clk),                                    //       clk.clk
		.reset              (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                  //      sink.ready
		.sink_channel       (router_021_src_channel),                                //          .channel
		.sink_data          (router_021_src_data),                                   //          .data
		.sink_startofpacket (router_021_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_021_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_019_src0_data),                               //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_019_src1_data),                               //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                         //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                  (clocks_sys_clk_clk),                                                  //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                   //          .valid
		.src_data             (rsp_mux_src_data),                                                    //          .data
		.src_channel          (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                            //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                          //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                            //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                          //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                          //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                          //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                          //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                          //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                          //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                          //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                      //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                            //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                            //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                          //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                             //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                      //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                            //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                            //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                          //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                             //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                      //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                            //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                            //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                          //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                             //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                      //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                            //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                            //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                          //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                             //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                      //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                            //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                            //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                          //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                             //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                      //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                            //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                            //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                          //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                             //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                    //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                      //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                            //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                            //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                          //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                             //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                    //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket)                                       //          .endofpacket
	);

	nios2_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                  (clocks_sys_clk_clk),                                                  //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                               //          .valid
		.src_data             (rsp_mux_001_src_data),                                                //          .data
		.src_channel          (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                            //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                          //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                            //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                          //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                      //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                          //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                          //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                          //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                          //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                          //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                          //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                      //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                            //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                            //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                          //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                             //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                                      //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                                            //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                                            //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                                          //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                                             //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                                      //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                                            //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                                            //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                                          //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                                             //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                                      //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                                            //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                                            //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                                          //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                                             //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                                      //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                                            //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                                            //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                                          //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                                             //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                                      //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                                            //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                                            //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                                          //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                                             //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),                                    //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),                                      //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                                            //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                                            //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),                                          //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                                             //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),                                    //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket)                                       //          .endofpacket
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (fifo_hps_to_fpga_in_csr_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (fifo_fpga_to_hps_out_csr_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_out_data),                       //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_out_valid),                      //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_out_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (number32_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (number32_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (number32_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (o_temperature_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (o_temperature_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (o_temperature_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (o_pw_forward_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (o_pw_forward_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (o_pw_forward_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (o_pw_reversed_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (o_pw_reversed_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (o_pw_reversed_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (o_temperature2_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (o_temperature2_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (o_temperature2_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rf_on_off_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (rf_on_off_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (rf_on_off_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (command_from_hps_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (command_from_hps_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (command_from_hps_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sp_s1_agent_rdata_fifo_out_data),                       //     in_0.data
		.in_0_valid     (sp_s1_agent_rdata_fifo_out_valid),                      //         .valid
		.in_0_ready     (sp_s1_agent_rdata_fifo_out_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (thermocouples_sel_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (thermocouples_sel_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (thermocouples_sel_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (electrode_voltage_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (electrode_voltage_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (electrode_voltage_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (iteration_number_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (iteration_number_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (iteration_number_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (finish_fdtd_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (finish_fdtd_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (finish_fdtd_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (module_csr_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (module_csr_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (module_csr_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (power_unlock_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (power_unlock_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (power_unlock_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hw_reset_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (hw_reset_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (hw_reset_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                      //         .error
	);

	nios2_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clocks_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (fifo_HPS_to_FPGA_reset_in_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                            //         .error
	);

endmodule
