#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'nios2' in
 * file './nios2.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'sdram', class 'altera_avalon_new_sdram_controller'
 * The macros are prefixed with 'SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define SDRAM_COMPONENT_TYPE altera_avalon_new_sdram_controller
#define SDRAM_COMPONENT_NAME sdram
//#define SDRAM_BASE 0x0
//#define SDRAM_SPAN 67108864
//#define SDRAM_END 0x3ffffff
#define SDRAM_CAS_LATENCY 3
#define SDRAM_CONTENTS_INFO 
#define SDRAM_INIT_NOP_DELAY 0.0
#define SDRAM_INIT_REFRESH_COMMANDS 2
#define SDRAM_IS_INITIALIZED 1
#define SDRAM_POWERUP_DELAY 100.0
#define SDRAM_REFRESH_PERIOD 15.625
#define SDRAM_REGISTER_DATA_IN 1
#define SDRAM_SDRAM_ADDR_WIDTH 25
#define SDRAM_SDRAM_BANK_WIDTH 2
#define SDRAM_SDRAM_COL_WIDTH 10
#define SDRAM_SDRAM_DATA_WIDTH 16
#define SDRAM_SDRAM_NUM_BANKS 4
#define SDRAM_SDRAM_NUM_CHIPSELECTS 1
#define SDRAM_SDRAM_ROW_WIDTH 13
#define SDRAM_SHARED_DATA 0
#define SDRAM_SIM_MODEL_BASE 0
#define SDRAM_STARVATION_INDICATOR 0
#define SDRAM_TRISTATE_BRIDGE_SLAVE ""
#define SDRAM_T_AC 5.5
#define SDRAM_T_MRD 3
#define SDRAM_T_RCD 20.0
#define SDRAM_T_RFC 70.0
#define SDRAM_T_RP 20.0
#define SDRAM_T_WR 14.0
#define SDRAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16

/*
 * Macros for device 'HW_reset', class 'altera_avalon_pio'
 * The macros are prefixed with 'HW_RESET_'.
 * The prefix is the slave descriptor.
 */
#define HW_RESET_COMPONENT_TYPE altera_avalon_pio
#define HW_RESET_COMPONENT_NAME HW_reset
#define HW_RESET_BASE 0x0
#define HW_RESET_SPAN 16
#define HW_RESET_END 0xf
#define HW_RESET_BIT_CLEARING_EDGE_REGISTER 0
#define HW_RESET_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HW_RESET_CAPTURE 0
#define HW_RESET_DATA_WIDTH 8
#define HW_RESET_DO_TEST_BENCH_WIRING 0
#define HW_RESET_DRIVEN_SIM_VALUE 0
#define HW_RESET_EDGE_TYPE NONE
#define HW_RESET_FREQ 100000000
#define HW_RESET_HAS_IN 0
#define HW_RESET_HAS_OUT 1
#define HW_RESET_HAS_TRI 0
#define HW_RESET_IRQ_TYPE NONE
#define HW_RESET_RESET_VALUE 0

/*
 * Macros for device 'SW', class 'altera_avalon_pio'
 * The macros are prefixed with 'SW_'.
 * The prefix is the slave descriptor.
 */
#define SW_COMPONENT_TYPE altera_avalon_pio
#define SW_COMPONENT_NAME SW
#define SW_BASE 0x10
#define SW_SPAN 16
#define SW_END 0x1f
#define SW_BIT_CLEARING_EDGE_REGISTER 0
#define SW_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SW_CAPTURE 0
#define SW_DATA_WIDTH 10
#define SW_DO_TEST_BENCH_WIRING 0
#define SW_DRIVEN_SIM_VALUE 0
#define SW_EDGE_TYPE NONE
#define SW_FREQ 100000000
#define SW_HAS_IN 1
#define SW_HAS_OUT 0
#define SW_HAS_TRI 0
#define SW_IRQ_TYPE NONE
#define SW_RESET_VALUE 0

/*
* Macros for device 'Number32', class 'altera_avalon_pio'
* The macros are prefixed with 'NUMBER32_'.
* The prefix is the slave descriptor.
*/
#define NUMBER32_COMPONENT_TYPE altera_avalon_pio
#define NUMBER32_COMPONENT_NAME Number32
#define NUMBER32_BASE 0x20
#define NUMBER32_SPAN 16
#define NUMBER32_END 0x2f
#define NUMBER32_BIT_CLEARING_EDGE_REGISTER 0
#define NUMBER32_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NUMBER32_CAPTURE 0
#define NUMBER32_DATA_WIDTH 32
#define NUMBER32_DO_TEST_BENCH_WIRING 0
#define NUMBER32_DRIVEN_SIM_VALUE 0
#define NUMBER32_EDGE_TYPE NONE
#define NUMBER32_FREQ 100000000
#define NUMBER32_HAS_IN 1
#define NUMBER32_HAS_OUT 0
#define NUMBER32_HAS_TRI 0
#define NUMBER32_IRQ_TYPE NONE
#define NUMBER32_RESET_VALUE 0

/*
 * Macros for device 'O_temperature', class 'altera_avalon_pio'
 * The macros are prefixed with 'O_TEMPERATURE_'.
 * The prefix is the slave descriptor.
 */
#define O_TEMPERATURE_COMPONENT_TYPE altera_avalon_pio
#define O_TEMPERATURE_COMPONENT_NAME O_temperature
#define O_TEMPERATURE_BASE 0x30
#define O_TEMPERATURE_SPAN 16
#define O_TEMPERATURE_END 0x3f
#define O_TEMPERATURE_BIT_CLEARING_EDGE_REGISTER 0
#define O_TEMPERATURE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define O_TEMPERATURE_CAPTURE 0
#define O_TEMPERATURE_DATA_WIDTH 16
#define O_TEMPERATURE_DO_TEST_BENCH_WIRING 0
#define O_TEMPERATURE_DRIVEN_SIM_VALUE 0
#define O_TEMPERATURE_EDGE_TYPE NONE
#define O_TEMPERATURE_FREQ 100000000
#define O_TEMPERATURE_HAS_IN 1
#define O_TEMPERATURE_HAS_OUT 0
#define O_TEMPERATURE_HAS_TRI 0
#define O_TEMPERATURE_IRQ_TYPE NONE
#define O_TEMPERATURE_RESET_VALUE 0

/*
 * Macros for device 'O_temperature2', class 'altera_avalon_pio'
 * The macros are prefixed with 'O_TEMPERATURE2_'.
 * The prefix is the slave descriptor.
 */
#define O_TEMPERATURE2_COMPONENT_TYPE altera_avalon_pio
#define O_TEMPERATURE2_COMPONENT_NAME O_temperature2
#define O_TEMPERATURE2_BASE 0x40
#define O_TEMPERATURE2_SPAN 16
#define O_TEMPERATURE2_END 0x4f
#define O_TEMPERATURE2_BIT_CLEARING_EDGE_REGISTER 0
#define O_TEMPERATURE2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define O_TEMPERATURE2_CAPTURE 0
#define O_TEMPERATURE2_DATA_WIDTH 16
#define O_TEMPERATURE2_DO_TEST_BENCH_WIRING 0
#define O_TEMPERATURE2_DRIVEN_SIM_VALUE 0
#define O_TEMPERATURE2_EDGE_TYPE NONE
#define O_TEMPERATURE2_FREQ 100000000
#define O_TEMPERATURE2_HAS_IN 1
#define O_TEMPERATURE2_HAS_OUT 0
#define O_TEMPERATURE2_HAS_TRI 0
#define O_TEMPERATURE2_IRQ_TYPE NONE
#define O_TEMPERATURE2_RESET_VALUE 0

/*
 * Macros for device 'O_pw_forward', class 'altera_avalon_pio'
 * The macros are prefixed with 'O_PW_FORWARD_'.
 * The prefix is the slave descriptor.
 */
#define O_PW_FORWARD_COMPONENT_TYPE altera_avalon_pio
#define O_PW_FORWARD_COMPONENT_NAME O_pw_forward
#define O_PW_FORWARD_BASE 0x50
#define O_PW_FORWARD_SPAN 16
#define O_PW_FORWARD_END 0x5f
#define O_PW_FORWARD_BIT_CLEARING_EDGE_REGISTER 0
#define O_PW_FORWARD_BIT_MODIFYING_OUTPUT_REGISTER 0
#define O_PW_FORWARD_CAPTURE 0
#define O_PW_FORWARD_DATA_WIDTH 16
#define O_PW_FORWARD_DO_TEST_BENCH_WIRING 0
#define O_PW_FORWARD_DRIVEN_SIM_VALUE 0
#define O_PW_FORWARD_EDGE_TYPE NONE
#define O_PW_FORWARD_FREQ 100000000
#define O_PW_FORWARD_HAS_IN 1
#define O_PW_FORWARD_HAS_OUT 0
#define O_PW_FORWARD_HAS_TRI 0
#define O_PW_FORWARD_IRQ_TYPE NONE
#define O_PW_FORWARD_RESET_VALUE 0

/*
 * Macros for device 'O_pw_reversed', class 'altera_avalon_pio'
 * The macros are prefixed with 'O_PW_REVERSED_'.
 * The prefix is the slave descriptor.
 */
#define O_PW_REVERSED_COMPONENT_TYPE altera_avalon_pio
#define O_PW_REVERSED_COMPONENT_NAME O_pw_reversed
#define O_PW_REVERSED_BASE 0x60
#define O_PW_REVERSED_SPAN 16
#define O_PW_REVERSED_END 0x6f
#define O_PW_REVERSED_BIT_CLEARING_EDGE_REGISTER 0
#define O_PW_REVERSED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define O_PW_REVERSED_CAPTURE 0
#define O_PW_REVERSED_DATA_WIDTH 16
#define O_PW_REVERSED_DO_TEST_BENCH_WIRING 0
#define O_PW_REVERSED_DRIVEN_SIM_VALUE 0
#define O_PW_REVERSED_EDGE_TYPE NONE
#define O_PW_REVERSED_FREQ 100000000
#define O_PW_REVERSED_HAS_IN 1
#define O_PW_REVERSED_HAS_OUT 0
#define O_PW_REVERSED_HAS_TRI 0
#define O_PW_REVERSED_IRQ_TYPE NONE
#define O_PW_REVERSED_RESET_VALUE 0

/*
 * Macros for device 'rf_on_off', class 'altera_avalon_pio'
 * The macros are prefixed with 'RF_ON_OFF_'.
 * The prefix is the slave descriptor.
 */
#define RF_ON_OFF_COMPONENT_TYPE altera_avalon_pio
#define RF_ON_OFF_COMPONENT_NAME rf_on_off
#define RF_ON_OFF_BASE 0x70
#define RF_ON_OFF_SPAN 16
#define RF_ON_OFF_END 0x7f
#define RF_ON_OFF_BIT_CLEARING_EDGE_REGISTER 0
#define RF_ON_OFF_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RF_ON_OFF_CAPTURE 0
#define RF_ON_OFF_DATA_WIDTH 1
#define RF_ON_OFF_DO_TEST_BENCH_WIRING 0
#define RF_ON_OFF_DRIVEN_SIM_VALUE 0
#define RF_ON_OFF_EDGE_TYPE NONE
#define RF_ON_OFF_FREQ 100000000
#define RF_ON_OFF_HAS_IN 0
#define RF_ON_OFF_HAS_OUT 1
#define RF_ON_OFF_HAS_TRI 0
#define RF_ON_OFF_IRQ_TYPE NONE
#define RF_ON_OFF_RESET_VALUE 0

/*
 * Macros for device 'command_from_hps', class 'altera_avalon_pio'
 * The macros are prefixed with 'COMMAND_FROM_HPS_'.
 * The prefix is the slave descriptor.
 */
#define COMMAND_FROM_HPS_COMPONENT_TYPE altera_avalon_pio
#define COMMAND_FROM_HPS_COMPONENT_NAME command_from_hps
#define COMMAND_FROM_HPS_BASE 0x80
#define COMMAND_FROM_HPS_SPAN 16
#define COMMAND_FROM_HPS_END 0x8f
#define COMMAND_FROM_HPS_BIT_CLEARING_EDGE_REGISTER 0
#define COMMAND_FROM_HPS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define COMMAND_FROM_HPS_CAPTURE 0
#define COMMAND_FROM_HPS_DATA_WIDTH 32
#define COMMAND_FROM_HPS_DO_TEST_BENCH_WIRING 0
#define COMMAND_FROM_HPS_DRIVEN_SIM_VALUE 0
#define COMMAND_FROM_HPS_EDGE_TYPE NONE
#define COMMAND_FROM_HPS_FREQ 100000000
#define COMMAND_FROM_HPS_HAS_IN 0
#define COMMAND_FROM_HPS_HAS_OUT 1
#define COMMAND_FROM_HPS_HAS_TRI 0
#define COMMAND_FROM_HPS_IRQ_TYPE NONE
#define COMMAND_FROM_HPS_RESET_VALUE 0

/*
 * Macros for device 'SP', class 'altera_avalon_pio'
 * The macros are prefixed with 'SP_'.
 * The prefix is the slave descriptor.
 */
#define SP_COMPONENT_TYPE altera_avalon_pio
#define SP_COMPONENT_NAME SP
#define SP_BASE 0x90
#define SP_SPAN 16
#define SP_END 0x9f
#define SP_BIT_CLEARING_EDGE_REGISTER 0
#define SP_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SP_CAPTURE 0
#define SP_DATA_WIDTH 20
#define SP_DO_TEST_BENCH_WIRING 0
#define SP_DRIVEN_SIM_VALUE 0
#define SP_EDGE_TYPE NONE
#define SP_FREQ 100000000
#define SP_HAS_IN 0
#define SP_HAS_OUT 1
#define SP_HAS_TRI 0
#define SP_IRQ_TYPE NONE
#define SP_RESET_VALUE 0

/*
 * Macros for device 'thermocouples_sel', class 'altera_avalon_pio'
 * The macros are prefixed with 'THERMOCOUPLES_SEL_'.
 * The prefix is the slave descriptor.
 */
#define THERMOCOUPLES_SEL_COMPONENT_TYPE altera_avalon_pio
#define THERMOCOUPLES_SEL_COMPONENT_NAME thermocouples_sel
#define THERMOCOUPLES_SEL_BASE 0xa0
#define THERMOCOUPLES_SEL_SPAN 16
#define THERMOCOUPLES_SEL_END 0xaf
#define THERMOCOUPLES_SEL_BIT_CLEARING_EDGE_REGISTER 0
#define THERMOCOUPLES_SEL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define THERMOCOUPLES_SEL_CAPTURE 0
#define THERMOCOUPLES_SEL_DATA_WIDTH 1
#define THERMOCOUPLES_SEL_DO_TEST_BENCH_WIRING 0
#define THERMOCOUPLES_SEL_DRIVEN_SIM_VALUE 0
#define THERMOCOUPLES_SEL_EDGE_TYPE NONE
#define THERMOCOUPLES_SEL_FREQ 100000000
#define THERMOCOUPLES_SEL_HAS_IN 0
#define THERMOCOUPLES_SEL_HAS_OUT 1
#define THERMOCOUPLES_SEL_HAS_TRI 0
#define THERMOCOUPLES_SEL_IRQ_TYPE NONE
#define THERMOCOUPLES_SEL_RESET_VALUE 0

/*
 * Macros for device 'electrode_voltage', class 'altera_avalon_pio'
 * The macros are prefixed with 'ELECTRODE_VOLTAGE_'.
 * The prefix is the slave descriptor.
 */
#define ELECTRODE_VOLTAGE_COMPONENT_TYPE altera_avalon_pio
#define ELECTRODE_VOLTAGE_COMPONENT_NAME electrode_voltage
#define ELECTRODE_VOLTAGE_BASE 0xb0
#define ELECTRODE_VOLTAGE_SPAN 16
#define ELECTRODE_VOLTAGE_END 0xbf
#define ELECTRODE_VOLTAGE_BIT_CLEARING_EDGE_REGISTER 0
#define ELECTRODE_VOLTAGE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ELECTRODE_VOLTAGE_CAPTURE 0
#define ELECTRODE_VOLTAGE_DATA_WIDTH 32
#define ELECTRODE_VOLTAGE_DO_TEST_BENCH_WIRING 0
#define ELECTRODE_VOLTAGE_DRIVEN_SIM_VALUE 0
#define ELECTRODE_VOLTAGE_EDGE_TYPE NONE
#define ELECTRODE_VOLTAGE_FREQ 100000000
#define ELECTRODE_VOLTAGE_HAS_IN 0
#define ELECTRODE_VOLTAGE_HAS_OUT 1
#define ELECTRODE_VOLTAGE_HAS_TRI 0
#define ELECTRODE_VOLTAGE_IRQ_TYPE NONE
#define ELECTRODE_VOLTAGE_RESET_VALUE 0

/*
 * Macros for device 'iteration_number', class 'altera_avalon_pio'
 * The macros are prefixed with 'ITERATION_NUMBER_'.
 * The prefix is the slave descriptor.
 */
#define ITERATION_NUMBER_COMPONENT_TYPE altera_avalon_pio
#define ITERATION_NUMBER_COMPONENT_NAME iteration_number
#define ITERATION_NUMBER_BASE 0xc0
#define ITERATION_NUMBER_SPAN 16
#define ITERATION_NUMBER_END 0xcf
#define ITERATION_NUMBER_BIT_CLEARING_EDGE_REGISTER 0
#define ITERATION_NUMBER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define ITERATION_NUMBER_CAPTURE 0
#define ITERATION_NUMBER_DATA_WIDTH 12
#define ITERATION_NUMBER_DO_TEST_BENCH_WIRING 0
#define ITERATION_NUMBER_DRIVEN_SIM_VALUE 0
#define ITERATION_NUMBER_EDGE_TYPE NONE
#define ITERATION_NUMBER_FREQ 100000000
#define ITERATION_NUMBER_HAS_IN 0
#define ITERATION_NUMBER_HAS_OUT 1
#define ITERATION_NUMBER_HAS_TRI 0
#define ITERATION_NUMBER_IRQ_TYPE NONE
#define ITERATION_NUMBER_RESET_VALUE 0

 /*
  * Macros for device 'finish_fdtd', class 'altera_avalon_pio'
  * The macros are prefixed with 'FINISH_FDTD_'.
  * The prefix is the slave descriptor.
  */
#define FINISH_FDTD_COMPONENT_TYPE altera_avalon_pio
#define FINISH_FDTD_COMPONENT_NAME finish_fdtd
#define FINISH_FDTD_BASE 0xd0
#define FINISH_FDTD_SPAN 16
#define FINISH_FDTD_END 0xdf
#define FINISH_FDTD_BIT_CLEARING_EDGE_REGISTER 0
#define FINISH_FDTD_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FINISH_FDTD_CAPTURE 0
#define FINISH_FDTD_DATA_WIDTH 8
#define FINISH_FDTD_DO_TEST_BENCH_WIRING 0
#define FINISH_FDTD_DRIVEN_SIM_VALUE 0
#define FINISH_FDTD_EDGE_TYPE NONE
#define FINISH_FDTD_FREQ 100000000
#define FINISH_FDTD_HAS_IN 1
#define FINISH_FDTD_HAS_OUT 0
#define FINISH_FDTD_HAS_TRI 0
#define FINISH_FDTD_IRQ_TYPE NONE
#define FINISH_FDTD_RESET_VALUE 0

/*
* Macros for device 'module_csr', class 'altera_avalon_pio'
* The macros are prefixed with 'MODULE_CSR_'.
* The prefix is the slave descriptor.
*/
#define MODULE_CSR_COMPONENT_TYPE altera_avalon_pio
#define MODULE_CSR_COMPONENT_NAME module_csr
#define MODULE_CSR_BASE 0xe0
#define MODULE_CSR_SPAN 16
#define MODULE_CSR_END 0xef
#define MODULE_CSR_BIT_CLEARING_EDGE_REGISTER 0
#define MODULE_CSR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define MODULE_CSR_CAPTURE 0
#define MODULE_CSR_DATA_WIDTH 16
#define MODULE_CSR_DO_TEST_BENCH_WIRING 0
#define MODULE_CSR_DRIVEN_SIM_VALUE 0
#define MODULE_CSR_EDGE_TYPE NONE
#define MODULE_CSR_FREQ 100000000
#define MODULE_CSR_HAS_IN 1
#define MODULE_CSR_HAS_OUT 0
#define MODULE_CSR_HAS_TRI 0
#define MODULE_CSR_IRQ_TYPE NONE
#define MODULE_CSR_RESET_VALUE 0

/*
 * Macros for device 'power_unlock', class 'altera_avalon_pio'
 * The macros are prefixed with 'POWER_UNLOCK_'.
 * The prefix is the slave descriptor.
 */
#define POWER_UNLOCK_COMPONENT_TYPE altera_avalon_pio
#define POWER_UNLOCK_COMPONENT_NAME power_unlock
#define POWER_UNLOCK_BASE 0xf0
#define POWER_UNLOCK_SPAN 16
#define POWER_UNLOCK_END 0xff
#define POWER_UNLOCK_BIT_CLEARING_EDGE_REGISTER 0
#define POWER_UNLOCK_BIT_MODIFYING_OUTPUT_REGISTER 0
#define POWER_UNLOCK_CAPTURE 0
#define POWER_UNLOCK_DATA_WIDTH 8
#define POWER_UNLOCK_DO_TEST_BENCH_WIRING 0
#define POWER_UNLOCK_DRIVEN_SIM_VALUE 0
#define POWER_UNLOCK_EDGE_TYPE NONE
#define POWER_UNLOCK_FREQ 100000000
#define POWER_UNLOCK_HAS_IN 0
#define POWER_UNLOCK_HAS_OUT 1
#define POWER_UNLOCK_HAS_TRI 0
#define POWER_UNLOCK_IRQ_TYPE NONE
#define POWER_UNLOCK_RESET_VALUE 0

/*
 * Macros for device 'fifo_HPS_to_FPGA_in_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_HPS_TO_FPGA_IN_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_HPS_TO_FPGA_IN_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_HPS_TO_FPGA_IN_CSR_COMPONENT_NAME fifo_HPS_to_FPGA
#define FIFO_HPS_TO_FPGA_IN_CSR_BASE 0x100
#define FIFO_HPS_TO_FPGA_IN_CSR_SPAN 32
#define FIFO_HPS_TO_FPGA_IN_CSR_END 0x11f
#define FIFO_HPS_TO_FPGA_IN_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_CSR_BITS_PER_SYMBOL 16
#define FIFO_HPS_TO_FPGA_IN_CSR_CHANNEL_WIDTH 8
#define FIFO_HPS_TO_FPGA_IN_CSR_ERROR_WIDTH 8
#define FIFO_HPS_TO_FPGA_IN_CSR_FIFO_DEPTH 128
#define FIFO_HPS_TO_FPGA_IN_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_HPS_TO_FPGA_IN_CSR_SYMBOLS_PER_BEAT 2
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONST_SINK 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_AVALONST_SOURCE 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_BACKPRESSURE 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_IRQ 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_PACKET 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_READ_CONTROL 1
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_REGISTER 0
#define FIFO_HPS_TO_FPGA_IN_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_FPGA_to_HPS_out_csr', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_FPGA_TO_HPS_OUT_CSR_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_FPGA_TO_HPS_OUT_CSR_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_FPGA_TO_HPS_OUT_CSR_COMPONENT_NAME fifo_FPGA_to_HPS
#define FIFO_FPGA_TO_HPS_OUT_CSR_BASE 0x120
#define FIFO_FPGA_TO_HPS_OUT_CSR_SPAN 32
#define FIFO_FPGA_TO_HPS_OUT_CSR_END 0x13f
#define FIFO_FPGA_TO_HPS_OUT_CSR_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_CSR_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_CSR_BITS_PER_SYMBOL 16
#define FIFO_FPGA_TO_HPS_OUT_CSR_CHANNEL_WIDTH 8
#define FIFO_FPGA_TO_HPS_OUT_CSR_ERROR_WIDTH 8
#define FIFO_FPGA_TO_HPS_OUT_CSR_FIFO_DEPTH 128
#define FIFO_FPGA_TO_HPS_OUT_CSR_SINGLE_CLOCK_MODE 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_SYMBOLS_PER_BEAT 2
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONMM_READ_SLAVE 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONST_SINK 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_AVALONST_SOURCE 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_BACKPRESSURE 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_IRQ 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_PACKET 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_READ_CONTROL 1
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_REGISTER 0
#define FIFO_FPGA_TO_HPS_OUT_CSR_USE_WRITE_CONTROL 1

/*
 * Macros for device 'Pixel_DMA_Addr_Translation', class 'altera_up_avalon_video_dma_ctrl_addr_trans'
 * The macros are prefixed with 'PIXEL_DMA_ADDR_TRANSLATION_'.
 * The prefix is the slave descriptor.
 */
#define PIXEL_DMA_ADDR_TRANSLATION_COMPONENT_TYPE altera_up_avalon_video_dma_ctrl_addr_trans
#define PIXEL_DMA_ADDR_TRANSLATION_COMPONENT_NAME Pixel_DMA_Addr_Translation
#define PIXEL_DMA_ADDR_TRANSLATION_BASE 0x3020
#define PIXEL_DMA_ADDR_TRANSLATION_SPAN 16
#define PIXEL_DMA_ADDR_TRANSLATION_END 0x302f

/*
 * Macros for device 'VGA_subsystem_video_character_buffer_with_dma_0_avalon_char_control_slave', class 'altera_up_avalon_video_character_buffer_with_dma'
 * The macros are prefixed with 'VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_CONTROL_SLAVE_'.
 * The prefix is the slave descriptor.
 */
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_CONTROL_SLAVE_COMPONENT_TYPE altera_up_avalon_video_character_buffer_with_dma
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_CONTROL_SLAVE_COMPONENT_NAME VGA_subsystem_video_character_buffer_with_dma_0
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_CONTROL_SLAVE_BASE 0x3030
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_CONTROL_SLAVE_SPAN 8
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_CONTROL_SLAVE_END 0x3037

/*
 * Macros for device 'fifo_HPS_to_FPGA_in', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_HPS_TO_FPGA_IN_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_HPS_TO_FPGA_IN_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_HPS_TO_FPGA_IN_COMPONENT_NAME fifo_HPS_to_FPGA
//#define FIFO_HPS_TO_FPGA_IN_BASE 0x4000000
//#define FIFO_HPS_TO_FPGA_IN_SPAN 4
//#define FIFO_HPS_TO_FPGA_IN_END 0x4000003
#define FIFO_HPS_TO_FPGA_IN_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_HPS_TO_FPGA_IN_BITS_PER_SYMBOL 16
#define FIFO_HPS_TO_FPGA_IN_CHANNEL_WIDTH 8
#define FIFO_HPS_TO_FPGA_IN_ERROR_WIDTH 8
#define FIFO_HPS_TO_FPGA_IN_FIFO_DEPTH 128
#define FIFO_HPS_TO_FPGA_IN_SINGLE_CLOCK_MODE 0
#define FIFO_HPS_TO_FPGA_IN_SYMBOLS_PER_BEAT 2
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONMM_READ_SLAVE 1
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONST_SINK 0
#define FIFO_HPS_TO_FPGA_IN_USE_AVALONST_SOURCE 0
#define FIFO_HPS_TO_FPGA_IN_USE_BACKPRESSURE 0
#define FIFO_HPS_TO_FPGA_IN_USE_IRQ 0
#define FIFO_HPS_TO_FPGA_IN_USE_PACKET 1
#define FIFO_HPS_TO_FPGA_IN_USE_READ_CONTROL 1
#define FIFO_HPS_TO_FPGA_IN_USE_REGISTER 0
#define FIFO_HPS_TO_FPGA_IN_USE_WRITE_CONTROL 1

/*
 * Macros for device 'fifo_FPGA_to_HPS_out', class 'altera_avalon_fifo'
 * The macros are prefixed with 'FIFO_FPGA_TO_HPS_OUT_'.
 * The prefix is the slave descriptor.
 */
#define FIFO_FPGA_TO_HPS_OUT_COMPONENT_TYPE altera_avalon_fifo
#define FIFO_FPGA_TO_HPS_OUT_COMPONENT_NAME fifo_FPGA_to_HPS
//#define FIFO_FPGA_TO_HPS_OUT_BASE 0x4000010
//#define FIFO_FPGA_TO_HPS_OUT_SPAN 4
//#define FIFO_FPGA_TO_HPS_OUT_END 0x4000013
#define FIFO_FPGA_TO_HPS_OUT_AVALONMM_AVALONMM_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_AVALONMM_AVALONST_DATA_WIDTH 32
#define FIFO_FPGA_TO_HPS_OUT_BITS_PER_SYMBOL 16
#define FIFO_FPGA_TO_HPS_OUT_CHANNEL_WIDTH 8
#define FIFO_FPGA_TO_HPS_OUT_ERROR_WIDTH 8
#define FIFO_FPGA_TO_HPS_OUT_FIFO_DEPTH 128
#define FIFO_FPGA_TO_HPS_OUT_SINGLE_CLOCK_MODE 0
#define FIFO_FPGA_TO_HPS_OUT_SYMBOLS_PER_BEAT 2
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONMM_READ_SLAVE 1
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONMM_WRITE_SLAVE 1
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONST_SINK 0
#define FIFO_FPGA_TO_HPS_OUT_USE_AVALONST_SOURCE 0
#define FIFO_FPGA_TO_HPS_OUT_USE_BACKPRESSURE 0
#define FIFO_FPGA_TO_HPS_OUT_USE_IRQ 0
#define FIFO_FPGA_TO_HPS_OUT_USE_PACKET 1
#define FIFO_FPGA_TO_HPS_OUT_USE_READ_CONTROL 1
#define FIFO_FPGA_TO_HPS_OUT_USE_REGISTER 0
#define FIFO_FPGA_TO_HPS_OUT_USE_WRITE_CONTROL 1

/*
 * Macros for device 'onchip_ram1', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_RAM1_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_RAM1_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_RAM1_COMPONENT_NAME onchip_ram1
//#define ONCHIP_RAM1_BASE 0x8000000
//#define ONCHIP_RAM1_SPAN 256
//#define ONCHIP_RAM1_END 0x80000ff
#define ONCHIP_RAM1_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_RAM1_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_RAM1_CONTENTS_INFO ""
#define ONCHIP_RAM1_DUAL_PORT 1
#define ONCHIP_RAM1_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM1_INIT_CONTENTS_FILE nios2_onchip_ram1
#define ONCHIP_RAM1_INIT_MEM_CONTENT 0
#define ONCHIP_RAM1_INSTANCE_ID NONE
#define ONCHIP_RAM1_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_RAM1_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM1_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_RAM1_SINGLE_CLOCK_OP 0
#define ONCHIP_RAM1_SIZE_MULTIPLE 1
#define ONCHIP_RAM1_SIZE_VALUE 256
#define ONCHIP_RAM1_WRITABLE 1
#define ONCHIP_RAM1_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_RAM1_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_RAM1_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_RAM1_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_RAM1_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_RAM1_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16
#define ONCHIP_RAM1_MEMORY_INFO_MEM_INIT_FILENAME nios2_onchip_ram1

/*
 * Macros for device 'onchip_ram2', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_RAM2_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_RAM2_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_RAM2_COMPONENT_NAME onchip_ram2
//#define ONCHIP_RAM2_BASE 0x8000100
//#define ONCHIP_RAM2_SPAN 256
//#define ONCHIP_RAM2_END 0x80001ff
#define ONCHIP_RAM2_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_RAM2_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_RAM2_CONTENTS_INFO ""
#define ONCHIP_RAM2_DUAL_PORT 1
#define ONCHIP_RAM2_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM2_INIT_CONTENTS_FILE nios2_onchip_ram2
#define ONCHIP_RAM2_INIT_MEM_CONTENT 0
#define ONCHIP_RAM2_INSTANCE_ID NONE
#define ONCHIP_RAM2_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_RAM2_RAM_BLOCK_TYPE AUTO
#define ONCHIP_RAM2_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_RAM2_SINGLE_CLOCK_OP 0
#define ONCHIP_RAM2_SIZE_MULTIPLE 1
#define ONCHIP_RAM2_SIZE_VALUE 256
#define ONCHIP_RAM2_WRITABLE 1
#define ONCHIP_RAM2_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_RAM2_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_RAM2_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_RAM2_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_RAM2_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_RAM2_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16
#define ONCHIP_RAM2_MEMORY_INFO_MEM_INIT_FILENAME nios2_onchip_ram2

/*
 * Macros for device 'VGA_subsystem_video_character_buffer_with_dma_0_avalon_char_buffer_slave', class 'altera_up_avalon_video_character_buffer_with_dma'
 * The macros are prefixed with 'VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_'.
 * The prefix is the slave descriptor.
 */
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_COMPONENT_TYPE altera_up_avalon_video_character_buffer_with_dma
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_COMPONENT_NAME VGA_subsystem_video_character_buffer_with_dma_0
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_BASE 0x9000000
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_SPAN 8192
#define VGA_SUBSYSTEM_VIDEO_CHARACTER_BUFFER_WITH_DMA_0_AVALON_CHAR_BUFFER_SLAVE_END 0x9001fff


#endif /* _ALTERA_HPS_0_H_ */
